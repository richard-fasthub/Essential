/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(141);
	module.exports = __webpack_require__(310);


/***/ },
/* 1 */,
/* 2 */,
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* global ActiveXObject */

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _libIterate = __webpack_require__(28);

	var _libIterate2 = _interopRequireDefault(_libIterate);

	var locator = new ActiveXObject('WbemScripting.SWbemLocator');

	exports.locator = locator;
	var objWMIService = (function () {
	  var wmi = undefined;
	  var namespace = 'root\\cimv2';
	  try {
	    wmi = locator.ConnectServer(null, namespace);
	  } catch (err) {}
	  if (!wmi) {
	    var cmd = 'net start winmgmt';
	    new ActiveXObject('WScript.Shell').Run(cmd, 0, true);
	    wmi = locator.ConnectServer(null, namespace);
	  }
	  return wmi;
	}).call();

	exports.objWMIService = objWMIService;
	var getWMIObjects = function getWMIObjects(names, source, where) {
	  var wmi = arguments.length <= 3 || arguments[3] === undefined ? objWMIService : arguments[3];

	  try {
	    var _ret = (function () {
	      var results = [];
	      var query = 'SELECT * FROM ' + source;
	      if (where) {
	        query += ' WHERE ' + where;
	      }
	      var colItems = wmi.ExecQuery(query, 'WQL');
	      _libIterate2['default'](colItems, function (objItem) {
	        var obj = {};
	        names.forEach(function (name) {
	          try {
	            if (objItem[name] || objItem[name].toArray) {
	              if (objItem[name].toArray) {
	                obj[name] = objItem[name].toArray();
	              } else {
	                obj[name] = objItem[name];
	              }
	            }
	          } catch (e) {}
	        });
	        results.push(obj);
	      });
	      return {
	        v: results
	      };
	    })();

	    if (typeof _ret === 'object') return _ret.v;
	  } catch (e) {
	    return [];
	  }
	};
	exports.getWMIObjects = getWMIObjects;

/***/ },
/* 4 */,
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* global CONFIG */

	'use strict';

	exports.__esModule = true;
	var context = typeof window === 'undefined' ? {} : window;

	var version = context.version || '1.0';
	var verType = context.verType;

	var config = {
	  application: {
	    AppFolder: 'DRPSu',
	    DisplayVersion: verType ? version + ' ' + verType : version
	  },
	  analytics: {
	    category: 'desktop',
	    identifier: 'clientId',
	    google: {},
	    yandex: {
	      enabled: false
	    }
	  },
	  logging: true
	};

	try {
	  Object.assign(config, ({"application":{"DisplayVersion":"2.1.4","AppName":"DriverPack Notifier","AppFolder":"DriverPack Notifier","DisplayName":"DriverPack Notifier","AppExecutable":"DriverPackNotifier.exe","UninstallConfirm":"After removing this software you will no longer be informed about problems with HDD, CPU, RAM, etc.\nAre you sure you want to continue?\n","Uninstall":{"cmd":"Uninstall.exe","arguments":"--uninstall"},"DisplayIcon":"Icon.ico","Publisher":"DriverPack Solution"},"notification":{"title":"Yandex Updater Task"},"analytics":{"google":{"session":"prolonged","shared":"UA-68879973-9","primary":"UA-68879973-5"},"yandex":{"enabled":true,"url":"http://notifier.drp.su/","shared":33423178,"primary":33199893},"category":"notifier","identifier":"computerId","experiments":["control","control","control"]},"update":{"hostname":"http://update.drp.su/notifier","filename":"","interval":3600000},"monitoring":{"MonitoringCheckDelay":60000,"Yandex":{"CheckTimeout":5000},"CPU":{"LoadPercentageThreshold":70,"CheckTimeout":300000,"ExtraLoadMaxCount":4},"RAM":{"LoadPercentageThreshold":80,"CheckTimeout":300000,"ExtraLoadMaxCount":4},"Battery":{"PoorConditionThreshold":70}},"metrics":{"serverURL":"http://notifier.drp.su/api/collect"},"logging":false}));
	} catch (err) {}

	exports['default'] = config;
	module.exports = exports['default'];

/***/ },
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	function _interopExportWildcard(obj, defaults) { var newObj = defaults({}, obj); delete newObj['default']; return newObj; }

	function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

	var _cmd = __webpack_require__(136);

	_defaults(exports, _interopExportWildcard(_cmd, _defaults));

	var _fso = __webpack_require__(14);

	_defaults(exports, _interopExportWildcard(_fso, _defaults));

	var _http = __webpack_require__(35);

	_defaults(exports, _interopExportWildcard(_http, _defaults));

	var _localFiles = __webpack_require__(30);

	_defaults(exports, _interopExportWildcard(_localFiles, _defaults));

	var _processes = __webpack_require__(137);

	_defaults(exports, _interopExportWildcard(_processes, _defaults));

	var _registry = __webpack_require__(31);

	_defaults(exports, _interopExportWildcard(_registry, _defaults));

	var _sendImg = __webpack_require__(48);

	_defaults(exports, _interopExportWildcard(_sendImg, _defaults));

	var _shell = __webpack_require__(15);

	_defaults(exports, _interopExportWildcard(_shell, _defaults));

	var _specialFolders = __webpack_require__(16);

	_defaults(exports, _interopExportWildcard(_specialFolders, _defaults));

	var _wmiRegistry = __webpack_require__(49);

	_defaults(exports, _interopExportWildcard(_wmiRegistry, _defaults));

	var _libIterate = __webpack_require__(28);

	exports.iterate = _interopRequire(_libIterate);

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* global ActiveXObject Enumerator */
	'use strict';

	exports.__esModule = true;

	var _drpCoreConfig = __webpack_require__(5);

	var _drpCoreSystem = __webpack_require__(9);

	var _drpCoreOs = __webpack_require__(12);

	var _drpCoreWmi = __webpack_require__(3);

	var _drpCoreLibUtils = __webpack_require__(29);

	var _drpCoreDiagnosticsCheckSoft = __webpack_require__(112);

	// FIXME: bad solution
	var ProgramFilesString = document.location.toString().indexOf('(x86)') !== -1 ? '%PROGRAMFILES(x86)%' : '%PROGRAMFILES%';

	var getUserName = function getUserName() {
	  var colItems = _drpCoreWmi.objWMIService.ExecQuery('SELECT * FROM Win32_ComputerSystem');

	  var _item = new Enumerator(colItems).item();

	  var UserName = _item.UserName;

	  return UserName;
	};

	exports.getUserName = getUserName;
	var getShortUserName = function getShortUserName() {
	  var userName = getUserName();
	  var splitted = userName.split('\\');
	  return splitted[splitted.length - 1];
	};

	exports.getShortUserName = getShortUserName;
	var getUserSID = function getUserSID() {
	  var sid = '';
	  var colItems = _drpCoreWmi.objWMIService.ExecQuery('SELECT * FROM Win32_UserAccount WHERE Name="' + getShortUserName() + '"');

	  _drpCoreSystem.iterate(colItems, function (_ref) {
	    var SID = _ref.SID;
	    return sid = SID;
	  });

	  return sid;
	};

	exports.getUserSID = getUserSID;
	var isOldOS = _drpCoreOs.OSVersion < 6;

	exports.isOldOS = isOldOS;
	var AppExecutable = _drpCoreConfig.application.AppExecutable;

	var UserName = getShortUserName();
	var UserAppData = isOldOS ? _drpCoreSystem.AppData.replace('NetworkService', UserName) : _drpCoreSystem.AppData;
	var UserHK = isOldOS ? 'HKEY_USERS\\' + getUserSID() : 'HKCU';

	exports.UserHK = UserHK;
	var ProgramFiles = _drpCoreSystem.WshShell.ExpandEnvironmentStrings(ProgramFilesString);
	exports.ProgramFiles = ProgramFiles;
	var AppPathRoot = ProgramFiles + '\\' + _drpCoreConfig.application.AppFolder;
	exports.AppPathRoot = AppPathRoot;
	var AppPath = UserAppData + '\\' + _drpCoreConfig.application.AppFolder;
	exports.AppPath = AppPath;
	var AppNotifierFolder = AppPath + '\\bin\\Tools\\notifier';
	exports.AppNotifierFolder = AppNotifierFolder;
	var AppNotifier = AppPath + '\\bin\\Tools\\notifier\\notifier.hta';
	exports.AppNotifier = AppNotifier;
	var WgetPath = _drpCoreSystem.fso.FileExists(AppPath + '\\bin\\Tools\\driverpack-wget.exe') ? AppPath + '\\bin\\Tools\\driverpack-wget.exe' : AppPath + '\\bin\\Tools\\wget.exe';

	exports.WgetPath = WgetPath;
	var objWMIServiceSC = _drpCoreWmi.locator.ConnectServer(null, 'root\\SecurityCenter' + (!isOldOS ? '2' : ''));

	exports.objWMIServiceSC = objWMIServiceSC;
	var isRunFromInstalled = function isRunFromInstalled() {
	  return _drpCoreSystem.WshShell.CurrentDirectory.indexOf(AppPathRoot) !== -1;
	};

	exports.isRunFromInstalled = isRunFromInstalled;
	var isRunFromProgramFiles = function isRunFromProgramFiles() {
	  return _drpCoreSystem.WshShell.CurrentDirectory.indexOf(ProgramFiles) !== -1;
	};

	exports.isRunFromProgramFiles = isRunFromProgramFiles;
	var getTimeFromDate = function getTimeFromDate(d) {
	  return (d.getHours() < 10 ? '0' : '') + d.getHours() + ':' + (d.getMinutes() < 10 ? '0' : '') + d.getMinutes() + ':' + (d.getSeconds() < 10 ? '0' : '') + d.getSeconds();
	};

	exports.getTimeFromDate = getTimeFromDate;
	var writeFile = function writeFile(bytes, target) {
	  try {
	    var fso = new ActiveXObject('Scripting.FileSystemObject');
	    if (fso.FileExists(target)) {
	      fso.DeleteFile(target);
	    }
	    var stream = new ActiveXObject('ADODB.Stream');
	    stream.Type = 1;
	    stream.Open();
	    stream.Write(bytes);
	    stream.SaveToFile(target, 2);
	  } catch (err) {}
	};

	exports.writeFile = writeFile;
	var formatTime = function formatTime(time) {
	  var d = new Date();
	  var timeZoneOffset = -d.getTimezoneOffset();
	  return '********' + time.replace(/:/g, '') + '.000000' + (timeZoneOffset < 0 ? timeZoneOffset : '+' + timeZoneOffset);
	};

	exports.formatTime = formatTime;
	var removeAppFolder = function removeAppFolder() {
	  _drpCoreSystem.WshShell.Run('cmd /c rd /S /Q "' + AppPathRoot + '"', 0, false);
	};

	exports.removeAppFolder = removeAppFolder;
	var copyAppFiles = function copyAppFiles() {
	  if (!isRunFromInstalled()) {
	    // remove old folder
	    _drpCoreSystem.WshShell.Run('cmd /c rd /S /Q "' + AppPathRoot + '"', 0, true);
	    _drpCoreSystem.fso.CreateFolder(AppPathRoot);
	    var copyFrom = _drpCoreSystem.WshShell.CurrentDirectory.replace(/notifier\\bin[\s\S]*/, '');
	    copyFrom += 'notifier';
	    _drpCoreSystem.WshShell.Run('xcopy "' + copyFrom + '" "' + AppPathRoot + '\\" /S /E /Y /I', 0, false);
	  }
	};

	exports.copyAppFiles = copyAppFiles;
	var copyFiles = function copyFiles(source, dest, wait) {
	  _drpCoreSystem.WshShell.Run('xcopy "' + source + '" "' + dest + '\\" /S /E /Y /I', 0, wait);
	};

	exports.copyFiles = copyFiles;
	var sendRequest = function sendRequest(url, callback) {
	  var req = _drpCoreSystem.getXMLHttp();
	  if (req) {
	    req.open('GET', url, true);
	    req.onreadystatechange = function () {
	      if (req.readyState === 4) {
	        if (req.status === 200) {
	          callback(req.responseText);
	        }
	      }
	    };
	    req.send();
	  }
	};

	exports.sendRequest = sendRequest;
	var fixUninstallRegistryKey = function fixUninstallRegistryKey() {
	  try {
	    _drpCoreSystem.WshShell.RegRead('HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\');
	  } catch (e) {
	    _drpCoreSystem.WshShell.RegWrite('HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\', '');
	  }
	};

	exports.fixUninstallRegistryKey = fixUninstallRegistryKey;
	var addScript = function addScript(url) {
	  var updateScriptId = 'updateScript_' + +new Date();
	  var scriptLoading = document.createElement('script');
	  scriptLoading.id = updateScriptId;
	  scriptLoading.type = 'text/javascript';
	  scriptLoading.async = false;
	  scriptLoading.charset = 'utf-8';
	  scriptLoading.src = url + '?t=' + +new Date();
	  document.body.appendChild(scriptLoading);
	  setTimeout(function () {
	    try {
	      document.body.removeChild(document.getElementById(updateScriptId));
	    } catch (e) {}
	  }, window.abortRemoteScriptInterval);
	};

	exports.addScript = addScript;
	var ParseArgs = function ParseArgs(args) {
	  var key = null;
	  var res = { _: [] };
	  args.forEach(function (arg) {
	    var m = arg.match(/^--(.+)/);
	    if (m) {
	      key = m[1];
	      res[key] = true;
	    } else {
	      if (key) {
	        res[key] = arg;
	        key = null;
	      } else {
	        res._.push(arg);
	      }
	    }
	  });
	  return res;
	};

	exports.ParseArgs = ParseArgs;
	var timeout = function timeout(delay) {
	  return new Promise(function (resolve) {
	    setTimeout(resolve, delay);
	  });
	};

	exports.timeout = timeout;
	var goToUrl = function goToUrl(url) {
	  try {
	    var HKCU = 'HKCU\\SOFTWARE\\Clients\\StartMenuInternet\\';
	    var HKLM = 'HKLM\\SOFTWARE\\Clients\\StartMenuInternet\\';
	    var defBrowser = _drpCoreSystem.RegRead(HKCU) || _drpCoreSystem.RegRead(HKLM);
	    var cmd = _drpCoreSystem.RegRead(HKLM + defBrowser + '\\shell\\open\\command\\');
	    if (cmd) {
	      cmd = cmd.replace(/"/ig, '');
	      _drpCoreSystem.WshShell.Run('"' + cmd + '" "' + url + '"', 1, false);
	    } else {
	      window.open(url);
	    }
	  } catch (e) {
	    _drpCoreSystem.WshShell.Run('rundll32 url.dll,FileProtocolHandler ' + url, 1, false);
	  }
	  return false;
	};

	exports.goToUrl = goToUrl;
	var updateApplicationFiles = function updateApplicationFiles() {
	  var newApp = AppPath + '\\' + AppExecutable;
	  // TODO: check application versions and download latest version
	  if (!_drpCoreSystem.fso.FileExists(newApp)) {
	    copyFiles(AppPathRoot, AppPath, true);
	  }
	};

	exports.updateApplicationFiles = updateApplicationFiles;
	var runFromNewPlace = function runFromNewPlace(runFrom) {
	  updateApplicationFiles();
	  var newApp = AppPath + '\\' + AppExecutable;
	  var runKeys = '--relaunch true';
	  runKeys += runFrom ? ' --run ' + runFrom : '';
	  _drpCoreSystem.WshShell.Run('"' + newApp + '" ' + runKeys, 1, true);
	};

	exports.runFromNewPlace = runFromNewPlace;
	var startCommand = function startCommand(command) {
	  var wrappedCommand = _drpCoreLibUtils.wrapInCmd(command);
	  _drpCoreSystem.WshShell.Run(wrappedCommand, 0, false);
	};

	exports.startCommand = startCommand;
	var openYandexWithQuery = function openYandexWithQuery(query) {
	  var clid = arguments.length <= 1 || arguments[1] === undefined ? '2100765' : arguments[1];
	  var chromePreferred = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

	  query = encodeURIComponent(query);
	  var url = 'http://yandex.ru/search/?clid=' + clid + '&text=' + query;
	  var chromeIsInstalled = _drpCoreSystem.RegExists('HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Google Chrome\\DisplayName');
	  var yaBrowserIsInstalled = _drpCoreSystem.RegExists('HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\YandexBrowser\\DisplayName');
	  var yaBrowserIsOur = _drpCoreDiagnosticsCheckSoft.getPartnerInfo({ Program: 'Yandex' }).isPartner;

	  var command = undefined;
	  if (yaBrowserIsInstalled && yaBrowserIsOur) {
	    command = 'start browser "' + url + '"';
	  } else if (chromePreferred && chromeIsInstalled) {
	    command = 'start chrome "' + url + '"';
	  }
	  command ? startCommand(command) : goToUrl(url);
	};
	exports.openYandexWithQuery = openYandexWithQuery;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _systemFso = __webpack_require__(14);

	var _systemSpecialFolders = __webpack_require__(16);

	var _systemLocalFiles = __webpack_require__(30);

	var _config = __webpack_require__(5);

	var toFixed = function toFixed(num) {
	  return ('0' + num).slice(-2);
	};

	var htmlHeader = '<html>\n<head>\n  <meta charset=\'windows-1251\'/>\n  <script type=\'text/javascript\' src=\'http://static.drp.su/update/logs/script.js\'></script>\n  <link rel=\'stylesheet\' type=\'text/css\' href=\'http://static.drp.su/update/logs/style.css\'/>\n</head>\n<body>\n';

	var htmlFooter = '\n</body>\n</html>\n';

	var logs = {
	  logging: _config.logging,
	  logFolder: _systemSpecialFolders.AppFolder + '\\Logs\\',
	  logfile: null,
	  htmlHeader: htmlHeader,
	  htmlFooter: htmlFooter,

	  fileNameEnding: function fileNameEnding() {
	    var today = new Date();
	    return '_' + [today.getFullYear(), toFixed(today.getMonth() + 1), toFixed(today.getDate()), toFixed(today.getHours()), toFixed(today.getMinutes()), toFixed(today.getSeconds())].join('-');
	  },

	  init: function init() {
	    try {
	      _systemLocalFiles.ensurePath(logs.logFolder);
	      var filename = logs.logFolder + 'log__' + logs.fileNameEnding() + '.html';
	      logs.logfile = _systemFso.fso.CreateTextFile(filename, true);
	      logs.logfile.WriteLine(logs.htmlHeader);
	    } catch (e) {
	      logs.logfile = null;
	      logs.logging = false;
	    }
	  },

	  onunload: function onunload() {
	    if (logs.logfile) {
	      logs.logfile.WriteLine(logs.htmlFooter);
	      logs.logfile.Close();
	    }
	  },

	  log: function log() {
	    if (logs.logfile === null && logs.logging) logs.init();
	    if (!logs.logfile) return;

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var str = args.map(function (part, ind) {
	      if (typeof part === 'object') {
	        if (part instanceof Error) {
	          part = {
	            name: part.name || 'Error',
	            message: part.message
	          };
	        }
	        try {
	          return '<pre class="code">' + JSON.stringify(part, null, '\t') + '</pre>';
	        } catch (err) {
	          return '';
	        }
	      } else {
	        return (ind === 0 ? '' : ', ') + String(part);
	      }
	    }).join('').replace(/[^\x00-\x7F]/g, '\x1a');

	    var className = str.indexOf('!!! ERROR !!!') !== -1 ? 'error' : 'info';

	    var today = new Date();
	    var time = [toFixed(today.getHours()), toFixed(today.getMinutes()), toFixed(today.getSeconds())].join(':');
	    var timestamp = '<span class="timeStamp">' + time + '</span>';
	    var res = '<div class="logs ' + className + '">' + timestamp + (str || '') + '</div>';

	    try {
	      logs.logfile.WriteLine(res);
	    } catch (e) {}
	  }
	};

	exports['default'] = logs;
	module.exports = exports['default'];

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _libWshShell = __webpack_require__(47);

	var _libWshShell2 = _interopRequireDefault(_libWshShell);

	var _wmi = __webpack_require__(3);

	var is64 = _libWshShell2['default'].ExpandEnvironmentStrings('%PROCESSOR_ARCHITECTURE%') === 'AMD64' || _libWshShell2['default'].ExpandEnvironmentStrings('%PROCESSOR_ARCHITEW6432%') !== '%PROCESSOR_ARCHITEW6432%';

	exports.is64 = is64;
	var arch = is64 ? '64' : '86';

	exports.arch = arch;

	var _getWMIObjects = _wmi.getWMIObjects(['Version', 'CSDVersion', 'Caption', 'OSArchitecture'], 'Win32_OperatingSystem');

	var _getWMIObjects$0 = _getWMIObjects[0];
	var Version = _getWMIObjects$0.Version;
	var CSDVersion = _getWMIObjects$0.CSDVersion;
	var Caption = _getWMIObjects$0.Caption;
	var OSVersionS = Version.replace(/.\d\d.*/, '');
	exports.OSVersionS = OSVersionS;
	var OSVersion = parseFloat(OSVersionS) || 5;
	exports.OSVersion = OSVersion;
	var OSCSDVersion = CSDVersion || '';
	exports.OSCSDVersion = OSCSDVersion;
	var OSArchitecture = OSArchitecture || '';

	exports.OSArchitecture = OSArchitecture;
	var versions = {
	  '5.0': '2000',
	  '5.1': 'XP',
	  '5.2': 'Server 2003',
	  '6.0': 'Vista',
	  '6.1': '7',
	  '6.2': '8',
	  '6.3': '8.1',
	  '6.4': '9',
	  '10.0': '10'
	};

	var OSName = versions[OSVersionS] || OSVersionS;

	exports.OSName = OSName;
	var m = CSDVersion && /^Service Pack (\d+)$/i.exec(CSDVersion);
	var OSVersionSP = m ? parseInt(m[1], 10) : 0;

	exports.OSVersionSP = OSVersionSP;
	var OSCaption = Caption.replace(/Microsoft /i, '');
	exports.OSCaption = OSCaption;

/***/ },
/* 13 */,
/* 14 */
/***/ function(module, exports) {

	/* global ActiveXObject */

	'use strict';

	exports.__esModule = true;
	var fso = new ActiveXObject('Scripting.FileSystemObject');
	exports.fso = fso;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* global ActiveXObject */

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _libWshShell = __webpack_require__(47);

	var _libWshShell2 = _interopRequireDefault(_libWshShell);

	var objShell = new ActiveXObject('Shell.Application');
	exports.objShell = objShell;
	exports.WshShell = _libWshShell2['default'];

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _shell = __webpack_require__(15);

	var _config = __webpack_require__(5);

	var _os = __webpack_require__(12);

	var AppData = _shell.WshShell.SpecialFolders('AppData');
	exports.AppData = AppData;
	var localAppData = _shell.objShell.NameSpace(0x1c).Self.Path;
	exports.localAppData = localAppData;
	var AppFolder = AppData + '\\' + _config.application.AppFolder;
	exports.AppFolder = AppFolder;
	var ProgramFiles = _os.is64 ? _shell.WshShell.ExpandEnvironmentStrings('%PROGRAMFILES(x86)%') : _shell.WshShell.ExpandEnvironmentStrings('%PROGRAMFILES%');
	exports.ProgramFiles = ProgramFiles;

/***/ },
/* 17 */,
/* 18 */,
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _events = __webpack_require__(138);

	var _drpCoreConfig = __webpack_require__(5);

	var _drpCorePs = __webpack_require__(115);

	var _drpCorePs2 = _interopRequireDefault(_drpCorePs);

	var _drpCoreSystem = __webpack_require__(9);

	var _drpCoreWmi = __webpack_require__(3);

	var _utils = __webpack_require__(10);

	var notificationsReg = 'HKCU\\SOFTWARE\\DriverPack Notifier\\notifications';
	var storeRoot = _drpCoreSystem.ensurePath(_utils.AppPath + '\\data');

	var Notification = (function (_EventEmitter) {
	  _inherits(Notification, _EventEmitter);

	  function Notification(type) {
	    var args = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    _classCallCheck(this, Notification);

	    _EventEmitter.call(this);
	    // TODO: move notificationId elsewhere
	    this.sendTo = 'message-request';
	    this.listenTo = 'message-response';
	    this.args = Object.assign({ type: type }, args);
	    this.timestamp = Date.now();
	    this.loadConfig(type);
	    this.store = storeRoot + '\\' + type + '.json';
	    this.load();
	  }

	  Notification.prototype.loadConfig = function loadConfig(type) {
	    var data = __webpack_require__(142)("./" + type);
	    if (typeof data === 'function') {
	      data = data(this.args);
	    }
	    this.config = Object.assign({
	      windowTitle: _drpCoreConfig.notification.title
	    }, data);
	  };

	  Notification.prototype.load = function load() {
	    if (_drpCoreSystem.fso.FileExists(this.store)) {
	      var file = _drpCoreSystem.fso.OpenTextFile(this.store, 1, false);
	      var json = file.ReadAll();
	      file.Close();
	      this.data = JSON.parse(json);
	    } else if (this.config.notificationId) {
	      var reg = notificationsReg + '\\' + this.config.notificationId;
	      this.data = {
	        counter: +_drpCoreSystem.RegRead(reg + '\\counter'),
	        unsubscribed: !!_drpCoreSystem.RegRead(reg + '\\unsubscribed')
	      };
	    } else {
	      this.data = {};
	    }
	  };

	  Notification.prototype.save = function save() {
	    var file = _drpCoreSystem.fso.OpenTextFile(this.store, 2, true);
	    file.write(JSON.stringify(this.data));
	    file.Close();
	    return this;
	  };

	  Notification.prototype.get = function get(key, defaultValue) {
	    return this.data[key] || defaultValue;
	  };

	  Notification.prototype.set = function set(key, value) {
	    this.data[key] = value;
	    return this;
	  };

	  Notification.prototype.inc = function inc(key) {
	    return this.set(key, this.get(key, 0) + 1);
	  };

	  Notification.prototype.send = function send(message) {
	    var queue = this.get(this.sendTo, []);
	    var timestamp = Date.now();
	    queue.push({ message: message, timestamp: timestamp });
	    return this.set(this.sendTo, queue).save();
	  };

	  Notification.prototype.parseMessageQueue = function parseMessageQueue() {
	    var _this = this;

	    var queue = this.get(this.listenTo, []);
	    queue.forEach(function (_ref) {
	      var message = _ref.message;
	      var timestamp = _ref.timestamp;

	      if (timestamp > _this.timestamp) {
	        _this.timestamp = timestamp;
	        _this.emit('message', message);
	      }
	    });
	  };

	  Notification.prototype.flushMessageQueue = function flushMessageQueue() {
	    return this.set(this.listenTo, []);
	  };

	  Notification.prototype.isActive = function isActive() {
	    var counter = this.get('counter', 0);
	    var unsubscribed = this.get('unsubscribed', false);
	    var maxCount = this.config.maxCountOfDisplaying || Infinity;
	    return counter < maxCount && !unsubscribed;
	  };

	  Notification.prototype.show = function show() {
	    var _this2 = this;

	    var queue = Promise.resolve(window.NotificationQueue);
	    var promise = queue.then(function () {
	      return _this2.showImmediately();
	    });
	    window.NotificationQueue = promise['catch'](function () {});
	    return promise;
	  };

	  Notification.prototype.showImmediately = function showImmediately() {
	    var cmdArgs;
	    return regeneratorRuntime.async(function showImmediately$(context$2$0) {
	      var _this3 = this;

	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          if (!this.isActive()) {
	            context$2$0.next = 16;
	            break;
	          }

	          this.inc('counter').set('status', 'pending').save();
	          cmdArgs = Object.entries(this.args).map(function (_ref2) {
	            var key = _ref2[0];
	            var val = _ref2[1];

	            return '--' + key.replace(/\s/g, '-') + ' "' + val + '"';
	          }).join(' ');

	          this.exec(cmdArgs);
	          if (!this.config.focusWindow) {
	            this.on('message', function (message) {
	              if (message === 'initialized') {
	                var uFlags = '0x0013'; // SWP_NOSIZE | SWP_NOMOVE | SWP_NOACTIVATE
	                _drpCorePs2['default'].send(['$notificationHwnd = [Win32.NativeMethods]::FindWindowEx(0, 0, "HTML Application Host Window Class", "' + _this3.config.windowTitle + '")']);
	                if (_this3.config.background) {
	                  var ws = '0x00000080L'; // WS_EX_TOOLWINDOW
	                  _drpCorePs2['default'].send(['[Win32.NativeMethods]::SetWindowPos($notificationHwnd, 1, 0, 0, 0, 0, ' + uFlags + ')', '[Win32.NativeMethods]::SetWindowLong($notificationHwnd, -20, ' + ws + ')']);
	                } else {
	                  _drpCorePs2['default'].send(['[Win32.NativeMethods]::SetWindowPos($notificationHwnd, -2, 0, 0, 0, 0, ' + uFlags + ')', '[Win32.NativeMethods]::SetWindowPos($notificationHwnd, -1, 0, 0, 0, 0, ' + uFlags + ')']);
	                }
	              }
	            });
	          }

	        case 5:
	          if (!(this.get('status') === 'pending')) {
	            context$2$0.next = 12;
	            break;
	          }

	          context$2$0.next = 8;
	          return regeneratorRuntime.awrap(_utils.timeout(300));

	        case 8:
	          this.load();
	          this.parseMessageQueue();
	          context$2$0.next = 5;
	          break;

	        case 12:
	          this.flushMessageQueue().save();
	          return context$2$0.abrupt('return', this.get('status'));

	        case 16:
	          return context$2$0.abrupt('return', 'skip');

	        case 17:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Notification.prototype.exec = function exec(cmdArgs) {
	    var SystemRoot = _drpCoreSystem.WshShell.ExpandEnvironmentStrings('%SystemRoot%');
	    var command = SystemRoot + '\\System32\\mshta.exe "' + _utils.AppNotifier + '" ' + cmdArgs;
	    if (_utils.isOldOS && window.runFrom === 'scheduler' || this.config.focusWindow) {
	      _drpCoreSystem.WshShell.Run(command, 1, false);
	    } else {
	      var intProcessID = undefined;
	      var objStartup = _drpCoreWmi.objWMIService.Get('Win32_ProcessStartup');
	      var objConfig = objStartup.SpawnInstance_();
	      objConfig.ShowWindow = 8; /* SW_SHOWNA */
	      var objProcess = _drpCoreWmi.objWMIService.Get('Win32_Process');
	      objProcess.Create(command, null, objConfig, intProcessID);
	    }
	  };

	  return Notification;
	})(_events.EventEmitter);

	exports['default'] = Notification;
	module.exports = exports['default'];

/***/ },
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _libStatistics = __webpack_require__(134);

	var _libStatistics2 = _interopRequireDefault(_libStatistics);

	var _config = __webpack_require__(5);

	exports['default'] = new _libStatistics2['default'](_config.analytics, _config.application.DisplayVersion, window.lang);
	module.exports = exports['default'];

/***/ },
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */
/***/ function(module, exports) {

	/* global Enumerator */

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (collection, iterator) {
	  var colItems = new Enumerator(collection);
	  for (colItems.moveFirst(); !colItems.atEnd(); colItems.moveNext()) {
	    iterator(colItems.item());
	  }
	};

	module.exports = exports["default"];

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _system = __webpack_require__(9);

	var _systemShell = __webpack_require__(15);

	var _systemRegistry = __webpack_require__(31);

	var _os = __webpack_require__(12);

	var _logs = __webpack_require__(11);

	var ParseSFXName = function ParseSFXName(sfxName) {
	  sfxName = sfxName.replace(/(\s*(\(|\[)\d+(\)|\]))?.exe$/i, '');
	  return sfxName.split('_').slice(1);
	};

	exports.ParseSFXName = ParseSFXName;
	var ParseCMDString = function ParseCMDString() {
	  var cmd = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

	  var args = [];
	  var current = '';
	  var quoted = '';
	  var quoteType = null;

	  var addcurrent = function addcurrent() {
	    if (current) args.push(current.trim());
	    current = '';
	  };

	  // remove escaped newlines
	  cmd = cmd.replace(/\\\n/g, '');

	  Array.from(cmd).forEach(function (c) {
	    if (quoteType) {
	      // only end this arg if the end quote
	      // is the same type as start quote and not escaped
	      if (quoteType === c && quoted.slice(-1) !== '\\') {
	        args.push(quoted);
	        quoted = '';
	        quoteType = null;
	      } else {
	        quoted += c;
	      }
	    } else if (c === ' ') {
	      addcurrent();
	    } else if (current) {
	      current += c;
	    } else if (c === '\'' || c === '"') {
	      quoteType = c;
	    } else {
	      current = c;
	    }
	  });

	  addcurrent();

	  return args;
	};

	exports.ParseCMDString = ParseCMDString;
	var cleanFolder = function cleanFolder(path) {
	  var sync = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	  var correctedPath = /\\$/.test(path) ? path : path + '\\';
	  _systemShell.WshShell.Run('cmd /C del /F /S /Q "' + correctedPath + '" && FOR /D %p IN ("' + correctedPath + '*") DO rmdir "%p" /s /q', 0, sync);
	};

	exports.cleanFolder = cleanFolder;
	var wrapInCmd = function wrapInCmd(command) {
	  return 'cmd /c "' + command + '"';
	};

	exports.wrapInCmd = wrapInCmd;
	var generateJobId = function generateJobId() {
	  return +Math.round(1e5 * Math.random());
	};

	exports.generateJobId = generateJobId;
	// TODO: Test! (Taken from the legacy code)
	var inc = function inc(filename) {
	  var head = document.getElementsByTagName('head').item(0);
	  var script = undefined;

	  if (_system.fso.GetFileName(filename).split('.')[1].toLowerCase() === 'css') {
	    script = document.createElement('link');
	    script.setAttribute('rel', 'stylesheet');
	    script.setAttribute('type', 'text/css');
	    script.setAttribute('href', filename);
	  } else {
	    script = document.createElement('script');
	    script.src = filename;
	    script.type = 'text/javascript';
	  }

	  if (typeof script !== 'undefined') {
	    head.appendChild(script);
	  }
	};

	exports.inc = inc;
	// TODO: Test! (Taken from the legacy code)
	var winRun = function winRun(src, hideMode, wait, bit64) {
	  if (!src) {
	    return false;
	  }

	  hideMode = !!hideMode;
	  wait = !!wait;

	  if (bit64 && _os.is64) {
	    hideMode = true;
	    wait = false;
	    src = '"%windir%\\sysnative\\cmd.exe" /C ' + src;
	  }

	  return _systemShell.WshShell.Run(src, hideMode ? 0 : 1, wait);
	};

	exports.winRun = winRun;
	// TODO: Test! (Taken from the legacy code)
	var goToUrl = function goToUrl(url) {
	  _logs.log('Opening ' + url);
	  try {
	    var defBrowser = _systemRegistry.RegRead('HKCU\\SOFTWARE\\Clients\\StartMenuInternet\\');
	    if (!defBrowser) {
	      defBrowser = _systemRegistry.RegRead('HKLM\\SOFTWARE\\Clients\\StartMenuInternet\\');
	    }
	    var runComm = _systemRegistry.RegRead('HKLM\\SOFTWARE\\Clients\\StartMenuInternet\\' + defBrowser + '\\shell\\open\\command\\');
	    runComm = runComm.replace(/"/ig, '');
	    if (runComm) {
	      _systemShell.WshShell.Run('"' + runComm + '" "' + url + '"', 1, false);
	    } else {
	      window.open(url);
	    }
	  } catch (e) {
	    _logs.log('Failed to open ' + url);
	    _systemShell.WshShell.Run('rundll32 url.dll,FileProtocolHandler ' + url, 1, false);
	  }
	  return false;
	};

	exports.goToUrl = goToUrl;
	var getInternetExplorerVersion = function getInternetExplorerVersion() {
	  var rv = undefined;
	  var ua = undefined;
	  var re = undefined;

	  // IE 10
	  try {
	    rv = parseInt(_systemRegistry.RegRead('HKLM\\SOFTWARE\\Microsoft\\Internet Explorer\\svcVersion').split('.')[0], 10);
	  } catch (e) {}

	  if (typeof rv !== 'number') {
	    try {
	      rv = parseInt(_systemRegistry.RegRead('HKLM\\SOFTWARE\\Microsoft\\Internet Explorer\\Version').split('.')[0], 10);
	    } catch (e) {}
	  }

	  if (typeof rv !== 'number') {
	    if (navigator.appName === 'Microsoft Internet Explorer') {
	      ua = navigator.userAgent;
	      re = new RegExp('MSIE ([0-9]{1,}[.0-9]{0,})');
	      if (re.exec(ua) != null) {
	        rv = parseFloat(RegExp.$1);
	      }
	    } else if (navigator.appName === 'Netscape') {
	      ua = navigator.userAgent;
	      re = new RegExp('Trident/.*rv:([0-9]{1,}[.0-9]{0,})');
	      if (re.exec(ua) != null) {
	        rv = parseFloat(RegExp.$1);
	      }
	    }
	  }

	  if (typeof rv !== 'number') {
	    rv = -1;
	  }

	  return rv;
	};
	exports.getInternetExplorerVersion = getInternetExplorerVersion;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _fso = __webpack_require__(14);

	var createFile = function createFile(path, fileName, fileContent) {
	  ensurePath(path);
	  var FSfile = _fso.fso.OpenTextFile(path + fileName, 2, true, -1);
	  FSfile.WriteLine(fileContent);
	  FSfile.Close();
	};

	exports.createFile = createFile;
	var deleteFile = function deleteFile(fullPath) {
	  if (_fso.fso.FileExists(fullPath) === true) {
	    _fso.fso.DeleteFile(fullPath);
	  }
	};

	exports.deleteFile = deleteFile;
	var queryFile = function queryFile(fullPath, overdueInterval) {
	  if (_fso.fso.FileExists(fullPath) && _fso.fso.GetFile(fullPath).Size > 0) {
	    if (overdueInterval && isFileOverdue(fullPath, overdueInterval)) {
	      throw new Error('File is overdue');
	    } else {
	      var file = _fso.fso.OpenTextFile(fullPath, 1, true, -1);
	      var data = file.ReadAll();
	      file.Close();
	      return data;
	    }
	  } else {
	    throw new Error('File is not found');
	  }
	};

	exports.queryFile = queryFile;
	var isFileOverdue = function isFileOverdue(fullPath, overdueInterval) {
	  if (_fso.fso.FileExists(fullPath) === true) {
	    var now = new Date();
	    if (now.getTime() - _fso.fso.GetFile(fullPath).DateLastModified > overdueInterval) {
	      return true;
	    } else {
	      return false;
	    }
	  } else {
	    return true;
	  }
	};

	exports.isFileOverdue = isFileOverdue;
	var ensurePath = function ensurePath(path) {
	  var parts = path.split('\\');
	  var stack = [];
	  while (parts.length > 0) {
	    var current = parts.join('\\');
	    if (!parts.pop()) continue;
	    if (_fso.fso.FolderExists(current)) {
	      break;
	    } else {
	      stack.push(current);
	    }
	  }
	  while (stack.length > 0) {
	    var current = stack.pop();
	    try {
	      _fso.fso.CreateFolder(current);
	    } catch (err) {
	      if (!_fso.fso.FolderExists(current)) throw err;
	    }
	  }
	  return path;
	};
	exports.ensurePath = ensurePath;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _shell = __webpack_require__(15);

	var _wmi = __webpack_require__(3);

	var REG_CORS = 'HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\Zones\\1\\1406';

	exports.REG_CORS = REG_CORS;
	var RegExists = function RegExists(path) {
	  try {
	    _shell.WshShell.RegRead(path);
	    return true;
	  } catch (err) {
	    return false;
	  }
	};

	exports.RegExists = RegExists;
	var RegRead = function RegRead(path) {
	  try {
	    return _shell.WshShell.RegRead(path);
	  } catch (err) {}
	};

	exports.RegRead = RegRead;
	var RegWrite = function RegWrite(path, value) {
	  var type = arguments.length <= 2 || arguments[2] === undefined ? 'REG_SZ' : arguments[2];

	  try {
	    return _shell.WshShell.RegWrite(path, value, type);
	  } catch (err) {}
	};

	exports.RegWrite = RegWrite;
	var RegDelete = function RegDelete(path) {
	  try {
	    return _shell.WshShell.RegDelete(path);
	  } catch (err) {}
	};

	exports.RegDelete = RegDelete;
	// TODO: Test! (Taken from the legacy code)
	var RegReadSmart = function RegReadSmart(path) {
	  var result = undefined;

	  path = path.replace('HKEY_LOCAL_MACHINE\\', 'HKLM\\').replace('HKEY_CURRENT_USER\\', 'HKCU\\');

	  result = RegRead32(path);

	  if (!result && path.indexOf('\\SOFTWARE\\Microsoft\\') !== -1) {
	    var tmpPath = path.replace('\\SOFTWARE\\Microsoft\\', '\\SOFTWARE\\Wow6432Node\\Microsoft\\');
	    result = RegRead32(tmpPath);
	  }

	  if (!result) {
	    result = RegRead64(path);
	  }

	  return result;
	};

	exports.RegReadSmart = RegReadSmart;
	var RegRead32 = function RegRead32(path) {
	  var result = undefined;
	  try {
	    result = _shell.WshShell.RegRead(path);
	  } catch (err) {
	    result = '';
	  }
	  return result;
	};

	exports.RegRead32 = RegRead32;
	/* global ActiveXObject */
	var RegRead64 = function RegRead64(path) {
	  var HKEY_LOCAL_MACHINE = 0x80000002;
	  var HKEY_CURRENT_USER = 0x80000001;
	  var context = new ActiveXObject('WbemScripting.SWbemNamedValueSet');

	  context.Add('__ProviderArchitecture', 64);
	  context.Add('__RequiredArchitecture', true);
	  var wbem = _wmi.locator.ConnectServer(null, 'root\\default', null, null, null, null, null, context);
	  var StdRegProv = wbem.Get('StdRegProv');
	  var method = StdRegProv.Methods_.Item('GetStringValue');
	  var inParameters = method.InParameters.SpawnInstance_();

	  if (path.indexOf('HKLM\\') === 0) {
	    inParameters.hDefKey = HKEY_LOCAL_MACHINE;
	  } else if (path.indexOf('HKCU\\') === 0) {
	    inParameters.hDefKey = HKEY_CURRENT_USER;
	  }

	  inParameters.sSubKeyName = path.substring(5);
	  inParameters.sValueName = '';
	  var outParameters = StdRegProv.ExecMethod_('GetStringValue', inParameters, 0, context);

	  return outParameters.sValue;
	};
	exports.RegRead64 = RegRead64;

/***/ },
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _registry = __webpack_require__(31);

	var _superagentLibClient = __webpack_require__(140);

	var _superagentLibClient2 = _interopRequireDefault(_superagentLibClient);

	var getXMLHttp = _superagentLibClient2['default'].getXHR;

	exports.getXMLHttp = getXMLHttp;
	var httprequest = function httprequest(send) {
	  var originalCORS = Number(_registry.RegRead(_registry.REG_CORS));
	  _registry.RegWrite(_registry.REG_CORS, 0, 'REG_DWORD');

	  var promise = new Promise(function (resolve, reject) {
	    send().then(resolve, function (err) {
	      err.type = 'HttpError';
	      reject(err);
	    });
	  });

	  if (originalCORS !== 0) {
	    _registry.RegWrite(_registry.REG_CORS, originalCORS, 'REG_DWORD');
	  }

	  return promise;
	};

	var httpget = function httpget(url) {
	  return httprequest(function () {
	    return _superagentLibClient2['default'].get(url).set('Connection', 'close');
	  });
	};

	exports.httpget = httpget;
	var httppost = function httppost(url, data, statistics) {
	  return httprequest(function () {
	    var req = _superagentLibClient2['default'].post(url).set('Connection', 'close');
	    if (statistics) {
	      var clientId = statistics.clientId;
	      var computerId = statistics.computerId;
	      var sessionId = statistics.sessionId;
	      var options = statistics.options;
	      var drpVersion = statistics.drpVersion;
	      var experiment = statistics.experiment;
	      var lang = statistics.lang;

	      req.set({
	        'x-drp-client-id': clientId,
	        'x-drp-computer-id': computerId,
	        'x-drp-session-id': sessionId,
	        'x-drp-application': options.category,
	        'x-drp-version': drpVersion,
	        'x-drp-experiment': experiment,
	        'x-drp-lang': lang
	      });
	    }
	    return req.send(data);
	  });
	};

	exports.httppost = httppost;
	var httphead = function httphead(url) {
	  return httprequest(function () {
	    return _superagentLibClient2['default'].head(url).set('Connection', 'close');
	  });
	};
	exports.httphead = httphead;

/***/ },
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _systemHttp = __webpack_require__(35);

	var _systemSendImg = __webpack_require__(48);

	var _logs = __webpack_require__(11);

	var _os = __webpack_require__(12);

	var GoogleAnalytics = (function () {
	  GoogleAnalytics.sendUrl = function sendUrl(url) {
	    return _systemSendImg.sendImg(url)['catch'](function () {
	      return _systemHttp.httpget(url);
	    });
	  };

	  _createClass(GoogleAnalytics, null, [{
	    key: 'endpoint',
	    value: 'http://www.google-analytics.com/collect',
	    enumerable: true
	  }]);

	  function GoogleAnalytics(parent) {
	    _classCallCheck(this, GoogleAnalytics);

	    this.session = {};

	    this.parent = parent;
	    this.options = this.parent.options;
	  }

	  GoogleAnalytics.prototype.init = function init(_ref) {
	    var shared = _ref.shared;
	    var primary = _ref.primary;
	    var session = _ref.session;

	    this.counters = { shared: shared, primary: primary };
	    this.session[primary] = session;
	    this.session[shared] = 'prolonged';
	  };

	  GoogleAnalytics.prototype.getCID = function getCID() {
	    if (this.options.identifier === 'computerId') {
	      return this.parent.computerId;
	    } else {
	      return this.parent.clientId;
	    }
	  };

	  GoogleAnalytics.prototype.send = function send(event) {
	    var dimensions = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
	    var important = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
	    var _counters = this.counters;
	    var shared = _counters.shared;
	    var primary = _counters.primary;

	    return Promise.all([important ? this._sendHit(shared, this.parent.clientId, event, dimensions) : false, this._sendHit(primary, this.getCID(), event, dimensions)]);
	  };

	  GoogleAnalytics.prototype._sendHit = function _sendHit(counter, cid, event, dimensions) {
	    if (!counter) return;
	    dimensions = (dimensions || []).concat([[this.parent.config.userIdDimension, cid], [this.parent.config.drpVersionDimension, this.parent.drpVersion.trim()], [this.parent.config.osDimension, _os.OSName + ' x' + _os.arch], [this.parent.config.spDimension, 'SP ' + _os.OSVersionSP], [this.parent.config.captionDimension, _os.OSCaption], [this.parent.config.experimentDimension, this.parent.experiment]]);
	    var url = this._compileUrl(counter, cid, event, dimensions);
	    _logs.log('[Statistics] [GoogleAnalytics] Send event ' + counter + ' GA: ' + event.action, event, dimensions, [url]);
	    return GoogleAnalytics.sendUrl(url);
	  };

	  GoogleAnalytics.prototype._compileUrl = function _compileUrl(tid, cid, event, dimensions) {
	    var params = {
	      // Protocol Version:
	      v: 1,
	      // Tracking ID / Web Property ID:
	      tid: tid,
	      // Client ID:
	      cid: cid,
	      // Hit type:
	      t: 'event',
	      // Event Category:
	      ec: event.category.toLowerCase(),
	      // Event Action:
	      ea: event.action.toLowerCase(),
	      // Event Label:
	      el: event.label.toLowerCase(),
	      // User Language:
	      ul: this.parent.lang,
	      // Cache Buster:
	      z: Math.random().toString().slice(2)
	    };
	    if (!this.session[tid]) {
	      this.session[tid] = 'started';
	      params.sc = 'start';
	    }
	    var parts = Object.entries(params).concat(dimensions);
	    return GoogleAnalytics.endpoint + '?' + parts.map(function (pair) {
	      return pair.map(encodeURIComponent).join('=');
	    }).join('&');
	  };

	  return GoogleAnalytics;
	})();

	exports['default'] = GoogleAnalytics;
	module.exports = exports['default'];

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _clientIdStorage = __webpack_require__(114);

	var _clientIdStorage2 = _interopRequireDefault(_clientIdStorage);

	var _GoogleAnalytics = __webpack_require__(45);

	var _GoogleAnalytics2 = _interopRequireDefault(_GoogleAnalytics);

	var _YaMetrika = __webpack_require__(135);

	var _YaMetrika2 = _interopRequireDefault(_YaMetrika);

	var _EventsAPI = __webpack_require__(130);

	var _EventsAPI2 = _interopRequireDefault(_EventsAPI);

	var OnlineStatistics = (function () {
	  function OnlineStatistics(options) {
	    var drpVersion = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
	    var lang = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];

	    _classCallCheck(this, OnlineStatistics);

	    this.clientId = '';
	    this.computerId = '';
	    this.experiment = '(not set)';
	    this.config = {
	      userIdDimension: 'cd1', // ClientID
	      drpVersionDimension: 'cd2',
	      osDimension: 'cd3',
	      spDimension: 'cd4',
	      captionDimension: 'cd5',
	      experimentDimension: 'cd6',
	      driversInstallFailed: 'cd7',
	      installationTime: 'cd8',
	      errorDevicesApiFailed: 'cd9',
	      nps: 'cd10',
	      driversInstallFailedMetric: 'cm1',
	      installationTimeMetric: 'cm2',
	      errorDevicesApiFailedMetric: 'cm3'
	    };
	    this.options = { google: {}, yandex: {}, events: {} };
	    this.counters = {
	      google: new _GoogleAnalytics2['default'](this),
	      yandex: new _YaMetrika2['default'](this),
	      events: new _EventsAPI2['default'](this)
	    };

	    Object.assign(this, { lang: lang, drpVersion: drpVersion.trim() });
	    Object.assign(this.options, options);
	  }

	  OnlineStatistics.prototype.generateSessionId = function generateSessionId() {
	    var d = new Date().getTime();
	    var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
	      var r = (d + Math.random() * 16) % 16 | 0;
	      d = Math.floor(d / 16);
	      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
	    });
	    return uuid;
	  };

	  OnlineStatistics.prototype.init = function init() {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var clientId = _ref.clientId;
	    var computerId = _ref.computerId;
	    var offline = _ref.offline;

	    if (offline) this.offline = true;

	    this.clientId = _clientIdStorage2['default'].init('clientId', clientId);
	    this.computerId = _clientIdStorage2['default'].init('computerId', computerId, ['HKLM', 'HKCU']);
	    this.sessionId = this.generateSessionId();

	    var experiments = this.options.experiments || [];
	    if (experiments.length > 0) {
	      var seed = this.computerId.replace(/[^\d]/g, '').slice(-15);
	      var ind = parseInt(seed, 10) % experiments.length;
	      this.experiment = this.options.experiments[ind || 0];
	    }

	    for (var _name in this.counters) {
	      this.counters[_name].init(this.options[_name]);
	    }

	    this._initialized = Promise.resolve(true);
	  };

	  OnlineStatistics.prototype.event = function event(_event, dimensions, important) {
	    if (!_event.action) {
	      return Promise.reject(new Error('event.action is undefined'));
	    }
	    if (!this._initialized) this.init();

	    _event = Object.assign({
	      category: this.options.category,
	      action: '',
	      label: this.drpVersion
	    }, _event);

	    if (this.offline) _event.label += ' [offline]';

	    var promise = this.send(_event, dimensions, important);

	    if (typeof _event.callback === 'function') {
	      promise.then(function () {
	        _event.callback();
	      }, function (err) {
	        _event.callback(err);
	      });
	    }

	    return promise;
	  };

	  OnlineStatistics.prototype.send = function send(event, dimensions, important) {
	    var counters = Object.values(this.counters);
	    return Promise.all(counters.map(function (counter) {
	      return counter.send(event, dimensions, important);
	    }));
	  };

	  return OnlineStatistics;
	})();

	exports['default'] = OnlineStatistics;
	module.exports = exports['default'];

/***/ },
/* 47 */
/***/ function(module, exports) {

	/* global ActiveXObject */

	'use strict';

	exports.__esModule = true;
	exports['default'] = new ActiveXObject('WScript.Shell');
	module.exports = exports['default'];

/***/ },
/* 48 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var sendImg = function sendImg(url) {
	  return new Promise(function (resolve, reject) {
	    var img = document.createElement('img');
	    img.className = 'ga-image';
	    img.onload = resolve;
	    img.onerror = reject;
	    img.src = url;
	    document.body.appendChild(img);
	  });
	};
	exports.sendImg = sendImg;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _libWMIRegistry = __webpack_require__(113);

	var _libWMIRegistry2 = _interopRequireDefault(_libWMIRegistry);

	var wmiRegistry = new _libWMIRegistry2['default']();
	exports.wmiRegistry = wmiRegistry;
	var wmiRegistry64 = new _libWMIRegistry2['default'](true);

	exports.wmiRegistry64 = wmiRegistry64;
	var wmiRegRead = function wmiRegRead(regPath) {
	  var _regPath$split = regPath.split('\\');

	  var sect = _regPath$split[0];

	  var path = _regPath$split.slice(1);

	  var key = path.splice(-1);
	  path = path.join('\\');
	  var wmiReg = wmiRegistry;
	  if (sect.endsWith('64')) {
	    sect = sect.slice(0, -2);
	    wmiReg = wmiRegistry64;
	  }
	  return wmiReg.GetStringValue(wmiReg[sect], path, key);
	};
	exports.wmiRegRead = wmiRegRead;

/***/ },
/* 50 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (_ref) {
	  var extension = _ref.extension;
	  var fileName = _ref.fileName;
	  var softName = _ref.softName;
	  var softCategory = _ref.softCategory;

	  // TODO: use template
	  return {
	    template: 'center',
	    content: 'Для открытия файла ' + fileName + ' не установлена программа ' + softName + '. Установить ' + softName + ' и открыть файл?',
	    actionButtonText: 'Открыть файл',
	    unsubscribeButtonText: 'Не открывать файл',
	    notificationIcon: 'file-icon.png',
	    statisticsLabel: softCategory + ' ' + extension,
	    color: '#674172',
	    showDelay: 0,
	    timeoutDelay: false,
	    focusWindow: true
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 51 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (_ref) {
	  var errCode = _ref.errCode;

	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 3,
	    title: 'Сбой в работе Windows!',
	    content: 'Компьютер недавно был самопроизвольно перезагружен из-за ошибки ' + errCode + '!',
	    actionButtonText: 'Посмотреть решение',
	    unsubscribeButtonText: 'Отмена',
	    notificationIcon: 'gliph-tool.png',
	    statisticsLabel: 'bsod',
	    problemUrl: 'http://internet-start.net/?q=BSOD%20%D0%BE%D1%88%D0%B8%D0%B1%D0%BA%D0%B0%20' + errCode + '&utm_source=notifier&utm_medium=notification&utm_campaign=bsod&utm_content=' + errCode,
	    color: '#8d1f1f'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 52 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (_ref) {
	  var fulldrives = _ref.fulldrives;

	  // TODO: use template
	  return {
	    notificationId: '9a96e730-d992-edf3-029f-8bac1f7ac6c4',
	    maxCountOfDisplaying: 3,
	    title: 'Недостаточно свободного места!',
	    content: 'На диске ' + fulldrives + ' мало свободного места! Это может привести к невозможности сохранения и потере данных!',
	    actionButtonText: 'Посмотреть решение',
	    unsubscribeButtonText: 'Отмена',
	    notificationIcon: 'gliph-harddrive.png',
	    statisticsLabel: 'hdd space',
	    problemUrl: 'http://drp.su/ru/help/hdd-space.html',
	    color: '#8d1f1f'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 53 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (_ref) {
	  var softName = _ref.softName;

	  var soft = {
	    'Yandex.Browser (Russian)': {
	      title: 'Рекомендуем установить Яндекс.Браузер!',
	      content: 'Быстрый браузер с технологией активной защиты Protect предупредит об опасных сайтах.'
	    }
	  };
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 3,
	    title: soft[softName].title,
	    content: soft[softName].content,
	    actionButtonText: 'Установить',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'drp.png',
	    statisticsLabel: 'Partner Soft ' + softName,
	    color: '#00733c'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 54 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (_ref) {
	  var softName = _ref.softName;

	  var soft = {
	    'WinRAR (Russian)': {
	      title: 'Рекомендуем установить архиватор WinRAR!',
	      content: 'WinRAR открывает любые архивы, позволяет экономить место на жестком диске!'
	    }
	  };
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 3,
	    title: soft[softName].title,
	    content: soft[softName].content,
	    actionButtonText: 'Установить',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'drp.png',
	    statisticsLabel: 'Partner Soft ' + softName,
	    color: '#A5569B'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 55 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (_ref) {
	  var softName = _ref.softName;

	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 3,
	    title: 'Рекомендуем установить Яндекс.Браузер!',
	    content: 'Быстрый браузер с технологией автивной защиты Protect предупредит об опасных сайтах.',
	    actionButtonText: 'Установить',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'drp.png',
	    statisticsLabel: 'Partner Soft ' + softName,
	    color: '#00733c'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 56 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (_ref) {
	  var disks = _ref.disks;

	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 3,
	    title: 'Возможен отказ работы жесткого диска!',
	    content: 'По данным Windows, возможны проблемы в работе жесткого диска ' + disks + ': снижение скорости, потеря данных, отказ работы HDD.',
	    actionButtonText: 'Посмотреть рекомендации',
	    unsubscribeButtonText: 'Отмена',
	    notificationIcon: 'gliph-harddrive.png',
	    statisticsLabel: 'hdd smart',
	    problemUrl: 'http://internet-start.net/?q=hdd%20smart%20%D0%BD%D0%B5%20Ok&utm_source=notifier&utm_medium=notification&utm_campaign=hdd&utm_content=smart',
	    color: '#8d1f1f'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 57 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (_ref) {
	  var systemdrive = _ref.systemdrive;

	  // TODO: use template
	  return {
	    notificationId: '73e9433a-44f2-c6a4-a8a3-6a4899d5ecf7',
	    maxCountOfDisplaying: 3,
	    title: 'Недостаточно свободного места!',
	    content: 'На системном диске [' + systemdrive + '] недостаточно свободного места! Это может привести к нестабильной работе Windows!',
	    actionButtonText: 'Посмотреть решение',
	    unsubscribeButtonText: 'Отмена',
	    notificationIcon: 'gliph-harddrive.png',
	    statisticsLabel: 'hdd system space',
	    problemUrl: 'http://drp.su/ru/help/hdd-system-space.html',
	    color: '#8d1f1f'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 58 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Благодаря защищенному режиму Яндекс.Браузера пользоваться Онлайн Банком гораздо безопаснее',
	    content: '',
	    actionButtonText: 'Включить защищенный режим',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'banking open',
	    color: '#683f73',
	    openUrl: 'https://browser.yandex.ru/welcome-protect-calypso/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 59 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Благодаря защищенному режиму Яндекс.Браузера пользоваться Онлайн Банком гораздо безопаснее',
	    content: '',
	    actionButtonText: 'Включить защищенный режим',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'banking install',
	    color: '#683f73',
	    openUrl: 'https://browser.yandex.ru/welcome-protect-calypso/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 60 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Chrome сильно разряжает аккумулятор',
	    content: 'Вам рекомендуется использовать другой браузер',
	    actionButtonText: 'Открыть Яндекс.Браузер',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'battery open',
	    color: '#683f73',
	    openUrl: 'https://browser.yandex.ru/desktop/main/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 61 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Chrome сильно разряжает аккумулятор',
	    content: 'Вам рекомендуется использовать другой браузер',
	    actionButtonText: 'Открыть Яндекс.Браузер',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'battery install',
	    color: '#683f73',
	    openUrl: 'https://browser.yandex.ru/desktop/main/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 62 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Заблокирован сайт?',
	    content: 'Яндекс.Браузер в Турбо-режиме открывает любые сайты',
	    actionButtonText: 'Открыть Яндекс.Браузер',
	    unsubscribeButtonText: 'Спасибо, позже',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'roskomnadzor open',
	    color: '#683f73',
	    openUrl: 'https://browser.yandex.ru/desktop/turbo/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 63 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Заблокирован сайт?',
	    content: 'Яндекс.Браузер в Турбо-режиме открывает любые сайты',
	    actionButtonText: 'Открыть Яндекс.Браузер',
	    unsubscribeButtonText: 'Спасибо, позже',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'roskomnadzor install',
	    color: '#683f73',
	    openUrl: 'https://browser.yandex.ru/desktop/turbo/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 64 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Все новости о бизнесе и политике в одном месте',
	    content: 'Благодаря технологии Дзен в Яндекс Браузере все интересующие вас новсти собраны в удобную ленту',
	    actionButtonText: 'Настроить ленту',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'news business open',
	    color: '#683f73',
	    openUrl: 'https://browser.yandex.ru/welcome-install/16-7/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 65 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Все новости о бизнесе и политике в одном месте',
	    content: 'Благодаря технологии Дзен в Яндекс Браузере все интересующие вас новсти собраны в удобную ленту',
	    actionButtonText: 'Настроить ленту',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'news business install',
	    color: '#683f73',
	    openUrl: 'https://browser.yandex.ru/welcome-install/16-7/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 66 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Яндекс найдет больше предложений по выгодной цене',
	    content: '',
	    actionButtonText: 'Найти дешевле',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'buy open',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 67 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Яндекс найдет больше предложений по выгодной цене',
	    content: '',
	    actionButtonText: 'Найти дешевле',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'buy install',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 68 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'В вашем городе Яндекс найдет больше предложений по выгодной цене',
	    content: '',
	    actionButtonText: 'Искать в Яндекс.Браузере',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'geo city open',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 69 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'В вашем городе Яндекс найдет больше предложений по выгодной цене',
	    content: '',
	    actionButtonText: 'Искать в Яндекс.Браузере',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'geo city install',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 70 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Яндекс найдет больше предложений по выгодной цене в вашем районе',
	    content: '',
	    actionButtonText: 'Искать в Яндекс.Браузере',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'geo metro open',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 71 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Яндекс найдет больше предложений по выгодной цене в вашем районе',
	    content: '',
	    actionButtonText: 'Искать в Яндекс.Браузере',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'geo metro install',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 72 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Все интересующие вас новости в одном месте',
	    content: 'Благодаря технологии Дзен в Яндекс Браузере все интересующие вас статьи и новости собраны в удобную ленту',
	    actionButtonText: 'Настроить ленту',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'news open',
	    color: '#683f73',
	    openUrl: 'https://browser.yandex.ru/welcome-install/16-7/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 73 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Все интересующие вас новости в одном месте',
	    content: 'Благодаря технологии Дзен в Яндекс Браузере все интересующие вас статьи и новости собраны в удобную ленту',
	    actionButtonText: 'Настроить ленту',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'news install',
	    color: '#683f73',
	    openUrl: 'https://browser.yandex.ru/welcome-install/16-7/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 74 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Вы используете незащищенную Wi-Fi сеть',
	    content: 'Используйте Яндекс.Браузер — благодаря технологии Protect ваш комьютер остается защищенным даже в незнакомых местах',
	    actionButtonText: 'Использовать безопасное соединение',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'wifi open',
	    color: '#683f73',
	    openUrl: 'https://yandex.ru/company/technologies/protect/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 75 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Вы используете незащищенную Wi-Fi сеть',
	    content: 'Используйте Яндекс.Браузер — благодаря технологии Protect ваш комьютер остается защищенным даже в незнакомых местах',
	    actionButtonText: 'Использовать безопасное соединение',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'wifi install',
	    color: '#683f73',
	    openUrl: 'https://yandex.ru/company/technologies/protect/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 76 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Теперь ваши платежи и переводы защищены!',
	    content: 'Оставайтесь с Яндекс.Браузером и воспользуйтесь многими другими преимуществами',
	    actionButtonText: 'Перенести все мои настройки и историю',
	    unsubscribeButtonText: 'Нет, спасибо',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'settings import banking',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 77 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'С нами интернет остается открытым!',
	    content: 'Оставайтесь с Яндекс.Браузером и воспользуйтесь многими другими преимуществами',
	    actionButtonText: 'Перенести все мои настройки и историю',
	    unsubscribeButtonText: 'Нет, спасибо',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'settings import roskomnadzor',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 78 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Теперь все интеренсые новости в одной ленте!',
	    content: 'Оставайтесь с Яндекс.Браузером и воспользуйтесь многими другими преимуществами',
	    actionButtonText: 'Перенести все мои настройки и историю',
	    unsubscribeButtonText: 'Нет, спасибо',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'settings import news business',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 79 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Теперь вы всегда найдете самые выгодные предложения!',
	    content: 'Оставайтесь с Яндекс.Браузером и воспользуйтесь многими другими преимуществами',
	    actionButtonText: 'Перенести все мои настройки и историю',
	    unsubscribeButtonText: 'Нет, спасибо',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'settings import buy sell',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 80 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function (_ref) {
	  var extension = _ref.extension;
	  var fileName = _ref.fileName;
	  var softName = _ref.softName;
	  var softCategory = _ref.softCategory;

	  // TODO: use template
	  var notificationsList = ['settingsImport1', 'settingsImport2', 'settingsImport3', 'settingsImport4'];
	  var selectNotification = notificationsList[Math.floor(Math.random() * notificationsList.length)];

	  return {
	    template: 'settingsImport',
	    htmlFileName: selectNotification,
	    content: 'Для открытия файла ' + fileName + ' не установлена программа ' + softName + '. Установить ' + softName + ' и открыть файл?',
	    actionButtonText: 'Открыть файл',
	    unsubscribeButtonText: 'Не открывать файл',
	    notificationIcon: 'file-icon.png',
	    statisticsLabel: 'settings import ' + selectNotification,
	    color: '#674172',
	    showDelay: 0,
	    timeoutDelay: false,
	    focusWindow: true
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 81 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Теперь все интеренсые новости в одной ленте!',
	    content: 'Оставайтесь с Яндекс.Браузером и воспользуйтесь многими другими преимуществами',
	    actionButtonText: 'Перенести все мои настройки и историю',
	    unsubscribeButtonText: 'Нет, спасибо',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'settings import news',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 82 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Ура! Фильмы теперь можно смотреть без рекламы!',
	    content: 'Оставайтесь с Яндекс.Браузером и воспользуйтесь многими другими преимуществами',
	    actionButtonText: 'Перенести все мои настройки и историю',
	    unsubscribeButtonText: 'Нет, спасибо',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'settings import filmonline',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 83 */
79,
/* 84 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Ура! YouTube теперь работает быстрее!',
	    content: 'Оставайтесь с Яндекс.Браузером и воспользуйтесь многими другими преимуществами',
	    actionButtonText: 'Перенести все мои настройки и историю',
	    unsubscribeButtonText: 'Нет, спасибо',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'settings import youtube',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 85 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Смотри любые фильмы на Яндекс.Видео в высоком качестве',
	    content: '',
	    actionButtonText: 'Смотреть онлайн',
	    unsubscribeButtonText: 'Не смотреть',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'filmonline open',
	    color: '#683f73',
	    openUrl: 'https://yandex.ru/video/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 86 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Смотри любые фильмы на Яндекс.Видео в высоком качестве',
	    content: '',
	    actionButtonText: 'Смотреть онлайн',
	    unsubscribeButtonText: 'Не смотреть',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'filmonline install',
	    color: '#683f73',
	    openUrl: 'https://yandex.ru/video/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 87 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Яндекс найдет этот товар дешевле',
	    content: '',
	    actionButtonText: 'Найти дешевле',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'market open',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 88 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Яндекс найдет этот товар дешевле',
	    content: '',
	    actionButtonText: 'Найти дешевле',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'market install',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 89 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Сервисы Яндекса могут работать быстрее',
	    content: 'Все яндекс-сервисы работают значительно быстрее и эффективнее в Яндекс.Браузере',
	    actionButtonText: 'Открыть Яндекс.Браузер',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'yaservice open',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 90 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'Сервисы Яндекса могут работать быстрее',
	    content: 'Все яндекс-сервисы работают значительно быстрее и эффективнее в Яндекс.Браузере',
	    actionButtonText: 'Открыть Яндекс.Браузер',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'yaservice install',
	    color: '#683f73'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 91 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'С режимом Яндекс.Турбо видео на YouTube загружаются на 40% быстрее',
	    content: '',
	    actionButtonText: 'Попробовать Турбо',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'youtube open',
	    color: '#683f73',
	    openUrl: 'https://www.youtube.com/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 92 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;

	exports['default'] = function () {
	  // TODO: use template
	  return {
	    maxCountOfDisplaying: 100,
	    title: 'С режимом Яндекс.Турбо видео на YouTube загружаются на 40% быстрее',
	    content: '',
	    actionButtonText: 'Попробовать Турбо',
	    unsubscribeButtonText: 'Отказаться',
	    notificationIcon: 'yandex-browser.png',
	    statisticsLabel: 'youtube install',
	    color: '#683f73',
	    openUrl: 'https://www.youtube.com/'
	  };
	};

	module.exports = exports['default'];

/***/ },
/* 93 */
/***/ function(module, exports) {

	module.exports = {
		"notificationId": "4496667b-1460-d6df-2f0b-d6618d024e16",
		"maxCountOfDisplaying": 3,
		"title": "Безопасность компьютера под угрозой!",
		"content": "Пожалуйста, включите антивирус 360 Total Security!\n",
		"actionButtonText": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n",
		"unsubscribeButtonText": "Отмена",
		"notificationIcon": "gliph-security.png",
		"statisticsLabel": "antivirus notification 3",
		"color": "red"
	};

/***/ },
/* 94 */
/***/ function(module, exports) {

	module.exports = {
		"notificationId": "4496667b-1460-d6df-2f0b-d6618d024e16",
		"maxCountOfDisplaying": 3,
		"title": "Безопасность компьютера под угрозой!",
		"content": "Не установлен антивирус! Установите надежный бесплатный антивирус 360 Total Security!\n",
		"actionButtonText": "Установить бесплатно",
		"unsubscribeButtonText": "Отказаться",
		"notificationIcon": "gliph-danger.png",
		"statisticsLabel": "antivirus notification 3",
		"color": "red"
	};

/***/ },
/* 95 */
/***/ function(module, exports) {

	module.exports = {
		"notificationId": "4496667b-1460-d6df-2f0b-d6618d024e16",
		"maxCountOfDisplaying": 3,
		"title": "Безопасность компьютера под угрозой!",
		"content": "Ваш антивирус не работает! Установите надежный бесплатный антивирус 360 Total Security!\n",
		"actionButtonText": "Установить бесплатно",
		"unsubscribeButtonText": "Отказаться",
		"notificationIcon": "gliph-danger.png",
		"statisticsLabel": "antivirus notification 3",
		"color": "red"
	};

/***/ },
/* 96 */
/***/ function(module, exports) {

	module.exports = {
		"maxCountOfDisplaying": 3,
		"title": "Срок службы батареи ноутбука подходит к концу!",
		"content": "Ресурс службы батареи израсходован более чем на 70%, время работы от батареи будет уменьшаться!\n",
		"actionButtonText": "Посмотреть рекомендации\n",
		"unsubscribeButtonText": "Отмена",
		"notificationIcon": "gliph-battery-failure.png",
		"statisticsLabel": "battery bad condition",
		"problemUrl": "http://internet-start.net/?q=%D0%98%D0%B7%D0%BD%D0%BE%D1%81%20%D0%B1%D0%B0%D1%82%D0%B0%D1%80%D0%B5%D0%B8%20%D0%BD%D0%BE%D1%83%D1%82%D0%B1%D1%83%D0%BA%D0%B0&utm_source=notifier&utm_medium=notification&utm_campaign=battery&utm_content=poor_condition",
		"color": "#8d1f1f"
	};

/***/ },
/* 97 */
/***/ function(module, exports) {

	module.exports = {
		"maxCountOfDisplaying": 3,
		"title": "Средний уровень загрузки процессора выше 70%!",
		"content": "Это может быть вызвано вирусами или фоновыми процессами в системе! Рекомендуем провести проверку.\n",
		"actionButtonText": "Посмотреть рекомендации\n",
		"unsubscribeButtonText": "Отмена",
		"notificationIcon": "gliph-chipset.png",
		"statisticsLabel": "cpu load average",
		"problemUrl": "http://internet-start.net/?q=%D0%92%D1%8B%D1%81%D0%BE%D0%BA%D0%B0%D1%8F%20%D0%B7%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B0%20%D0%BF%D1%80%D0%BE%D1%86%D0%B5%D1%81%D1%81%D0%BE%D1%80%D0%B0&utm_source=notifier&utm_medium=notification&utm_campaign=cpu&utm_content=load_average",
		"color": "red"
	};

/***/ },
/* 98 */
/***/ function(module, exports) {

	module.exports = {
		"maxCountOfDisplaying": 3,
		"title": "Недостаточно свободной оперативной памяти!",
		"content": "Оперативная память заполнена свыше 80%, это снижает производительность системы и ведет к нестабильной работе программ!\n",
		"actionButtonText": "Посмотреть рекомендации\n",
		"unsubscribeButtonText": "Отмена",
		"notificationIcon": "gliph-ram.png",
		"statisticsLabel": "ram",
		"problemUrl": "http://internet-start.net/?q=%D0%92%D1%8B%D1%81%D0%BE%D0%BA%D0%B0%D1%8F%20%D0%B7%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B0%20%D0%BE%D0%BF%D0%B5%D1%80%D0%B0%D1%82%D0%B8%D0%B2%D0%BD%D0%BE%D0%B9%20%D0%BF%D0%B0%D0%BC%D1%8F%D1%82%D0%B8&utm_source=notifier&utm_medium=notification&utm_campaign=ram&utm_content=high_load",
		"color": "red"
	};

/***/ },
/* 99 */
/***/ function(module, exports) {

	module.exports = {
		"maxCountOfDisplaying": 3,
		"title": "Ежедневно взламывается тысячи страниц в соцсетях",
		"content": "Благодаря защищенному соединению, пользоваться соцсетями в Яндекс.Браузере значительно безопаснее",
		"actionButtonText": "Использовать защищенное соединение",
		"unsubscribeButtonText": "Отказаться",
		"notificationIcon": "yandex-browser.png",
		"statisticsLabel": "news open",
		"color": "#683f73"
	};

/***/ },
/* 100 */
/***/ function(module, exports) {

	module.exports = {
		"maxCountOfDisplaying": 3,
		"title": "Ежедневно взламывается тысячи страниц в соцсетях",
		"content": "Благодаря защищенному соединению, пользоваться соцсетями в Яндекс.Браузере значительно безопаснее",
		"actionButtonText": "Использовать защищенное соединение",
		"unsubscribeButtonText": "Отказаться",
		"notificationIcon": "yandex-browser.png",
		"statisticsLabel": "news install",
		"color": "#683f73"
	};

/***/ },
/* 101 */
/***/ function(module, exports) {

	module.exports = {
		"template": "widget",
		"windowTitle": "Yandex Search Widget",
		"actionButtonText": "Найти",
		"statisticsLabel": "label",
		"color": "#ffffff",
		"showDelay": 0,
		"timeoutDelay": false,
		"focusWindow": false,
		"background": true
	};

/***/ },
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _getDiagnostics = __webpack_require__(128);

	var _getDiagnostics2 = _interopRequireDefault(_getDiagnostics);

	var _partnerSoft = __webpack_require__(129);

	var _partnerSoft2 = _interopRequireDefault(_partnerSoft);

	var installedSoftCache = undefined;

	var getInstalledSoft = function getInstalledSoft() {
	  if (!installedSoftCache) installedSoftCache = _getDiagnostics2['default']('soft').Software['Installed Software'];
	  return installedSoftCache;
	};

	var checkSoftInstalled = function checkSoftInstalled(nameReg, installedSoft) {
	  if (!installedSoft) installedSoft = getInstalledSoft();
	  return installedSoft.some(function (soft) {
	    return nameReg.test(soft.Program);
	  });
	};

	exports.checkSoftInstalled = checkSoftInstalled;
	var getPartnerInfo = function getPartnerInfo(soft) {
	  var pSoft = _partnerSoft2['default'].find(function (_ref) {
	    var nameReg = _ref.nameReg;
	    return nameReg.test(soft.Program);
	  });
	  if (!pSoft) return { isPartner: false };
	  if (!pSoft.getClids) return { title: pSoft.title, isPartner: true };
	  var clids = pSoft.getClids();
	  return {
	    title: pSoft.title,
	    clids: clids,
	    isPartner: clids.some(function (clid) {
	      return pSoft.clidsReg.test(clid);
	    })
	  };
	};
	exports.getPartnerInfo = getPartnerInfo;

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* global ActiveXObject */

	'use strict';

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _wmi = __webpack_require__(3);

	var Registry = (function () {
	  function Registry(is64) {
	    _classCallCheck(this, Registry);

	    if (is64) {
	      var context = new ActiveXObject('WbemScripting.SWbemNamedValueSet');
	      context.Add('__ProviderArchitecture', 64);
	      context.Add('__RequiredArchitecture', true);
	      this.stdregprov = _wmi.locator.ConnectServer(null, 'root\\default', null, null, null, null, null, context).Get('StdRegProv');
	    } else {
	      this.stdregprov = _wmi.locator.ConnectServer(null, 'root\\default').Get('StdRegProv');
	    }
	    this.HKCR = 0x80000000; // HKEY_CLASSES_ROOT
	    this.HKCU = 0x80000001; // HKEY_CURRENT_USER
	    this.HKLM = 0x80000002; // HKEY_LOCAL_MACHINE
	    this.HKUS = 0x80000003; // HKEY_USERS
	    this.HKCC = 0x80000005; // HKEY_CURRENT_CONFIG

	    this.REG_SZ = 1;
	    this.REG_EXPAND_SZ = 2;
	    this.REG_BINARY = 3;
	    this.REG_DWORD = 4;
	    this.REG_MULTI_SZ = 7;
	  }

	  Registry.prototype.exec = function exec(methodName, hkey, key, valueName) {
	    var inParameters = this.stdregprov.Methods_.Item(methodName).InParameters.SpawnInstance_();
	    inParameters.hDefKey = hkey;
	    inParameters.sSubKeyName = key;
	    if (valueName) {
	      inParameters.sValueName = valueName;
	    }
	    var out = this.stdregprov.ExecMethod_(methodName, inParameters);
	    return out;
	  };

	  Registry.prototype.EnumKey = function EnumKey(hkey, key) {
	    var outParameters = this.exec('EnumKey', hkey, key);
	    var names = [];
	    if (outParameters.sNames != null && outParameters.sNames.toArray) {
	      names = outParameters.sNames.toArray();
	    }
	    return names;
	  };

	  Registry.prototype.EnumValues = function EnumValues(hkey, key) {
	    var outParameters = this.exec('EnumValues', hkey, key);
	    var valueNames = [];
	    if (outParameters.sNames != null && outParameters.sNames.toArray) {
	      valueNames = outParameters.sNames.toArray();
	    }
	    var valueTypes = [];
	    if (outParameters.sNames != null && outParameters.Types.toArray) {
	      valueTypes = outParameters.Types.toArray();
	    }

	    return {
	      Names: valueNames,
	      Types: valueTypes
	    };
	  };

	  Registry.prototype.GetStringValue = function GetStringValue(hkey, key, name) {
	    var outParameters = this.exec('GetStringValue', hkey, key, name);
	    return outParameters.sValue;
	  };

	  Registry.prototype.GetExpandedStringValue = function GetExpandedStringValue(hkey, key, name) {
	    var outParameters = this.exec('GetExpandedStringValue', hkey, key, name);
	    return outParameters.sValue;
	  };

	  Registry.prototype.GetDWORDValue = function GetDWORDValue(hkey, key, name) {
	    var outParameters = this.exec('GetDWORDValue', hkey, key, name);
	    return outParameters.uValue;
	  };

	  return Registry;
	})();

	exports['default'] = Registry;
	module.exports = exports['default'];

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _RegistryStore = __webpack_require__(133);

	var _RegistryStore2 = _interopRequireDefault(_RegistryStore);

	var _FileStore = __webpack_require__(131);

	var _FileStore2 = _interopRequireDefault(_FileStore);

	var _logs = __webpack_require__(11);

	exports['default'] = {
	  stores: {
	    File: new _FileStore2['default'](),
	    HKCU: new _RegistryStore2['default']('HKCU\\SOFTWARE\\drpsu\\'),
	    HKLM: new _RegistryStore2['default']('HKLM\\SOFTWARE\\drpsu\\')
	  },

	  get: function get(key, stores) {
	    var _this = this;

	    var res = undefined;
	    stores.forEach(function (name) {
	      if (res) {
	        return;
	      } else {
	        res = _this.stores[name].get(key);
	        if (res) _logs.log('[clientIdStorage] got ' + key + ' from ' + name + ': ' + res);
	      }
	    });
	    if (!res) {
	      res = this.generate();
	      _logs.log('[clientIdStorage] generated ' + key + ': ' + res);
	    }
	    return res;
	  },

	  set: function set(key, value, stores) {
	    var _this2 = this;

	    stores.forEach(function (name) {
	      _this2.stores[name].set(key, value);
	    });
	  },

	  init: function init(key, value) {
	    if (key === undefined) key = 'clientId';
	    var stores = arguments.length <= 2 || arguments[2] === undefined ? ['File', 'HKCU', 'HKLM'] : arguments[2];

	    if (value) {
	      _logs.log('[clientIdStorage] got ' + key + ' from init(): ' + value);
	      this[key] = value;
	    } else if (this[key]) {
	      return;
	    } else {
	      this[key] = this.get(key, stores);
	    }
	    this.set(key, this[key], stores);
	    return this[key];
	  },

	  generate: function generate() {
	    /* eslint-disable */
	    var d = new Date().getTime();
	    var uuid = 'xxxxxxxxx.xxxxxxxxxx'.replace(/[xy]/g, function (c) {
	      var r = (d + Math.random() * 10) % 10 | 0;
	      return (c === 'x' ? r : r & 0x7 | 0x8).toString();
	    });
	    return uuid;
	    /* eslint-enable */
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _systemSpecialFolders = __webpack_require__(16);

	var _systemShell = __webpack_require__(15);

	var _systemFso = __webpack_require__(14);

	var _systemLocalFiles = __webpack_require__(30);

	var _os = __webpack_require__(12);

	var ps = 'powershell -NonInteractive -NoLogo -NoProfile -ExecutionPolicy Bypass';

	var PowerShell = (function () {
	  function PowerShell() {
	    _classCallCheck(this, PowerShell);

	    Object.assign(this, {
	      running: false,
	      available: _os.OSVersion >= 6
	    });
	  }

	  PowerShell.prototype.init = function init() {
	    if (this.available && !this.running) {
	      var dir = _systemLocalFiles.ensurePath(_systemSpecialFolders.AppFolder + '\\temp');
	      var seed = Date.now().toString(36) + '.' + Math.random().toString(36).slice(2, 7);
	      var files = this.files = {
	        queue: dir + '\\ps.' + seed + '.cmd.txt',
	        stdout: dir + '\\ps.' + seed + '.stdout.log',
	        stderr: dir + '\\ps.' + seed + '.stderr.log'
	      };
	      _systemFso.fso.CreateTextFile(files.queue, true, true).Close();
	      var cmd = 'Get-Content \'' + files.queue + '\' -Wait | Invoke-Expression';
	      try {
	        _systemShell.WshShell.Run('cmd /C ' + ps + ' "' + cmd + '" > "' + files.stdout + '" 2> "' + files.stderr + '"', 0, false);
	        this.running = true;
	      } catch (err) {
	        this.available = false;
	      }
	    }
	    return this;
	  };

	  PowerShell.prototype.send = function send(batch) {
	    var _this = this;

	    if (this.available) {
	      (function () {
	        if (!_this.running) _this.init();
	        batch = [].concat(batch);
	        var ts = _systemFso.fso.GetFile(_this.files.queue).OpenAsTextStream(8, -1);
	        batch.forEach(function (cmd) {
	          ts.WriteLine(cmd);
	        });
	        ts.Close();
	      })();
	    }
	    return this;
	  };

	  PowerShell.prototype.terminate = function terminate() {
	    if (this.running) {
	      this.send('exit');
	      this.running = false;
	    }
	    return this;
	  };

	  PowerShell.prototype.read = function read(chanel) {
	    if (this.available) {
	      var file = _systemFso.fso.OpenTextFile(this.files[chanel], 1, false, -1);
	      var res = file.ReadAll();
	      file.Close();
	      return res;
	    }
	  };

	  PowerShell.prototype.stdout = function stdout() {
	    return this.read('stdout');
	  };

	  PowerShell.prototype.stderr = function stderr() {
	    return this.read('stderr');
	  };

	  return PowerShell;
	})();

	exports['default'] = new PowerShell();
	module.exports = exports['default'];

/***/ },
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * Expose `Emitter`.
	 */

	'use strict';

	if (true) {
	  module.exports = Emitter;
	}

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on = Emitter.prototype.addEventListener = function (event, fn) {
	  this._callbacks = this._callbacks || {};
	  (this._callbacks['$' + event] = this._callbacks['$' + event] || []).push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function (event, fn) {
	  function on() {
	    this.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function (event, fn) {
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks['$' + event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks['$' + event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function (event) {
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1),
	      callbacks = this._callbacks['$' + event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function (event) {
	  this._callbacks = this._callbacks || {};
	  return this._callbacks['$' + event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function (event) {
	  return !!this.listeners(event).length;
	};

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _os = __webpack_require__(12);

	var parseWinDate = function parseWinDate(date) {
	  return new Date(parseInt(date.slice(0, 4), 10), parseInt(date.slice(4, 6), 10) - 1, parseInt(date.slice(6, 8), 10), parseInt(date.slice(8, 10), 10), parseInt(date.slice(10, 12), 10), parseInt(date.slice(12, 14), 10));
	};

	exports['default'] = {
	  Computer: {
	    Summary: {
	      type: 'object',
	      targets: ['diagnostics', 'dashboard'],
	      groups: [{
	        name: 'Computer',
	        fields: [{
	          name: 'Manufacturer',
	          wmi: {
	            source: 'Win32_ComputerSystem',
	            fields: ['Manufacturer']
	          }
	        }, {
	          name: 'Model',
	          wmi: {
	            source: 'Win32_ComputerSystem',
	            fields: ['Model']
	          }
	        }, {
	          name: 'Computer Type',
	          wmi: {
	            source: 'Win32_ComputerSystem',
	            fields: ['SystemType']
	          }
	        }, {
	          name: 'Operating System',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['Caption']
	          }
	        }, {
	          name: 'OS Service Pack',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['CSDVersion']
	          }
	        }, {
	          name: 'Internet Explorer',
	          reg: {
	            source: _os.OSVersion < 6 ? 'HKLM\\SOFTWARE\\Microsoft\\Internet Explorer\\Version' : 'HKLM\\SOFTWARE\\Microsoft\\Internet Explorer\\svcVersion'
	          }
	        }, {
	          name: 'Computer Name',
	          wmi: {
	            source: 'Win32_ComputerSystem',
	            fields: ['Caption']
	          }
	        }, {
	          name: 'User Name',
	          wmi: {
	            source: 'Win32_ComputerSystem',
	            fields: ['UserName']
	          }
	        }, {
	          name: 'Logon Domain',
	          wmi: {
	            source: 'Win32_ComputerSystem',
	            fields: ['Domain']
	          }
	        }, {
	          name: 'Date / Time',
	          targets: ['temporary'],
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['LocalDateTime']
	          },
	          format: function format(_ref) {
	            var LocalDateTime = _ref.LocalDateTime;

	            return parseWinDate(LocalDateTime).toString();
	          }
	        }]
	      }, {
	        name: 'Temperature',
	        fields: [{
	          name: 'CPU Temperature',
	          targets: ['temporary'],
	          wmi: {
	            source: 'ROOT\\OpenHardwareMonitor:Sensor',
	            fields: ['Value', 'Identifier'],
	            filter: function filter(_ref2) {
	              var Identifier = _ref2.Identifier;

	              return (/\/(intel|amd|generic)cpu\/.*?\/temperature\/.*?/.test(Identifier)
	              );
	            }
	          },
	          format: function format(_ref3) {
	            var Value = _ref3.Value;

	            var formatedValue = Math.ceil(Value);
	            if (formatedValue >= 0) {
	              return formatedValue + ' °C';
	            } else {
	              return null;
	            }
	          }
	        }, {
	          name: 'GPU Temperature',
	          targets: ['temporary'],
	          wmi: {
	            source: 'ROOT\\OpenHardwareMonitor:Sensor',
	            fields: ['Value', 'Name', 'SensorType'],
	            filter: function filter(_ref4) {
	              var Name = _ref4.Name;
	              var SensorType = _ref4.SensorType;

	              return Name.indexOf('GPU') === 0 && SensorType === 'Temperature';
	            }
	          },
	          format: function format(_ref5) {
	            var Value = _ref5.Value;

	            var formatedValue = Math.ceil(Value);
	            if (formatedValue >= 0) {
	              return formatedValue + ' °C';
	            } else {
	              return null;
	            }
	          }
	        }, {
	          name: 'Motherboard Temperature',
	          targets: ['temporary'],
	          wmi: {
	            source: 'ROOT\\OpenHardwareMonitor:Sensor',
	            fields: ['Value', 'Name', 'SensorType'],
	            filter: function filter(_ref6) {
	              var Name = _ref6.Name;
	              var SensorType = _ref6.SensorType;

	              return Name.indexOf('System') === 0 && SensorType === 'Temperature';
	            }
	          },
	          format: function format(_ref7) {
	            var Value = _ref7.Value;

	            var formatedValue = Math.ceil(Value);
	            if (formatedValue >= 0) {
	              return formatedValue + ' °C';
	            } else {
	              return null;
	            }
	          }
	        }, {
	          name: 'HDD Temperature',
	          targets: ['temporary'],
	          wmi: {
	            source: 'ROOT\\OpenHardwareMonitor:Sensor',
	            fields: ['Value', 'Name', 'SensorType'],
	            filter: function filter(_ref8) {
	              var Name = _ref8.Name;
	              var SensorType = _ref8.SensorType;

	              return Name.indexOf('Temperature') === 0 && SensorType === 'Temperature';
	            }
	          },
	          format: function format(_ref9) {
	            var Value = _ref9.Value;

	            var formatedValue = Math.ceil(Value);
	            if (formatedValue >= 0) {
	              return formatedValue + ' °C';
	            } else {
	              return null;
	            }
	          }
	        }]
	      }, {
	        name: 'Motherboard',
	        fields: [{
	          name: 'CPU Type',
	          wmi: {
	            source: 'Win32_Processor',
	            fields: ['Name', 'MaxClockSpeed']
	          },
	          format: function format(_ref10) {
	            var Name = _ref10.Name;
	            var MaxClockSpeed = _ref10.MaxClockSpeed;

	            return Name + ', ' + MaxClockSpeed + ' MHz';
	          }
	        }, {
	          name: 'Motherboard Name',
	          wmi: {
	            source: 'Win32_BaseBoard',
	            fields: ['Name']
	          }
	        }, {
	          name: 'System Memory',
	          wmi: {
	            source: 'Win32_ComputerSystem',
	            fields: ['TotalPhysicalMemory']
	          },
	          format: function format(_ref11) {
	            var TotalPhysicalMemory = _ref11.TotalPhysicalMemory;

	            return Math.ceil(parseFloat(TotalPhysicalMemory) / 1024 / 1024) + ' MB';
	          }
	        }, {
	          name: 'BIOS Type',
	          wmi: {
	            source: 'Win32_BIOS',
	            fields: ['SMBIOSBIOSVersion', 'ReleaseDate']
	          },
	          format: function format(_ref12) {
	            var Manufacturer = _ref12.Manufacturer;
	            var SMBIOSBIOSVersion = _ref12.SMBIOSBIOSVersion;
	            var ReleaseDate = _ref12.ReleaseDate;

	            return SMBIOSBIOSVersion + ' (' + [ReleaseDate.slice(0, 4), ReleaseDate.slice(4, 6), ReleaseDate.slice(6, 8)].join('.') + ')';
	          }
	        }]
	      }, {
	        name: 'Display',
	        fields: [{
	          name: 'Video Adapter',
	          targets: ['check'],
	          multi: true,
	          wmi: {
	            source: 'Win32_VideoController',
	            fields: ['Name', 'AdapterRAM', 'ConfigManagerErrorCode']
	          },
	          format: function format(_ref13) {
	            var Name = _ref13.Name;
	            var AdapterRAM = _ref13.AdapterRAM;
	            var ConfigManagerErrorCode = _ref13.ConfigManagerErrorCode;

	            var res = Name;
	            if (AdapterRAM > 0) res += ' (' + Math.ceil(parseFloat(AdapterRAM) / 1024 / 1024) + ' MB)';
	            if (ConfigManagerErrorCode) res += ' (Status: ERROR)';
	            return res;
	          }
	        }, {
	          name: 'Monitor',
	          multi: true,
	          wmi: {
	            source: 'Win32_DesktopMonitor',
	            fields: ['Name', 'MonitorType']
	          },
	          format: function format(_ref14) {
	            var Name = _ref14.Name;
	            var MonitorType = _ref14.MonitorType;

	            return MonitorType + ' ' + Name;
	          }
	        }]
	      }, {
	        name: 'Multimedia',
	        fields: [{
	          name: 'Audio Adapter',
	          targets: ['check'],
	          multi: true,
	          wmi: {
	            source: 'Win32_SoundDevice',
	            fields: ['Name', 'ConfigManagerErrorCode']
	          },
	          format: function format(_ref15) {
	            var Name = _ref15.Name;
	            var ConfigManagerErrorCode = _ref15.ConfigManagerErrorCode;

	            var res = Name;
	            if (ConfigManagerErrorCode) res += ' (Status: ERROR)';
	            return res;
	          }
	        }]
	      }, {
	        name: 'Storage',
	        fields: [{
	          name: 'IDE Controller',
	          multi: true,
	          wmi: {
	            source: 'Win32_IDEController',
	            fields: ['Caption']
	          }
	        }, {
	          name: 'Disk Drive',
	          multi: true,
	          wmi: {
	            source: 'Win32_DiskDrive',
	            fields: ['Caption', 'Status']
	          },
	          format: function format(_ref16) {
	            var Caption = _ref16.Caption;
	            var Status = _ref16.Status;

	            return Caption + ' (SMART ' + Status + ')';
	          }
	        }, {
	          name: 'Optical Drive',
	          multi: true,
	          wmi: {
	            source: 'Win32_CDROMDrive',
	            fields: ['Caption']
	          }
	        }]
	      }, {
	        name: 'Partitions',
	        fields: [{
	          name: 'Partition',
	          multi: true,
	          wmi: {
	            source: 'Win32_LogicalDisk',
	            fields: ['Name', 'FileSystem', 'Size', 'FreeSpace']
	          },
	          format: function format(_ref17) {
	            var Name = _ref17.Name;
	            var FileSystem = _ref17.FileSystem;
	            var Size = _ref17.Size;
	            var FreeSpace = _ref17.FreeSpace;

	            return Name + ' (' + FileSystem + ') ' + Math.ceil(parseFloat(Size) / 1024 / 1024 / 1024 * 100) / 100 + ' GB (' + Math.ceil(parseFloat(FreeSpace) / 1024 / 1024 / 1024 * 100) / 100 + ' GB free)';
	          }
	        }]
	      }, {
	        name: 'Input',
	        fields: [{
	          name: 'Keyboard',
	          multi: true,
	          wmi: {
	            source: 'Win32_Keyboard',
	            fields: ['Description']
	          }
	        }, {
	          name: 'Mouse',
	          multi: true,
	          wmi: {
	            source: 'Win32_PointingDevice',
	            fields: ['Description']
	          }
	        }]
	      }, {
	        name: 'Network',
	        fields: [{
	          name: 'Network Adapter',
	          targets: ['check'],
	          multi: true,
	          wmi: {
	            source: 'Win32_NetworkAdapter',
	            fields: ['Description', 'MACAddress', 'PhysicalAdapter', 'ConfigManagerErrorCode'],
	            filter: function filter(_ref18) {
	              var PhysicalAdapter = _ref18.PhysicalAdapter;

	              return PhysicalAdapter !== false;
	            }
	          },
	          format: function format(_ref19) {
	            var Description = _ref19.Description;
	            var MACAddress = _ref19.MACAddress;
	            var ConfigManagerErrorCode = _ref19.ConfigManagerErrorCode;

	            var res = Description;
	            if (MACAddress) res += ' (MAC ' + MACAddress + ')';
	            if (ConfigManagerErrorCode && ConfigManagerErrorCode !== 22) res += ' (Status: ERROR)';
	            return res;
	          }
	        }]
	      }, {
	        name: 'Peripherals',
	        fields: [{
	          name: 'Printer',
	          multi: true,
	          wmi: {
	            source: 'Win32_Printer',
	            fields: ['Name']
	          }
	        }, {
	          name: 'USB Controller',
	          multi: true,
	          wmi: {
	            source: 'Win32_USBController',
	            fields: ['Name']
	          }
	        }, {
	          name: 'Battery',
	          multi: true,
	          wmi: {
	            source: 'Win32_Battery',
	            fields: ['Name']
	          }
	        }]
	      }, {
	        name: 'DMI',
	        fields: [{
	          name: 'DMI BIOS Vendor',
	          wmi: {
	            source: 'Win32_BIOS',
	            fields: ['Manufacturer']
	          }
	        }, {
	          name: 'DMI BIOS Version',
	          wmi: {
	            source: 'Win32_BIOS',
	            fields: ['SMBIOSBIOSVersion']
	          }
	        }, {
	          name: 'DMI System Manufacturer',
	          wmi: {
	            source: 'Win32_ComputerSystemProduct',
	            fields: ['Vendor']
	          }
	        }, {
	          name: 'DMI System Product',
	          wmi: {
	            source: 'Win32_ComputerSystemProduct',
	            fields: ['Name']
	          }
	        }, {
	          name: 'DMI System Version',
	          wmi: {
	            source: 'Win32_ComputerSystemProduct',
	            fields: ['Version']
	          }
	        }, {
	          name: 'DMI System Serial Number',
	          wmi: {
	            source: 'Win32_ComputerSystemProduct',
	            fields: ['IdentifyingNumber']
	          }
	        }, {
	          name: 'DMI System UUID',
	          wmi: {
	            source: 'Win32_ComputerSystemProduct',
	            fields: ['UUID']
	          }
	        }, {
	          name: 'DMI Motherboard Manufacturer',
	          wmi: {
	            source: 'Win32_Baseboard',
	            fields: ['Manufacturer']
	          }
	        }, {
	          name: 'DMI Motherboard Product',
	          wmi: {
	            source: 'Win32_Baseboard',
	            fields: ['Product']
	          }
	        }, {
	          name: 'DMI Motherboard Version',
	          wmi: {
	            source: 'Win32_Baseboard',
	            fields: ['Version']
	          }
	        }, {
	          name: 'DMI Motherboard Serial Number',
	          wmi: {
	            source: 'Win32_Baseboard',
	            fields: ['SerialNumber']
	          }
	        }, {
	          name: 'DMI Chassis Manufacturer',
	          wmi: {
	            source: 'Win32_SystemEnclosure',
	            fields: ['Manufacturer']
	          }
	        }, {
	          name: 'DMI Chassis Version',
	          wmi: {
	            source: 'Win32_SystemEnclosure',
	            fields: ['Version']
	          }
	        }, {
	          name: 'DMI Chassis Serial Number',
	          wmi: {
	            source: 'Win32_SystemEnclosure',
	            fields: ['SerialNumber']
	          }
	        }, {
	          name: 'DMI Chassis Asset Tag',
	          wmi: {
	            source: 'Win32_SystemEnclosure',
	            fields: ['SMBIOSAssetTag']
	          }
	        }, {
	          name: 'DMI Chassis Type',
	          wmi: {
	            source: 'Win32_SystemEnclosure',
	            fields: ['ChassisTypes']
	          },
	          format: function format(_ref20) {
	            var ChassisTypes = _ref20.ChassisTypes;

	            if (ChassisTypes) {
	              switch (ChassisTypes[0]) {
	                case 1:
	                  return 'Other';
	                case 2:
	                  return 'Unknown';
	                case 3:
	                  return 'Desktop';
	                case 4:
	                  return 'Low Profile Desktop';
	                case 5:
	                  return 'Pizza Box';
	                case 6:
	                  return 'Mini Tower';
	                case 7:
	                  return 'Tower';
	                case 8:
	                  return 'Portable';
	                case 9:
	                  return 'Laptop';
	                case 10:
	                  return 'Notebook';
	                case 11:
	                  return 'Hand Held';
	                case 12:
	                  return 'Docking Station';
	                case 13:
	                  return 'All in One';
	                case 14:
	                  return 'Sub Notebook';
	                case 15:
	                  return 'Space-Saving';
	                case 16:
	                  return 'Lunch Box';
	                case 17:
	                  return 'Main System Chassis';
	                case 18:
	                  return 'Expansion Chassis';
	                case 19:
	                  return 'SubChassis';
	                case 20:
	                  return 'Bus Expansion Chassis';
	                case 21:
	                  return 'Peripheral Chassis';
	                case 22:
	                  return 'Storage Chassis';
	                case 23:
	                  return 'Rack Mount Chassis';
	                case 24:
	                  return 'Sealed-Case PC';
	              }
	            }
	            return '';
	          }
	        }]
	      }]
	    },
	    'Power Management': {
	      type: 'object',
	      targets: ['diagnostics', 'dashboard'],
	      groups: [{
	        name: 'Power Management Properties',
	        fields: [{
	          name: 'Current Power Source',
	          targets: ['temporary'],
	          wmi: {
	            source: 'ROOT\\wmi:BatteryStatus',
	            fields: ['PowerOnline']
	          },
	          format: function format(_ref21) {
	            var PowerOnline = _ref21.PowerOnline;

	            return PowerOnline === false ? 'Battery' : 'AC Line';
	          }
	        }, {
	          name: 'Battery Status',
	          targets: ['temporary'],
	          wmi: {
	            source: 'Win32_Battery',
	            fields: ['EstimatedChargeRemaining', 'BatteryStatus']
	          },
	          format: function format(_ref22) {
	            var EstimatedChargeRemaining = _ref22.EstimatedChargeRemaining;
	            var BatteryStatus = _ref22.BatteryStatus;

	            var res = EstimatedChargeRemaining + '%';
	            switch (BatteryStatus) {
	              case 1:
	                return res + ' (Other)';
	              case 2:
	                return res + ' (Unknown)';
	              case 3:
	                return res + ' (Fully Charged)';
	              case 4:
	                return res + ' (Low)';
	              case 5:
	                return res + ' (Critical)';
	              case 6:
	                return res + ' (Charging)';
	              case 7:
	                return res + ' (Charging and High)';
	              case 8:
	                return res + ' (Charging and Low)';
	              case 9:
	                return res + ' (Charging and Critical)';
	              case 10:
	                return res + ' (Undefined)';
	              case 11:
	                return res + ' (Partially Charged)';
	            }
	            return res;
	          }
	        }, {
	          name: 'Remaining Battery Lifetime',
	          targets: ['temporary'],
	          wmi: {
	            source: 'Win32_Battery',
	            fields: ['EstimatedRunTime']
	          },
	          format: function format(_ref23) {
	            var EstimatedRunTime = _ref23.EstimatedRunTime;

	            if (parseInt(EstimatedRunTime, 10) > 7200) {
	              return 'Unknown';
	            }
	            return EstimatedRunTime + ' minutes';
	          }
	        }]
	      }, {
	        name: 'Battery Properties',
	        fields: [{
	          name: 'Device Name',
	          wmi: {
	            source: 'Win32_Battery',
	            fields: ['Name']
	          }
	        }, {
	          name: 'Manufacturer',
	          wmi: {
	            source: 'Win32_PortableBattery',
	            fields: ['Manufacturer']
	          }
	        }, {
	          name: 'Unique ID',
	          wmi: {
	            source: 'Win32_Battery',
	            fields: ['DeviceID']
	          }
	        }, {
	          name: 'Battery Type',
	          wmi: {
	            source: 'Win32_Battery',
	            fields: ['Chemistry']
	          },
	          format: function format(_ref24) {
	            var Chemistry = _ref24.Chemistry;

	            switch (Chemistry) {
	              case 1:
	                return 'Other';
	              case 2:
	                return 'Unknown';
	              case 3:
	                return 'Lead Acid';
	              case 4:
	                return 'Nickel Cadmium';
	              case 5:
	                return 'Nickel Metal Hydride';
	              case 6:
	                return 'Lithium-ion';
	              case 7:
	                return 'Zinc air';
	              case 8:
	                return 'Lithium Polymer';
	            }
	            return '';
	          }
	        }, {
	          name: 'Designed Capacity',
	          wmi: {
	            source: 'ROOT\\wmi:BatteryStaticData',
	            fields: ['DesignedCapacity']
	          },
	          format: function format(_ref25) {
	            var DesignedCapacity = _ref25.DesignedCapacity;

	            return DesignedCapacity + ' mWh';
	          }
	        }, {
	          name: 'Fully Charged Capacity',
	          wmi: {
	            source: 'ROOT\\wmi:BatteryFullChargedCapacity',
	            fields: ['FullChargedCapacity']
	          },
	          format: function format(_ref26) {
	            var FullChargedCapacity = _ref26.FullChargedCapacity;

	            return FullChargedCapacity + ' mWh';
	          }
	        }, {
	          name: 'Current Capacity',
	          targets: ['temporary'],
	          wmi: {
	            source: 'ROOT\\wmi:BatteryStatus',
	            fields: ['RemainingCapacity']
	          },
	          format: function format(_ref27) {
	            var RemainingCapacity = _ref27.RemainingCapacity;

	            return RemainingCapacity + ' mWh';
	          }
	        }, {
	          name: 'Battery Voltage',
	          wmi: {
	            source: 'ROOT\\wmi:BatteryStatus',
	            fields: ['Voltage']
	          },
	          format: function format(_ref28) {
	            var Voltage = _ref28.Voltage;

	            return parseInt(Voltage, 10) / 1000 + ' V';
	          }
	        }, {
	          name: 'Power State',
	          wmi: {
	            source: 'ROOT\\wmi:BatteryStatus',
	            fields: ['PowerOnline', 'Charging', 'Discharging']
	          },
	          format: function format(_ref29) {
	            var PowerOnline = _ref29.PowerOnline;
	            var Charging = _ref29.Charging;
	            var Discharging = _ref29.Discharging;

	            var res = [];
	            if (PowerOnline) res.push('AC Line');
	            if (Charging) res.push('Charging');
	            if (Discharging) res.push('Discharging');
	            return res.join(', ');
	          }
	        }]
	      }]
	    }
	  },
	  'Operating System': {
	    'Operating System': {
	      type: 'object',
	      targets: ['diagnostics', 'dashboard'],
	      groups: [{
	        name: 'Operating System Properties',
	        fields: [{
	          name: 'OS Name',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['Caption']
	          }
	        }, {
	          name: 'OS Language',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['MUILanguages']
	          },
	          format: function format(_ref30) {
	            var MUILanguages = _ref30.MUILanguages;

	            return MUILanguages.join(',');
	          }
	        }, {
	          name: 'OS Kernel Type',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['BuildType', 'OSArchitecture']
	          },
	          format: function format(_ref31) {
	            var BuildType = _ref31.BuildType;
	            var OSArchitecture = _ref31.OSArchitecture;

	            return BuildType + ' (' + OSArchitecture + ')';
	          }
	        }, {
	          name: 'OS Version',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['Version']
	          }
	        }, {
	          name: 'OS Service Pack',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['CSDVersion']
	          }
	        }, {
	          name: 'OS Installation Date',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['InstallDate']
	          },
	          format: function format(_ref32) {
	            var InstallDate = _ref32.InstallDate;

	            return parseWinDate(InstallDate).toString();
	          }
	        }, {
	          name: 'OS Root',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['WindowsDirectory']
	          }
	        }]
	      }, {
	        name: 'License Information',
	        fields: [{
	          name: 'Registered Owner',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['RegisteredUser']
	          }
	        }, {
	          name: 'Registered Organization',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['Organization']
	          }
	        }, {
	          name: 'Product ID',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['SerialNumber']
	          }
	        }]
	      }, {
	        name: 'Current Session',
	        fields: [{
	          name: 'Computer Name',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['CSName']
	          }
	        }, {
	          name: 'User Name',
	          wmi: {
	            source: 'Win32_ComputerSystem',
	            fields: ['UserName']
	          }
	        }, {
	          name: 'Logon Domain',
	          wmi: {
	            source: 'Win32_ComputerSystem',
	            fields: ['Domain']
	          }
	        }, {
	          name: 'UpTime',
	          targets: ['temporary'],
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['LastBootUpTime', 'LocalDateTime']
	          },
	          format: function format(_ref33) {
	            var LastBootUpTime = _ref33.LastBootUpTime;
	            var LocalDateTime = _ref33.LocalDateTime;

	            var total = Math.ceil((parseWinDate(LocalDateTime) - parseWinDate(LastBootUpTime)) / 1000);
	            var days = Math.floor(total / (24 * 60 * 60));
	            var hours = Math.floor((total - days * (24 * 60 * 60)) / (60 * 60));
	            var minutes = Math.floor((total - days * (24 * 60 * 60) - hours * (60 * 60)) / 60);
	            var seconds = total - days * (24 * 60 * 60) - hours * (60 * 60) - minutes * 60;
	            return total + ' sec (' + days + ' d, ' + hours + ' h, ' + minutes + ' m, ' + seconds + ' s)';
	          }
	        }]
	      }]
	    },
	    Processes: {
	      type: 'array',
	      targets: [],
	      wmi: {
	        source: 'Win32_Process',
	        fields: [{
	          name: 'Process Name',
	          field: 'Caption'
	        }, {
	          name: 'Process File Name',
	          field: 'ExecutablePath'
	        }, {
	          name: 'Used Memory',
	          field: 'WorkingSetSize',
	          format: function format(v) {
	            return Math.ceil(parseFloat(v) / 1024) + ' KB';
	          }
	        }, {
	          name: 'Used Swap',
	          field: 'VirtualSize',
	          format: function format(v) {
	            return Math.ceil(parseFloat(v) / 1024) + ' KB';
	          }
	        }]
	      }
	    },
	    Services: {
	      type: 'array',
	      targets: [],
	      wmi: {
	        source: 'Win32_Service',
	        fields: [{
	          name: 'Service Name',
	          field: 'Name'
	        }, {
	          name: 'Service Description',
	          field: 'Description'
	        }, {
	          name: 'Path Name',
	          field: 'PathName'
	        }, {
	          name: 'Type',
	          field: 'ServiceType'
	        }, {
	          name: 'State',
	          field: 'State'
	        }, {
	          name: 'Account',
	          field: 'StartName'
	        }]
	      }
	    },
	    UpTime: {
	      type: 'object',
	      targets: ['diagnostics', 'dashboard'],
	      groups: [{
	        name: 'Current Session',
	        fields: [{
	          name: 'Last Boot Time',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['LastBootUpTime']
	          },
	          format: function format(_ref34) {
	            var LastBootUpTime = _ref34.LastBootUpTime;

	            return parseWinDate(LastBootUpTime).toString();
	          }
	        }, {
	          name: 'Current Time',
	          targets: ['temporary'],
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['LocalDateTime']
	          },
	          format: function format(_ref35) {
	            var LocalDateTime = _ref35.LocalDateTime;

	            return parseWinDate(LocalDateTime).toString();
	          }
	        }, {
	          name: 'UpTime',
	          targets: ['temporary'],
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['LastBootUpTime', 'LocalDateTime']
	          },
	          format: function format(_ref36) {
	            var LastBootUpTime = _ref36.LastBootUpTime;
	            var LocalDateTime = _ref36.LocalDateTime;

	            var total = Math.ceil((parseWinDate(LocalDateTime) - parseWinDate(LastBootUpTime)) / 1000);
	            var days = Math.floor(total / (24 * 60 * 60));
	            var hours = Math.floor((total - days * (24 * 60 * 60)) / (60 * 60));
	            var minutes = Math.floor((total - days * (24 * 60 * 60) - hours * (60 * 60)) / 60);
	            var seconds = total - days * (24 * 60 * 60) - hours * (60 * 60) - minutes * 60;
	            return total + ' sec (' + days + ' d, ' + hours + ' h, ' + minutes + ' m, ' + seconds + ' s)';
	          }
	        }]
	      }]
	    }
	  },
	  Display: {
	    'Windows Video': {
	      type: 'array',
	      targets: ['diagnostics', 'dashboard'],
	      wmi: {
	        source: 'Win32_VideoController',
	        fields: [{
	          name: 'Description',
	          field: 'Description'
	        }, {
	          name: 'Memory Size',
	          field: 'AdapterRAM',
	          format: function format(v) {
	            if (v >= 0) {
	              return Math.ceil(parseFloat(v) / 1024 / 1024) + ' MB';
	            } else {
	              return null;
	            }
	          }
	        }, {
	          name: 'Video Mode',
	          field: 'VideoModeDescription'
	        }, {
	          name: 'Driver Name',
	          field: 'infSection'
	        }, {
	          name: 'Driver Version',
	          field: 'DriverVersion'
	        }, {
	          name: 'Driver Date',
	          field: 'DriverDate',
	          format: function format(v) {
	            return parseWinDate(v).toString();
	          }
	        }, {
	          name: 'Status',
	          field: 'Status'
	        }]
	      }
	    },
	    'Monitor': {
	      type: 'array',
	      targets: ['diagnostics', 'dashboard'],
	      wmi: {
	        source: 'Win32_DesktopMonitor',
	        fields: [{
	          name: 'Monitor Name',
	          field: 'Description'
	        }, {
	          name: 'Monitor ID',
	          field: 'DeviceID'
	        }, {
	          name: 'Manufacturer',
	          field: 'MonitorManufacturer'
	        }, {
	          name: 'Monitor Type',
	          field: 'MonitorType'
	        }, {
	          name: 'Status',
	          field: 'Status'
	        }, {
	          name: 'Screen Height',
	          field: 'ScreenHeight'
	        }, {
	          name: 'Screen Width',
	          field: 'ScreenWidth'
	        }]
	      }
	    }
	  },
	  Multimedia: {
	    'Windows Audio': {
	      type: 'array',
	      targets: ['diagnostics', 'dashboard'],
	      wmi: {
	        source: 'Win32_SoundDevice',
	        fields: [{
	          name: 'Description',
	          field: 'Description'
	        }, {
	          name: 'Manufacturer',
	          field: 'Manufacturer'
	        }, {
	          name: 'Status',
	          field: 'Status'
	        }]
	      }
	    }
	  },
	  Software: {
	    'Installed Software': {
	      type: 'array',
	      targets: ['soft'],
	      reg: {
	        source: _os.is64 ? ['HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\', 'HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\', 'HKLM64\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\', 'HKCU64\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\'] : ['HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\', 'HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\'],
	        fields: [{
	          name: 'Program',
	          field: 'DisplayName'
	        }, {
	          name: 'Version',
	          field: 'DisplayVersion'
	        }, {
	          name: 'Publisher',
	          field: 'Publisher'
	        }, {
	          name: 'Install Date',
	          field: 'InstallDate'
	        }, {
	          name: 'Location',
	          field: 'InstallLocation'
	        }, {
	          name: 'Icon',
	          field: 'DisplayIcon'
	        }, {
	          name: 'Uninstaller',
	          field: 'UninstallString'
	        }, {
	          name: 'Registry Path',
	          field: 'RegPath'
	        }],
	        filter: function filter(_ref37) {
	          var Program = _ref37.Program;

	          return Program;
	        }
	      }
	    }
	  },
	  Security: {
	    'Windows Security': {
	      type: 'object',
	      targets: ['diagnostics', 'dashboard'],
	      groups: [{
	        name: 'Operating System Properties',
	        fields: [{
	          name: 'OS Name',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['Caption']
	          }
	        }, {
	          name: 'OS Service Pack',
	          wmi: {
	            source: 'Win32_OperatingSystem',
	            fields: ['CSDVersion']
	          }
	        }, {
	          name: 'Winlogon Shell',
	          reg: {
	            source: 'HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell'
	          }
	        }, {
	          name: 'User Account Control (UAC)',
	          reg: {
	            source: 'HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA'
	          },
	          format: function format(v) {
	            if (v === 0) return 'Disabled';
	            if (v === 1) return 'Enabled';
	            return '';
	          }
	        }, {
	          name: 'System Restore',
	          reg: {
	            source: _os.OSVersion < 6 ? 'HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\\DisableSR' : 'HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\\RPSessionInterval'
	          },
	          format: function format(v) {
	            if (_os.OSVersion < 6) return v ? 'Disabled' : 'Enabled';
	            return v ? 'Enabled' : 'Disabled';
	          }
	        }]
	      }]
	    },
	    'Anti-Virus': {
	      type: 'array',
	      targets: ['diagnostics', 'dashboard'],
	      wmi: {
	        source: _os.OSVersion < 6 ? 'ROOT\\SecurityCenter:AntiVirusProduct' : 'ROOT\\SecurityCenter2:AntiVirusProduct',
	        fields: [{
	          name: 'Name',
	          field: 'displayName'
	        }, {
	          name: 'Active',
	          field: _os.OSVersion < 6 ? 'onAccessScanningEnabled' : 'productState',
	          format: function format(v) {
	            if (_os.OSVersion < 6) return v !== 'false';
	            var state = parseInt(v, 10).toString(16);
	            state = state.substring(state.length - 4, state.length - 2) ? 'Yes' : 'No';
	            return state === '10' || state === '11' ? 'Yes' : 'No';
	          }
	        }, {
	          name: 'UpToDate',
	          field: _os.OSVersion < 6 ? 'productUptoDate' : 'productState',
	          format: function format(v) {
	            if (_os.OSVersion < 6) return v !== 'false';
	            var state = parseInt(v, 10).toString(16);
	            state = state.substring(state.length - 2, state.length);
	            return state === '00' ? 'Yes' : 'No';
	          }
	        }]
	      }
	    },
	    'Firewall': {
	      type: 'array',
	      targets: ['diagnostics', 'dashboard'],
	      wmi: {
	        source: _os.OSVersion < 6 ? 'ROOT\\SecurityCenter:FirewallProduct' : 'ROOT\\SecurityCenter2:FirewallProduct',
	        fields: [{
	          name: 'Name',
	          field: 'displayName'
	        }, {
	          name: 'Active',
	          field: _os.OSVersion < 6 ? 'enabled' : 'productState',
	          format: function format(v) {
	            if (_os.OSVersion < 6) return v !== 'false';
	            var state = parseInt(v, 10).toString(16);
	            state = state.substring(state.length - 4, state.length - 2);
	            return state === '10' || state === '11' ? 'Yes' : 'No';
	          }
	        }]
	      }
	    },
	    'Anti-Spyware': {
	      type: 'array',
	      targets: ['diagnostics', 'dashboard'],
	      wmi: {
	        source: _os.OSVersion < 6 ? 'ROOT\\SecurityCenter:AntiSpywareProduct' : 'ROOT\\SecurityCenter2:AntiSpywareProduct',
	        fields: [{
	          name: 'Name',
	          field: 'displayName'
	        }, {
	          name: 'Active',
	          field: _os.OSVersion < 6 ? 'productEnabled' : 'productState',
	          format: function format(v) {
	            if (_os.OSVersion < 6) return v !== 'false';
	            var state = parseInt(v, 10).toString(16);
	            state = state.substring(state.length - 4, state.length - 2);
	            return state === '10' || state === '11' ? 'Yes' : 'No';
	          }
	        }, {
	          name: 'UpToDate',
	          field: _os.OSVersion < 6 ? 'productUptoDate' : 'productState',
	          format: function format(v) {
	            if (_os.OSVersion < 6) return v !== 'false';
	            var state = parseInt(v, 10).toString(16);
	            state = state.substring(state.length - 2, state.length);
	            return state === '00' ? 'Yes' : 'No';
	          }
	        }]
	      }
	    }
	  }
	};
	module.exports = exports['default'];

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _wmi = __webpack_require__(3);

	var _systemWmiRegistry = __webpack_require__(49);

	var _diagnosticsMap = __webpack_require__(127);

	var _diagnosticsMap2 = _interopRequireDefault(_diagnosticsMap);

	var collectWMIQueries = function collectWMIQueries(diagMap) {
	  var res = {};
	  Object.keys(diagMap).forEach(function (section) {
	    Object.entries(diagMap[section]).forEach(function (_ref) {
	      var subsection = _ref[0];
	      var svalue = _ref[1];

	      switch (svalue.type) {
	        case 'object':
	          svalue.groups.forEach(function (group) {
	            group.fields.forEach(function (field) {
	              if (field.wmi) {
	                if (!res[field.wmi.source]) res[field.wmi.source] = [];
	                field.wmi.fields.forEach(function (f) {
	                  if (res[field.wmi.source].indexOf(f) === -1) res[field.wmi.source].push(f);
	                });
	              }
	            });
	          });
	          break;
	        case 'array':
	          if (svalue.wmi) {
	            if (!res[svalue.wmi.source]) res[svalue.wmi.source] = [];
	            svalue.wmi.fields.forEach(function (field) {
	              if (res[svalue.wmi.source].indexOf(field.field) === -1) res[svalue.wmi.source].push(field.field);
	            });
	          }
	          break;
	      }
	    });
	  });
	  return res;
	};

	var cacheWMI = function cacheWMI(diagMap) {
	  var wmis = {};
	  var res = {};
	  Object.entries(collectWMIQueries(diagMap)).forEach(function (_ref2) {
	    var source = _ref2[0];
	    var fields = _ref2[1];

	    var parts = source.split(':');
	    if (parts.length === 2) {
	      if (!wmis[parts[0]]) {
	        try {
	          /* global ActiveXObject */
	          wmis[parts[0]] = new ActiveXObject('WbemScripting.SWbemLocator').ConnectServer(null, parts[0]);
	        } catch (e) {}
	      }
	      res[source] = _wmi.getWMIObjects(fields, parts[1], null, wmis[parts[0]]);
	    } else {
	      res[source] = _wmi.getWMIObjects(fields, parts[0]);
	    }
	  });
	  return res;
	};

	var filterDiagnosticsMap = function filterDiagnosticsMap(target) {
	  var res = {};
	  Object.keys(_diagnosticsMap2['default']).forEach(function (section) {
	    Object.entries(_diagnosticsMap2['default'][section]).forEach(function (_ref3) {
	      var subsection = _ref3[0];
	      var svalue = _ref3[1];

	      if (!target || !svalue.targets || svalue.targets.indexOf(target) !== -1) {
	        if (!res[section]) res[section] = {};
	        res[section][subsection] = svalue;
	      } else {
	        switch (svalue.type) {
	          case 'object':
	            var resGroups = [];
	            svalue.groups.forEach(function (group) {
	              var resFields = [];
	              group.fields.forEach(function (field) {
	                if (field.targets && field.targets.indexOf(target) !== -1) {
	                  resFields.push(field);
	                }
	              });
	              if (resFields.length) {
	                var resGroup = {
	                  name: group.name,
	                  fields: resFields
	                };
	                resGroups.push(resGroup);
	              }
	            });
	            if (resGroups.length) {
	              if (!res[section]) res[section] = {};
	              res[section][subsection] = {
	                type: 'object',
	                groups: resGroups
	              };
	            }
	            break;
	          case 'array':
	            ['wmi', 'reg'].forEach(function (src) {
	              if (svalue[src]) {
	                (function () {
	                  var resFields = [];
	                  svalue[src].fields.forEach(function (field) {
	                    if (field.targets && field.targets.indexOf(target) !== -1) {
	                      resFields.push(field);
	                    }
	                  });
	                  if (resFields.length) {
	                    if (!res[section]) res[section] = {};
	                    res[section][subsection] = {
	                      type: 'array'
	                    };
	                    res[section][subsection][src] = {
	                      source: svalue[src].source,
	                      fields: resFields
	                    };
	                  }
	                })();
	              }
	            });
	            break;
	        }
	      }
	    });
	  });
	  return res;
	};

	exports['default'] = function (target) {
	  var res = {};
	  var diagMap = filterDiagnosticsMap(target);
	  var cache = cacheWMI(diagMap);
	  Object.keys(diagMap).forEach(function (section) {
	    res[section] = {};
	    Object.entries(diagMap[section]).forEach(function (_ref4) {
	      var subsection = _ref4[0];
	      var svalue = _ref4[1];

	      res[section][subsection] = {};
	      switch (svalue.type) {
	        case 'object':
	          {
	            svalue.groups.forEach(function (group) {
	              svalue[group.name] = {};
	              var sres = svalue[group.name];
	              group.fields.forEach(function (field) {
	                try {
	                  if (field.wmi) {
	                    var wmiRes = cache[field.wmi.source];
	                    if (field.wmi.filter) {
	                      wmiRes = wmiRes.filter(field.wmi.filter);
	                    }
	                    if (field.format) {
	                      wmiRes = wmiRes.map(field.format);
	                    } else {
	                      wmiRes = wmiRes.map(function (v) {
	                        return v[field.wmi.fields[0]];
	                      });
	                    }
	                    if (field.multi) {
	                      sres[field.name] = wmiRes;
	                    } else {
	                      sres[field.name] = wmiRes ? wmiRes[0] : '';
	                    }
	                  } else if (field.reg) {
	                    var _field$reg$source$split = field.reg.source.split('\\');

	                    var sect = _field$reg$source$split[0];

	                    var path = _field$reg$source$split.slice(1);

	                    var key = path.splice(-1);
	                    path = path.join('\\');
	                    var wmiReg = _systemWmiRegistry.wmiRegistry;
	                    if (sect.endsWith('64')) {
	                      sect = sect.slice(0, -2);
	                      wmiReg = _systemWmiRegistry.wmiRegistry64;
	                    }
	                    var regRes = wmiReg.GetStringValue(wmiReg[sect], path, key);
	                    if (field.format) {
	                      sres[field.name] = field.format(regRes);
	                    } else {
	                      sres[field.name] = regRes;
	                    }
	                  } else {
	                    if (field.format) {
	                      sres[field.name] = field.format();
	                    } else {
	                      sres[field.name] = '';
	                    }
	                  }
	                  res[section][subsection][group.name] = sres;
	                } catch (e) {
	                  res[section][subsection][group.name] = '';
	                }
	              });
	            });
	            break;
	          }
	        case 'array':
	          {
	            try {
	              if (svalue.wmi) {
	                var wmiRes = cache[svalue.wmi.source];
	                if (svalue.wmi.filter) {
	                  wmiRes = wmiRes.filter(svalue.wmi.filter);
	                }
	                var outputArr = wmiRes.map(function (resItem) {
	                  var outputObj = {};
	                  svalue.wmi.fields.forEach(function (fieldsItem) {
	                    if (resItem[fieldsItem.field]) {
	                      var fieldVal = resItem[fieldsItem.field];
	                      if (fieldsItem.format) {
	                        fieldVal = fieldsItem.format(fieldVal);
	                      }
	                      outputObj[fieldsItem.name] = fieldVal;
	                    }
	                  });
	                  return outputObj;
	                });
	                res[section][subsection] = outputArr;
	              } else if (svalue.reg) {
	                (function () {
	                  var outputArr = [];
	                  var sourceArr = Array.isArray(svalue.reg.source) ? svalue.reg.source : [svalue.reg.source];
	                  sourceArr.forEach(function (source) {
	                    var _source$split = source.split('\\');

	                    var sect = _source$split[0];

	                    var path = _source$split.slice(1);

	                    path = path.join('\\');
	                    var wmiReg = _systemWmiRegistry.wmiRegistry;
	                    if (sect.endsWith('64')) {
	                      sect = sect.slice(0, -2);
	                      wmiReg = _systemWmiRegistry.wmiRegistry64;
	                    }
	                    var regRes = wmiReg.EnumKey(wmiReg[sect], path);
	                    regRes.forEach(function (regSection) {
	                      var outputObj = {};
	                      svalue.reg.fields.forEach(function (fieldsItem) {
	                        var fieldVal = undefined;
	                        if (fieldsItem.field === 'RegPath') {
	                          fieldVal = '' + source + regSection + '\\';
	                        } else {
	                          fieldVal = wmiReg.GetStringValue(wmiReg[sect], path + '\\' + regSection, fieldsItem.field);
	                        }
	                        if (fieldsItem.format) {
	                          fieldVal = fieldsItem.format(fieldVal);
	                        }
	                        outputObj[fieldsItem.name] = fieldVal;
	                      });
	                      outputArr.push(outputObj);
	                    });
	                  });
	                  outputArr = outputArr.filter(function (obj) {
	                    return Object.values(obj).some(function (v) {
	                      return !!v;
	                    });
	                  });
	                  if (svalue.reg.filter) {
	                    outputArr = outputArr.filter(svalue.reg.filter);
	                  }
	                  res[section][subsection] = outputArr;
	                })();
	              }
	            } catch (e) {
	              res[section][subsection] = [];
	            }
	            break;
	          }
	      }
	    });
	  });
	  return res;
	};

	module.exports = exports['default'];

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _systemFso = __webpack_require__(14);

	var _systemSpecialFolders = __webpack_require__(16);

	var _libIterate = __webpack_require__(28);

	var _libIterate2 = _interopRequireDefault(_libIterate);

	var parseClidsFile = function parseClidsFile(filePath, reg) {
	  var clids = [];
	  try {
	    var fStream = _systemFso.fso.OpenTextFile(filePath, 1);
	    while (!fStream.AtEndOfStream) {
	      var line = fStream.ReadLine();
	      var parsed = reg.exec(line);
	      if (parsed && parsed[1]) clids.push(parsed[1]);
	    }
	  } catch (e) {
	    return clids;
	  }
	  return clids;
	};

	exports['default'] = [{
	  title: 'Yandex',
	  nameReg: /^Yandex$|YandexBrowser/i,
	  getClids: function getClids() {
	    var clidsFilePath = _systemSpecialFolders.AppData + '\\Yandex\\clids-yabrowser.xml';
	    var reg = /vendor\s+name=['"](.*?)['"]/;
	    return parseClidsFile(clidsFilePath, reg);
	  },
	  clidsReg: /drpsu/i
	}, {
	  title: 'Opera',
	  nameReg: /Opera/i,
	  getClids: function getClids() {
	    var clids = [];
	    var reg = /['"]partner_id['"]\s*:\s*['"](.*?)['"]/;
	    var operaFolder = _systemSpecialFolders.ProgramFiles + '\\Opera';
	    try {
	      _libIterate2['default'](_systemFso.fso.GetFolder(operaFolder).SubFolders, function (subFolder) {
	        var regExp = /^\d+/;
	        if (regExp.test(subFolder.Name)) {
	          var clidsFilePath = operaFolder + '\\' + subFolder.Name + '\\resources\\tracking_user_agent.json';
	          clids = clids.concat(parseClidsFile(clidsFilePath, reg));
	        }
	      });
	    } catch (e) {
	      return clids;
	    }
	    return clids;
	  },
	  clidsReg: /Campaign\s+34/i
	}, {
	  title: 'Firefox',
	  nameReg: /Mozilla\s?Firefox/i
	}, {
	  title: 'WinRAR',
	  nameReg: /WinRAR/i
	}];
	module.exports = exports['default'];

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _systemHttp = __webpack_require__(35);

	var _logs = __webpack_require__(11);

	var eventsAPI = (function () {
	  eventsAPI.prototype.init = function init(_ref) {
	    var url = _ref.url;

	    this.eventsEndpoint = url;
	  };

	  function eventsAPI(parent) {
	    _classCallCheck(this, eventsAPI);

	    this.parent = parent;
	  }

	  eventsAPI.prototype.send = function send(event) {
	    var _this = this;

	    if (this.eventsEndpoint) {
	      return _systemHttp.httppost(this.eventsEndpoint, event, this.parent).then(function () {
	        _logs.log('[Events] [API] Send event to MongoDB API ' + _this.eventsEndpoint + ': ' + event.action, event);
	      }, function (err) {
	        _logs.log('[Events] [API] Failed to send event to MongoDB API ' + _this.eventsEndpoint + ': ' + event.action, err.response);
	      });
	    }
	  };

	  return eventsAPI;
	})();

	exports['default'] = eventsAPI;
	module.exports = exports['default'];

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _utils = __webpack_require__(29);

	var _systemFso = __webpack_require__(14);

	var FileStore = (function () {
	  function FileStore() {
	    _classCallCheck(this, FileStore);
	  }

	  FileStore.prototype.parseClientIdJs = function parseClientIdJs(text) {
	    var start = text.indexOf('"') + 1;
	    var end = text.indexOf('"', start);
	    var filename = text.substr(start, end - start);

	    var _ParseSFXName = _utils.ParseSFXName(filename);

	    var clientId = _ParseSFXName[0];

	    return clientId;
	  };

	  FileStore.prototype.get = function get(key) {
	    var file = 'tools\\modules\\' + key.toLowerCase() + '.js';
	    if (_systemFso.fso.FileExists(file)) {
	      var text = _systemFso.fso.GetFile(file);
	      if (text.Size > 0) {
	        var contents = text.OpenAsTextStream(1).ReadAll();
	        return this.parseClientIdJs(contents);
	      }
	    }
	  };

	  FileStore.prototype.set = function set() {};

	  return FileStore;
	})();

	exports['default'] = FileStore;
	module.exports = exports['default'];

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	var _bind = Function.prototype.bind;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _OnlineStatistics = __webpack_require__(46);

	var _OnlineStatistics2 = _interopRequireDefault(_OnlineStatistics);

	var _systemSpecialFolders = __webpack_require__(16);

	var _systemFso = __webpack_require__(14);

	var _systemLocalFiles = __webpack_require__(30);

	var _iterate = __webpack_require__(28);

	var _iterate2 = _interopRequireDefault(_iterate);

	var _logs = __webpack_require__(11);

	var readLine = function readLine(file) {
	  return JSON.parse(file.ReadLine());
	};

	var OfflineStore = (function () {
	  OfflineStore.getFilepath = function getFilepath() {
	    return _systemLocalFiles.ensurePath(_systemSpecialFolders.AppData + '\\DRPSu\\events');
	  };

	  OfflineStore.dispatchFile = function dispatchFile(_ref) {
	    var Path = _ref.Path;
	    var Name = _ref.Name;

	    _logs.log('[Statistics] [OfflineStore] Processing file: ' + Name);
	    var promises = [];
	    try {
	      var file = _systemFso.fso.OpenTextFile(Path, 1, false);

	      var _readLine = readLine(file);

	      var clientId = _readLine.clientId;
	      var computerId = _readLine.computerId;
	      var _constructor = _readLine.constructor;

	      var stat = new (_bind.apply(_OnlineStatistics2['default'], [null].concat(_constructor)))();
	      stat.init({ clientId: clientId, computerId: computerId, offline: true });
	      while (!file.AtEndOfStream) {
	        try {
	          var _readLine2 = readLine(file);

	          var _event2 = _readLine2.event;

	          promises.push(stat.event.apply(stat, _event2)['catch'](function () {
	            return null;
	          }));
	        } catch (err) {}
	      }
	      file.Close();
	    } catch (err) {}
	    return Promise.all(promises).then(function () {
	      _systemFso.fso.DeleteFile(Path, true);
	    })['catch'](function () {
	      return null;
	    });
	  };

	  OfflineStore.dispatch = function dispatch() {
	    var filepath = OfflineStore.getFilepath();
	    var folder = _systemFso.fso.GetFolder(filepath);
	    var promise = Promise.resolve();
	    _iterate2['default'](folder.Files, function (file) {
	      promise = promise.then(function () {
	        return OfflineStore.dispatchFile(file);
	      });
	    });
	    return promise;
	  };

	  function OfflineStore(_ref2) {
	    var options = _ref2.options;
	    var drpVersion = _ref2.drpVersion;
	    var lang = _ref2.lang;
	    var clientId = _ref2.clientId;
	    var computerId = _ref2.computerId;

	    _classCallCheck(this, OfflineStore);

	    var filename = this._name = ['e', Date.now(), options.category || 'drp'].join('-').replace(/[\s\.]/g, '-').toLowerCase();
	    var filepath = OfflineStore.getFilepath() + '\\' + filename;
	    this._file = _systemFso.fso.CreateTextFile(filepath, true);
	    this._save({
	      clientId: clientId,
	      computerId: computerId,
	      constructor: [options, drpVersion, lang]
	    });
	  }

	  OfflineStore.prototype.event = function event(_event) {
	    var dimensions = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
	    var important = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

	    _logs.log('[Statistics] [OfflineStore] Send event: ' + _event.action, _event, dimensions);
	    this._save({ event: [_event, dimensions, important] });
	  };

	  OfflineStore.prototype._save = function _save(data) {
	    this._file.WriteLine(JSON.stringify(data));
	  };

	  return OfflineStore;
	})();

	exports['default'] = OfflineStore;
	module.exports = exports['default'];

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _systemRegistry = __webpack_require__(31);

	var RegistryStore = (function () {
	  function RegistryStore(Reg) {
	    _classCallCheck(this, RegistryStore);

	    this.Reg = Reg;
	  }

	  RegistryStore.prototype.getPath = function getPath(key) {
	    return this.Reg + key;
	  };

	  RegistryStore.prototype.get = function get(key) {
	    return _systemRegistry.RegRead(this.getPath(key));
	  };

	  RegistryStore.prototype.set = function set(key, clientId) {
	    _systemRegistry.RegWrite(this.getPath(key), clientId);
	  };

	  return RegistryStore;
	})();

	exports['default'] = RegistryStore;
	module.exports = exports['default'];

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _GoogleAnalytics = __webpack_require__(45);

	var _OnlineStatistics2 = __webpack_require__(46);

	var _OnlineStatistics3 = _interopRequireDefault(_OnlineStatistics2);

	var _OfflineStore = __webpack_require__(132);

	var _OfflineStore2 = _interopRequireDefault(_OfflineStore);

	var Statistics = (function (_OnlineStatistics) {
	  _inherits(Statistics, _OnlineStatistics);

	  function Statistics() {
	    _classCallCheck(this, Statistics);

	    _OnlineStatistics.apply(this, arguments);
	  }

	  Statistics.prototype.init = function init(opts) {
	    var _this = this;

	    _OnlineStatistics.prototype.init.call(this, opts);

	    this._initialized = this.checkConnection().then(function (isOnline) {
	      if (isOnline) {
	        return _OfflineStore2['default'].dispatch().then(function () {
	          return true;
	        });
	      } else {
	        _this._offlineStore = new _OfflineStore2['default'](_this);
	        return false;
	      }
	    });
	  };

	  Statistics.prototype.checkConnection = function checkConnection() {
	    return _GoogleAnalytics.sendUrl(_GoogleAnalytics.endpoint).then(function () {
	      return true;
	    }, function () {
	      return false;
	    });
	  };

	  Statistics.prototype.send = function send(event, dimensions, important) {
	    var _this2 = this;

	    return this._initialized.then(function (isOnline) {
	      if (!isOnline && _this2._offlineStore) {
	        _this2._offlineStore.event(event, dimensions, important);
	      } else {
	        return _OnlineStatistics.prototype.send.call(_this2, event, dimensions, important);
	      }
	    });
	  };

	  Statistics.prototype.sendOpenedEvent = function sendOpenedEvent() {
	    this.event({
	      action: 'application opened',
	      label: this.drpVersion
	    }, [], true);
	  };

	  return Statistics;
	})(_OnlineStatistics3['default']);

	exports['default'] = Statistics;
	module.exports = exports['default'];

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _logs = __webpack_require__(11);

	var loaded = false;

	var loadYaMetrika = function loadYaMetrika() {
	  if (!loaded) {
	    if (!window.yandex_metrika_callbacks) {
	      window.yandex_metrika_callbacks = [];
	    }
	    loaded = new Promise(function (resolve) {
	      window.yandex_metrika_callbacks.push(resolve);
	    });

	    var _document$getElementsByTagName = document.getElementsByTagName('script');

	    var neighbor = _document$getElementsByTagName[0];

	    var script = document.createElement('script');
	    script.type = 'text/javascript';
	    script.async = true;
	    script.src = 'https://mc.yandex.ru/metrika/watch.js';
	    neighbor.parentNode.insertBefore(script, neighbor);
	  }
	  return loaded;
	};

	var createYaCounter = function createYaCounter(id) {
	  var active = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	  try {
	    return id ? new window.Ya.Metrika({
	      id: id,
	      clickmap: active,
	      trackLinks: active,
	      accurateTrackBounce: active,
	      ut: 'noindex',
	      defer: true,
	      webvisor: false
	    }) : null;
	  } catch (e) {}
	};

	var YaMetrika = (function () {
	  function YaMetrika(parent) {
	    _classCallCheck(this, YaMetrika);

	    this.enabled = false;

	    this.parent = parent;
	  }

	  YaMetrika.prototype.init = function init(_ref) {
	    var _this = this;

	    var shared = _ref.shared;
	    var primary = _ref.primary;
	    var enabled = _ref.enabled;
	    var url = _ref.url;

	    Object.assign(this, { enabled: enabled, url: url });
	    if (!this.enabled) return false;

	    this.loaded = loadYaMetrika().then(function () {
	      var active = !_this.parent.offline;
	      _this.counters = {
	        shared: createYaCounter(shared, active),
	        primary: createYaCounter(primary, active)
	      };
	    });
	  };

	  YaMetrika.prototype.send = function send(event) {
	    var _this2 = this;

	    if (!this.enabled) return false;

	    var url = this.url + [event.category, event.action, event.label].join('/').replace(/\s/g, '_').toLowerCase();

	    var params = _extends({}, event.params, {
	      clientId: String(this.parent.clientId),
	      computerId: String(this.parent.computerId),
	      experimentNumber: this.parent.experiment,
	      language: this.parent.lang
	    });

	    return this.loaded.then(function () {
	      var _counters = _this2.counters;
	      var shared = _counters.shared;
	      var primary = _counters.primary;

	      _logs.log('[Statistics] [YaMetrika] Send event: ' + event.action, [url], params);
	      return Promise.all([_this2._sendHit(shared, url, params), _this2._sendHit(primary, url, params)]);
	    });
	  };

	  YaMetrika.prototype._sendHit = function _sendHit(counter, url, params) {
	    return counter ? new Promise(function (resolve, reject) {
	      counter.hit(url, {
	        title: document.title,
	        referer: null,
	        params: params,
	        callback: function callback(err) {
	          return err ? reject(err) : resolve();
	        }
	      });
	    }) : false;
	  };

	  return YaMetrika;
	})();

	exports['default'] = YaMetrika;
	module.exports = exports['default'];

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _libUtils = __webpack_require__(29);

	var ParseCMD = function ParseCMD(cmd) {
	  var args = _libUtils.ParseCMDString(cmd);
	  if (args.length > 2 && args[1] === '--sfx') {
	    var _args = args;
	    var command = _args[0];
	    var /* --sfx */sfxName = _args[2];

	    var overwrite = _args.slice(3);

	    args = [command].concat(_libUtils.ParseSFXName(sfxName));
	    overwrite.forEach(function (val, ind) {
	      if (val) args[ind + 1] = val;
	    });
	  }
	  return args;
	};
	exports.ParseCMD = ParseCMD;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _shell = __webpack_require__(15);

	var _wmi = __webpack_require__(3);

	var killProcess = function killProcess(commandLineLike) {
	  var processes = _wmi.getWMIObjects(['ProcessId'], 'Win32_Process', 'NAME = "mshta.exe" AND CommandLine LIKE "' + commandLineLike + '"');
	  processes.forEach(function (_ref) {
	    var ProcessId = _ref.ProcessId;

	    _shell.WshShell.Run('cmd /c taskkill /f /t /pid ' + ProcessId, 0, true);
	  });
	};

	exports.killProcess = killProcess;
	var getMyPID = function getMyPID() {
	  var pid = undefined;
	  try {
	    var temp = _shell.WshShell.Exec('rundll32 kernel32,Sleep');
	    pid = _wmi.getWMIObjects(['ParentProcessId'], 'Win32_Process', 'Handle = "' + temp.ProcessId + '"')[0].ParentProcessId;
	    temp.Terminate();
	  } catch (e) {}
	  return pid;
	};

	exports.getMyPID = getMyPID;
	var killByPID = function killByPID(pid) {
	  var childs = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	  var timeout = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

	  setTimeout(function () {
	    var flags = ['/f'];
	    if (childs) flags.push('/t');
	    _shell.WshShell.Run('cmd /c "taskkill ' + flags.join(' ') + ' /pid ' + pid + '"', 0, true);
	  }, timeout);
	};

	exports.killByPID = killByPID;
	// default argument value is High Priority
	var setProcessPriority = function setProcessPriority() {
	  var priority = arguments.length <= 0 || arguments[0] === undefined ? 128 : arguments[0];

	  try {
	    var pid = getMyPID();
	    // TODO: Add method to receive WMI objects
	    var colItems = _wmi.objWMIService.ExecQuery('SELECT * FROM Win32_Process WHERE Handle = ' + pid, 'WQL');
	    /* global Enumerator */
	    var enumItems = new Enumerator(colItems);
	    var objItem = enumItems.item();
	    objItem.SetPriority(priority);
	  } catch (e) {}
	};

	exports.setProcessPriority = setProcessPriority;
	var waitForPID = function waitForPID(pid) {
	  var query = 'SELECT * FROM Win32_Process WHERE ProcessId = ' + pid;
	  return new Promise(function (resolve) {
	    var intervId = setInterval(function () {
	      if (_wmi.objWMIService.ExecQuery(query, 'WQL').Count === 0) {
	        clearInterval(intervId);
	        resolve();
	      }
	    }, 300);
	  });
	};

	exports.waitForPID = waitForPID;
	var waitForProcesses = function waitForProcesses(where) {
	  var promise = Promise.resolve();
	  var processes = _wmi.getWMIObjects(['ProcessId'], 'Win32_Process', where);
	  processes.forEach(function (_ref2) {
	    var ProcessId = _ref2.ProcessId;

	    promise = promise.then(function () {
	      return waitForPID(ProcessId);
	    });
	  });
	  return promise;
	};
	exports.waitForProcesses = waitForProcesses;

/***/ },
/* 138 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function (n) {
	  if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function (type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events) this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error || isObject(this._events.error) && !this._events.error.length) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler)) return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++) listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function (type, listener) {
	  var m;

	  if (!isFunction(listener)) throw TypeError('listener must be a function');

	  if (!this._events) this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener) this.emit('newListener', type, isFunction(listener.listener) ? listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function (type, listener) {
	  if (!isFunction(listener)) throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function (type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener)) throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type]) return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener || isFunction(list.listener) && list.listener === listener) {
	    delete this._events[type];
	    if (this._events.removeListener) this.emit('removeListener', type, listener);
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener || list[i].listener && list[i].listener === listener) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0) return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener) this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function (type) {
	  var key, listeners;

	  if (!this._events) return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0) this._events = {};else if (this._events[type]) delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length) this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function (type) {
	  var ret;
	  if (!this._events || !this._events[type]) ret = [];else if (isFunction(this._events[type])) ret = [this._events[type]];else ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function (type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener)) return 1;else if (evlistener) return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function (emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}

/***/ },
/* 139 */
/***/ function(module, exports) {

	
	/**
	 * Reduce `arr` with `fn`.
	 *
	 * @param {Array} arr
	 * @param {Function} fn
	 * @param {Mixed} initial
	 *
	 * TODO: combatible error handling?
	 */

	"use strict";

	module.exports = function (arr, fn, initial) {
	  var idx = 0;
	  var len = arr.length;
	  var curr = arguments.length == 3 ? initial : arr[idx++];

	  while (idx < len) {
	    curr = fn.call(null, curr, arr[idx], ++idx, arr);
	  }

	  return curr;
	};

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	'use strict';

	var Emitter = __webpack_require__(126);
	var reduce = __webpack_require__(139);

	/**
	 * Root reference for iframes.
	 */

	var root;
	if (typeof window !== 'undefined') {
	  // Browser window
	  root = window;
	} else if (typeof self !== 'undefined') {
	  // Web Worker
	  root = self;
	} else {
	  // Other environments
	  root = undefined;
	}

	/**
	 * Noop.
	 */

	function noop() {};

	/**
	 * Check if `obj` is a host object,
	 * we don't want to serialize these :)
	 *
	 * TODO: future proof, move to compoent land
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */

	function isHost(obj) {
	  var str = ({}).toString.call(obj);

	  switch (str) {
	    case '[object File]':
	    case '[object Blob]':
	    case '[object FormData]':
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Determine XHR.
	 */

	request.getXHR = function () {
	  if (root.XMLHttpRequest && (!root.location || 'file:' != root.location.protocol || !root.ActiveXObject)) {
	    return new XMLHttpRequest();
	  } else {
	    try {
	      return new ActiveXObject('Microsoft.XMLHTTP');
	    } catch (e) {}
	    try {
	      return new ActiveXObject('Msxml2.XMLHTTP.6.0');
	    } catch (e) {}
	    try {
	      return new ActiveXObject('Msxml2.XMLHTTP.3.0');
	    } catch (e) {}
	    try {
	      return new ActiveXObject('Msxml2.XMLHTTP');
	    } catch (e) {}
	  }
	  return false;
	};

	/**
	 * Removes leading and trailing whitespace, added to support IE.
	 *
	 * @param {String} s
	 * @return {String}
	 * @api private
	 */

	var trim = ''.trim ? function (s) {
	  return s.trim();
	} : function (s) {
	  return s.replace(/(^\s*|\s*$)/g, '');
	};

	/**
	 * Check if `obj` is an object.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */

	function isObject(obj) {
	  return obj === Object(obj);
	}

	/**
	 * Serialize the given `obj`.
	 *
	 * @param {Object} obj
	 * @return {String}
	 * @api private
	 */

	function serialize(obj) {
	  if (!isObject(obj)) return obj;
	  var pairs = [];
	  for (var key in obj) {
	    if (null != obj[key]) {
	      pushEncodedKeyValuePair(pairs, key, obj[key]);
	    }
	  }
	  return pairs.join('&');
	}

	/**
	 * Helps 'serialize' with serializing arrays.
	 * Mutates the pairs array.
	 *
	 * @param {Array} pairs
	 * @param {String} key
	 * @param {Mixed} val
	 */

	function pushEncodedKeyValuePair(pairs, key, val) {
	  if (Array.isArray(val)) {
	    return val.forEach(function (v) {
	      pushEncodedKeyValuePair(pairs, key, v);
	    });
	  }
	  pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(val));
	}

	/**
	 * Expose serialization method.
	 */

	request.serializeObject = serialize;

	/**
	 * Parse the given x-www-form-urlencoded `str`.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */

	function parseString(str) {
	  var obj = {};
	  var pairs = str.split('&');
	  var parts;
	  var pair;

	  for (var i = 0, len = pairs.length; i < len; ++i) {
	    pair = pairs[i];
	    parts = pair.split('=');
	    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
	  }

	  return obj;
	}

	/**
	 * Expose parser.
	 */

	request.parseString = parseString;

	/**
	 * Default MIME type map.
	 *
	 *     superagent.types.xml = 'application/xml';
	 *
	 */

	request.types = {
	  html: 'text/html',
	  json: 'application/json',
	  xml: 'application/xml',
	  urlencoded: 'application/x-www-form-urlencoded',
	  'form': 'application/x-www-form-urlencoded',
	  'form-data': 'application/x-www-form-urlencoded'
	};

	/**
	 * Default serialization map.
	 *
	 *     superagent.serialize['application/xml'] = function(obj){
	 *       return 'generated xml here';
	 *     };
	 *
	 */

	request.serialize = {
	  'application/x-www-form-urlencoded': serialize,
	  'application/json': JSON.stringify
	};

	/**
	 * Default parsers.
	 *
	 *     superagent.parse['application/xml'] = function(str){
	 *       return { object parsed from str };
	 *     };
	 *
	 */

	request.parse = {
	  'application/x-www-form-urlencoded': parseString,
	  'application/json': JSON.parse
	};

	/**
	 * Parse the given header `str` into
	 * an object containing the mapped fields.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */

	function parseHeader(str) {
	  var lines = str.split(/\r?\n/);
	  var fields = {};
	  var index;
	  var line;
	  var field;
	  var val;

	  lines.pop(); // trailing CRLF

	  for (var i = 0, len = lines.length; i < len; ++i) {
	    line = lines[i];
	    index = line.indexOf(':');
	    field = line.slice(0, index).toLowerCase();
	    val = trim(line.slice(index + 1));
	    fields[field] = val;
	  }

	  return fields;
	}

	/**
	 * Check if `mime` is json or has +json structured syntax suffix.
	 *
	 * @param {String} mime
	 * @return {Boolean}
	 * @api private
	 */

	function isJSON(mime) {
	  return (/[\/+]json\b/.test(mime)
	  );
	}

	/**
	 * Return the mime type for the given `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */

	function type(str) {
	  return str.split(/ *; */).shift();
	};

	/**
	 * Return header field parameters.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */

	function params(str) {
	  return reduce(str.split(/ *; */), function (obj, str) {
	    var parts = str.split(/ *= */),
	        key = parts.shift(),
	        val = parts.shift();

	    if (key && val) obj[key] = val;
	    return obj;
	  }, {});
	};

	/**
	 * Initialize a new `Response` with the given `xhr`.
	 *
	 *  - set flags (.ok, .error, etc)
	 *  - parse header
	 *
	 * Examples:
	 *
	 *  Aliasing `superagent` as `request` is nice:
	 *
	 *      request = superagent;
	 *
	 *  We can use the promise-like API, or pass callbacks:
	 *
	 *      request.get('/').end(function(res){});
	 *      request.get('/', function(res){});
	 *
	 *  Sending data can be chained:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' })
	 *        .end(function(res){});
	 *
	 *  Or passed to `.send()`:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' }, function(res){});
	 *
	 *  Or passed to `.post()`:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' })
	 *        .end(function(res){});
	 *
	 * Or further reduced to a single call for simple cases:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' }, function(res){});
	 *
	 * @param {XMLHTTPRequest} xhr
	 * @param {Object} options
	 * @api private
	 */

	function Response(req, options) {
	  options = options || {};
	  this.req = req;
	  this.xhr = this.req.xhr;
	  // responseText is accessible only if responseType is '' or 'text' and on older browsers
	  this.text = this.req.method != 'HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text') || typeof this.xhr.responseType === 'undefined' ? this.xhr.responseText : null;
	  this.statusText = this.req.xhr.statusText;
	  this.setStatusProperties(this.xhr.status);
	  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
	  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
	  // getResponseHeader still works. so we get content-type even if getting
	  // other headers fails.
	  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
	  this.setHeaderProperties(this.header);
	  this.body = this.req.method != 'HEAD' ? this.parseBody(this.text ? this.text : this.xhr.response) : null;
	}

	/**
	 * Get case-insensitive `field` value.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */

	Response.prototype.get = function (field) {
	  return this.header[field.toLowerCase()];
	};

	/**
	 * Set header related properties:
	 *
	 *   - `.type` the content type without params
	 *
	 * A response of "Content-Type: text/plain; charset=utf-8"
	 * will provide you with a `.type` of "text/plain".
	 *
	 * @param {Object} header
	 * @api private
	 */

	Response.prototype.setHeaderProperties = function (header) {
	  // content-type
	  var ct = this.header['content-type'] || '';
	  this.type = type(ct);

	  // params
	  var obj = params(ct);
	  for (var key in obj) this[key] = obj[key];
	};

	/**
	 * Parse the given body `str`.
	 *
	 * Used for auto-parsing of bodies. Parsers
	 * are defined on the `superagent.parse` object.
	 *
	 * @param {String} str
	 * @return {Mixed}
	 * @api private
	 */

	Response.prototype.parseBody = function (str) {
	  var parse = request.parse[this.type];
	  return parse && str && (str.length || str instanceof Object) ? parse(str) : null;
	};

	/**
	 * Set flags such as `.ok` based on `status`.
	 *
	 * For example a 2xx response will give you a `.ok` of __true__
	 * whereas 5xx will be __false__ and `.error` will be __true__. The
	 * `.clientError` and `.serverError` are also available to be more
	 * specific, and `.statusType` is the class of error ranging from 1..5
	 * sometimes useful for mapping respond colors etc.
	 *
	 * "sugar" properties are also defined for common cases. Currently providing:
	 *
	 *   - .noContent
	 *   - .badRequest
	 *   - .unauthorized
	 *   - .notAcceptable
	 *   - .notFound
	 *
	 * @param {Number} status
	 * @api private
	 */

	Response.prototype.setStatusProperties = function (status) {
	  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	  if (status === 1223) {
	    status = 204;
	  }

	  var type = status / 100 | 0;

	  // status / class
	  this.status = this.statusCode = status;
	  this.statusType = type;

	  // basics
	  this.info = 1 == type;
	  this.ok = 2 == type;
	  this.clientError = 4 == type;
	  this.serverError = 5 == type;
	  this.error = 4 == type || 5 == type ? this.toError() : false;

	  // sugar
	  this.accepted = 202 == status;
	  this.noContent = 204 == status;
	  this.badRequest = 400 == status;
	  this.unauthorized = 401 == status;
	  this.notAcceptable = 406 == status;
	  this.notFound = 404 == status;
	  this.forbidden = 403 == status;
	};

	/**
	 * Return an `Error` representative of this response.
	 *
	 * @return {Error}
	 * @api public
	 */

	Response.prototype.toError = function () {
	  var req = this.req;
	  var method = req.method;
	  var url = req.url;

	  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
	  var err = new Error(msg);
	  err.status = this.status;
	  err.method = method;
	  err.url = url;

	  return err;
	};

	/**
	 * Expose `Response`.
	 */

	request.Response = Response;

	/**
	 * Initialize a new `Request` with the given `method` and `url`.
	 *
	 * @param {String} method
	 * @param {String} url
	 * @api public
	 */

	function Request(method, url) {
	  var self = this;
	  Emitter.call(this);
	  this._query = this._query || [];
	  this.method = method;
	  this.url = url;
	  this.header = {};
	  this._header = {};
	  this.on('end', function () {
	    var err = null;
	    var res = null;

	    try {
	      res = new Response(self);
	    } catch (e) {
	      err = new Error('Parser is unable to parse the response');
	      err.parse = true;
	      err.original = e;
	      // issue #675: return the raw response if the response parsing fails
	      err.rawResponse = self.xhr && self.xhr.responseText ? self.xhr.responseText : null;
	      return self.callback(err);
	    }

	    self.emit('response', res);

	    if (err) {
	      return self.callback(err, res);
	    }

	    if (res.status >= 200 && res.status < 300) {
	      return self.callback(err, res);
	    }

	    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
	    new_err.original = err;
	    new_err.response = res;
	    new_err.status = res.status;

	    self.callback(new_err, res);
	  });
	}

	/**
	 * Mixin `Emitter`.
	 */

	Emitter(Request.prototype);

	/**
	 * Allow for extension
	 */

	Request.prototype.use = function (fn) {
	  fn(this);
	  return this;
	};

	/**
	 * Set timeout to `ms`.
	 *
	 * @param {Number} ms
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.timeout = function (ms) {
	  this._timeout = ms;
	  return this;
	};

	/**
	 * Clear previous timeout.
	 *
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.clearTimeout = function () {
	  this._timeout = 0;
	  clearTimeout(this._timer);
	  return this;
	};

	/**
	 * Abort the request, and clear potential timeout.
	 *
	 * @return {Request}
	 * @api public
	 */

	Request.prototype.abort = function () {
	  if (this.aborted) return;
	  this.aborted = true;
	  this.xhr.abort();
	  this.clearTimeout();
	  this.emit('abort');
	  return this;
	};

	/**
	 * Set header `field` to `val`, or multiple fields with one object.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .set('Accept', 'application/json')
	 *        .set('X-API-Key', 'foobar')
	 *        .end(callback);
	 *
	 *      req.get('/')
	 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
	 *        .end(callback);
	 *
	 * @param {String|Object} field
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.set = function (field, val) {
	  if (isObject(field)) {
	    for (var key in field) {
	      this.set(key, field[key]);
	    }
	    return this;
	  }
	  this._header[field.toLowerCase()] = val;
	  this.header[field] = val;
	  return this;
	};

	/**
	 * Remove header `field`.
	 *
	 * Example:
	 *
	 *      req.get('/')
	 *        .unset('User-Agent')
	 *        .end(callback);
	 *
	 * @param {String} field
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.unset = function (field) {
	  delete this._header[field.toLowerCase()];
	  delete this.header[field];
	  return this;
	};

	/**
	 * Get case-insensitive header `field` value.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api private
	 */

	Request.prototype.getHeader = function (field) {
	  return this._header[field.toLowerCase()];
	};

	/**
	 * Set Content-Type to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.xml = 'application/xml';
	 *
	 *      request.post('/')
	 *        .type('xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 *      request.post('/')
	 *        .type('application/xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 * @param {String} type
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.type = function (type) {
	  this.set('Content-Type', request.types[type] || type);
	  return this;
	};

	/**
	 * Force given parser
	 *
	 * Sets the body parser no matter type.
	 *
	 * @param {Function}
	 * @api public
	 */

	Request.prototype.parse = function (fn) {
	  this._parser = fn;
	  return this;
	};

	/**
	 * Set Accept to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.json = 'application/json';
	 *
	 *      request.get('/agent')
	 *        .accept('json')
	 *        .end(callback);
	 *
	 *      request.get('/agent')
	 *        .accept('application/json')
	 *        .end(callback);
	 *
	 * @param {String} accept
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.accept = function (type) {
	  this.set('Accept', request.types[type] || type);
	  return this;
	};

	/**
	 * Set Authorization field value with `user` and `pass`.
	 *
	 * @param {String} user
	 * @param {String} pass
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.auth = function (user, pass) {
	  var str = btoa(user + ':' + pass);
	  this.set('Authorization', 'Basic ' + str);
	  return this;
	};

	/**
	* Add query-string `val`.
	*
	* Examples:
	*
	*   request.get('/shoes')
	*     .query('size=10')
	*     .query({ color: 'blue' })
	*
	* @param {Object|String} val
	* @return {Request} for chaining
	* @api public
	*/

	Request.prototype.query = function (val) {
	  if ('string' != typeof val) val = serialize(val);
	  if (val) this._query.push(val);
	  return this;
	};

	/**
	 * Write the field `name` and `val` for "multipart/form-data"
	 * request bodies.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .field('foo', 'bar')
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} name
	 * @param {String|Blob|File} val
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.field = function (name, val) {
	  if (!this._formData) this._formData = new root.FormData();
	  this._formData.append(name, val);
	  return this;
	};

	/**
	 * Queue the given `file` as an attachment to the specified `field`,
	 * with optional `filename`.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .attach(new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} field
	 * @param {Blob|File} file
	 * @param {String} filename
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.attach = function (field, file, filename) {
	  if (!this._formData) this._formData = new root.FormData();
	  this._formData.append(field, file, filename || file.name);
	  return this;
	};

	/**
	 * Send `data` as the request body, defaulting the `.type()` to "json" when
	 * an object is given.
	 *
	 * Examples:
	 *
	 *       // manual json
	 *       request.post('/user')
	 *         .type('json')
	 *         .send('{"name":"tj"}')
	 *         .end(callback)
	 *
	 *       // auto json
	 *       request.post('/user')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // manual x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send('name=tj')
	 *         .end(callback)
	 *
	 *       // auto x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // defaults to x-www-form-urlencoded
	  *      request.post('/user')
	  *        .send('name=tobi')
	  *        .send('species=ferret')
	  *        .end(callback)
	 *
	 * @param {String|Object} data
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.send = function (data) {
	  var obj = isObject(data);
	  var type = this.getHeader('Content-Type');

	  // merge
	  if (obj && isObject(this._data)) {
	    for (var key in data) {
	      this._data[key] = data[key];
	    }
	  } else if ('string' == typeof data) {
	    if (!type) this.type('form');
	    type = this.getHeader('Content-Type');
	    if ('application/x-www-form-urlencoded' == type) {
	      this._data = this._data ? this._data + '&' + data : data;
	    } else {
	      this._data = (this._data || '') + data;
	    }
	  } else {
	    this._data = data;
	  }

	  if (!obj || isHost(data)) return this;
	  if (!type) this.type('json');
	  return this;
	};

	/**
	 * Invoke the callback with `err` and `res`
	 * and handle arity check.
	 *
	 * @param {Error} err
	 * @param {Response} res
	 * @api private
	 */

	Request.prototype.callback = function (err, res) {
	  var fn = this._callback;
	  this.clearTimeout();
	  fn(err, res);
	};

	/**
	 * Invoke callback with x-domain error.
	 *
	 * @api private
	 */

	Request.prototype.crossDomainError = function () {
	  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
	  err.crossDomain = true;

	  err.status = this.status;
	  err.method = this.method;
	  err.url = this.url;

	  this.callback(err);
	};

	/**
	 * Invoke callback with timeout error.
	 *
	 * @api private
	 */

	Request.prototype.timeoutError = function () {
	  var timeout = this._timeout;
	  var err = new Error('timeout of ' + timeout + 'ms exceeded');
	  err.timeout = timeout;
	  this.callback(err);
	};

	/**
	 * Enable transmission of cookies with x-domain requests.
	 *
	 * Note that for this to work the origin must not be
	 * using "Access-Control-Allow-Origin" with a wildcard,
	 * and also must set "Access-Control-Allow-Credentials"
	 * to "true".
	 *
	 * @api public
	 */

	Request.prototype.withCredentials = function () {
	  this._withCredentials = true;
	  return this;
	};

	/**
	 * Initiate request, invoking callback `fn(res)`
	 * with an instanceof `Response`.
	 *
	 * @param {Function} fn
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.end = function (fn) {
	  var self = this;
	  var xhr = this.xhr = request.getXHR();
	  var query = this._query.join('&');
	  var timeout = this._timeout;
	  var data = this._formData || this._data;

	  // store callback
	  this._callback = fn || noop;

	  // state change
	  xhr.onreadystatechange = function () {
	    if (4 != xhr.readyState) return;

	    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
	    // result in the error "Could not complete the operation due to error c00c023f"
	    var status;
	    try {
	      status = xhr.status;
	    } catch (e) {
	      status = 0;
	    }

	    if (0 == status) {
	      if (self.timedout) return self.timeoutError();
	      if (self.aborted) return;
	      return self.crossDomainError();
	    }
	    self.emit('end');
	  };

	  // progress
	  var handleProgress = function handleProgress(e) {
	    if (e.total > 0) {
	      e.percent = e.loaded / e.total * 100;
	    }
	    e.direction = 'download';
	    self.emit('progress', e);
	  };
	  if (this.hasListeners('progress')) {
	    xhr.onprogress = handleProgress;
	  }
	  try {
	    if (xhr.upload && this.hasListeners('progress')) {
	      xhr.upload.onprogress = handleProgress;
	    }
	  } catch (e) {}
	  // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
	  // Reported here:
	  // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context

	  // timeout
	  if (timeout && !this._timer) {
	    this._timer = setTimeout(function () {
	      self.timedout = true;
	      self.abort();
	    }, timeout);
	  }

	  // querystring
	  if (query) {
	    query = request.serializeObject(query);
	    this.url += ~this.url.indexOf('?') ? '&' + query : '?' + query;
	  }

	  // initiate request
	  xhr.open(this.method, this.url, true);

	  // CORS
	  if (this._withCredentials) xhr.withCredentials = true;

	  // body
	  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {
	    // serialize stuff
	    var contentType = this.getHeader('Content-Type');
	    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];
	    if (!serialize && isJSON(contentType)) serialize = request.serialize['application/json'];
	    if (serialize) data = serialize(data);
	  }

	  // set header fields
	  for (var field in this.header) {
	    if (null == this.header[field]) continue;
	    xhr.setRequestHeader(field, this.header[field]);
	  }

	  // send stuff
	  this.emit('request', this);

	  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
	  // We need null here if data is undefined
	  xhr.send(typeof data !== 'undefined' ? data : null);
	  return this;
	};

	/**
	 * Faux promise support
	 *
	 * @param {Function} fulfill
	 * @param {Function} reject
	 * @return {Request}
	 */

	Request.prototype.then = function (fulfill, reject) {
	  return this.end(function (err, res) {
	    err ? reject(err) : fulfill(res);
	  });
	};

	/**
	 * Expose `Request`.
	 */

	request.Request = Request;

	/**
	 * Issue a request:
	 *
	 * Examples:
	 *
	 *    request('GET', '/users').end(callback)
	 *    request('/users').end(callback)
	 *    request('/users', callback)
	 *
	 * @param {String} method
	 * @param {String|Function} url or callback
	 * @return {Request}
	 * @api public
	 */

	function request(method, url) {
	  // callback
	  if ('function' == typeof url) {
	    return new Request('GET', method).end(url);
	  }

	  // url first
	  if (1 == arguments.length) {
	    return new Request('GET', method);
	  }

	  return new Request(method, url);
	}

	/**
	 * GET `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.get = function (url, data, fn) {
	  var req = request('GET', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.query(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * HEAD `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.head = function (url, data, fn) {
	  var req = request('HEAD', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * DELETE `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	function del(url, fn) {
	  var req = request('DELETE', url);
	  if (fn) req.end(fn);
	  return req;
	};

	request['del'] = del;
	request['delete'] = del;

	/**
	 * PATCH `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.patch = function (url, data, fn) {
	  var req = request('PATCH', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * POST `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.post = function (url, data, fn) {
	  var req = request('POST', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * PUT `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.put = function (url, data, fn) {
	  var req = request('PUT', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * Expose `request`.
	 */

	module.exports = request;

/***/ },
/* 141 */
/***/ function(module, exports) {

	"use strict";

	var geoip = {
			geoip_city_country_code: "TZ",
			geoip_area_code: "0",
			geoip_city: "",
			geoip_city_continent_code: "AF",
			geoip_city_country_code: "TZ",
			geoip_city_country_code3: "TZA",
			geoip_city_country_name: "Tanzania, United Republic of",
			geoip_country_code: "TZ",
			geoip_country_code3: "TZA",
			geoip_country_name: "Tanzania, United Republic of",
			geoip_dma_code: "0",
			geoip_latitude: "-6.0000",
			geoip_longitude: "35.0000",
			geoip_org: "",
			geoip_postal_code: "",
			geoip_region: "",
			geoip_region_name: ""
		};

	window.geoip = geoip;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./antivirus-notactive": 93,
		"./antivirus-notactive.yaml": 93,
		"./antivirus-notinstalled": 94,
		"./antivirus-notinstalled.yaml": 94,
		"./antivirus-notworking": 95,
		"./antivirus-notworking.yaml": 95,
		"./batterypoorcondition": 96,
		"./batterypoorcondition.yaml": 96,
		"./cpuloadaverage": 97,
		"./cpuloadaverage.yaml": 97,
		"./fileassociation": 50,
		"./fileassociation.js": 50,
		"./newbsod": 51,
		"./newbsod.js": 51,
		"./otherdrivesfreespace": 52,
		"./otherdrivesfreespace.js": 52,
		"./partnersoft": 55,
		"./partnersoft-browser": 53,
		"./partnersoft-browser.js": 53,
		"./partnersoft-system": 54,
		"./partnersoft-system.js": 54,
		"./partnersoft.js": 55,
		"./ramload": 98,
		"./ramload.yaml": 98,
		"./smartfailed": 56,
		"./smartfailed.js": 56,
		"./systemdrivefreespace": 57,
		"./systemdrivefreespace.js": 57,
		"./yandex-browser-banking": 59,
		"./yandex-browser-banking-installed": 58,
		"./yandex-browser-banking-installed.js": 58,
		"./yandex-browser-banking.js": 59,
		"./yandex-browser-battery-low": 61,
		"./yandex-browser-battery-low-installed": 60,
		"./yandex-browser-battery-low-installed.js": 60,
		"./yandex-browser-battery-low.js": 61,
		"./yandex-browser-block-access": 63,
		"./yandex-browser-block-access-installed": 62,
		"./yandex-browser-block-access-installed.js": 62,
		"./yandex-browser-block-access.js": 63,
		"./yandex-browser-business-news": 65,
		"./yandex-browser-business-news-installed": 64,
		"./yandex-browser-business-news-installed.js": 64,
		"./yandex-browser-business-news.js": 65,
		"./yandex-browser-buy-sell": 67,
		"./yandex-browser-buy-sell-installed": 66,
		"./yandex-browser-buy-sell-installed.js": 66,
		"./yandex-browser-buy-sell.js": 67,
		"./yandex-browser-geo-city": 69,
		"./yandex-browser-geo-city-installed": 68,
		"./yandex-browser-geo-city-installed.js": 68,
		"./yandex-browser-geo-city.js": 69,
		"./yandex-browser-geo-metro": 71,
		"./yandex-browser-geo-metro-installed": 70,
		"./yandex-browser-geo-metro-installed.js": 70,
		"./yandex-browser-geo-metro.js": 71,
		"./yandex-browser-news": 73,
		"./yandex-browser-news-installed": 72,
		"./yandex-browser-news-installed.js": 72,
		"./yandex-browser-news.js": 73,
		"./yandex-browser-secure-wifi": 75,
		"./yandex-browser-secure-wifi-installed": 74,
		"./yandex-browser-secure-wifi-installed.js": 74,
		"./yandex-browser-secure-wifi.js": 75,
		"./yandex-browser-settings-banking-installed": 76,
		"./yandex-browser-settings-banking-installed.js": 76,
		"./yandex-browser-settings-block-access-installed": 77,
		"./yandex-browser-settings-block-access-installed.js": 77,
		"./yandex-browser-settings-business-news-installed": 78,
		"./yandex-browser-settings-business-news-installed.js": 78,
		"./yandex-browser-settings-buy-sell-installed": 79,
		"./yandex-browser-settings-buy-sell-installed.js": 79,
		"./yandex-browser-settings-import-installed": 80,
		"./yandex-browser-settings-import-installed.js": 80,
		"./yandex-browser-settings-news-installed": 81,
		"./yandex-browser-settings-news-installed.js": 81,
		"./yandex-browser-settings-watch-video-installed": 82,
		"./yandex-browser-settings-watch-video-installed.js": 82,
		"./yandex-browser-settings-yandex-market-installed": 83,
		"./yandex-browser-settings-yandex-market-installed.js": 83,
		"./yandex-browser-settings-youtube-installed": 84,
		"./yandex-browser-settings-youtube-installed.js": 84,
		"./yandex-browser-socnetwork": 100,
		"./yandex-browser-socnetwork-installed": 99,
		"./yandex-browser-socnetwork-installed.yaml": 99,
		"./yandex-browser-socnetwork.yaml": 100,
		"./yandex-browser-watch-video": 86,
		"./yandex-browser-watch-video-installed": 85,
		"./yandex-browser-watch-video-installed.js": 85,
		"./yandex-browser-watch-video.js": 86,
		"./yandex-browser-yandex-market": 88,
		"./yandex-browser-yandex-market-installed": 87,
		"./yandex-browser-yandex-market-installed.js": 87,
		"./yandex-browser-yandex-market.js": 88,
		"./yandex-browser-yandex-services": 90,
		"./yandex-browser-yandex-services-installed": 89,
		"./yandex-browser-yandex-services-installed.js": 89,
		"./yandex-browser-yandex-services.js": 90,
		"./yandex-browser-youtube": 92,
		"./yandex-browser-youtube-installed": 91,
		"./yandex-browser-youtube-installed.js": 91,
		"./yandex-browser-youtube.js": 92,
		"./yandexwidget": 101,
		"./yandexwidget.yaml": 101
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 142;


/***/ },
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _drpCoreSystem = __webpack_require__(9);

	var localeHex = _drpCoreSystem.RegRead('HKCU\\Control Panel\\International\\Locale');
	var locale = parseInt('0x' + localeHex, 16);
	var lang = 'en';

	switch (locale) {
	  case 0x0009: // English
	  case 0x0c09: // English (Australia)
	  case 0x2809: // English (Belize)
	  case 0x1009: // English (Canada)
	  case 0x2409: // English (Caribbean)
	  case 0x4009: // English (India)
	  case 0x1809: // English (Ireland)
	  case 0x2009: // English (Jamaica)
	  case 0x4409: // English (Malaysia)
	  case 0x1409: // English (New Zealand)
	  case 0x3409: // English (Philippines)
	  case 0x4809: // English (Singapore)
	  case 0x1c09: // English (South Africa)
	  case 0x2c09: // English (Trinidad)
	  case 0x0809: // English (United Kingdom)
	  case 0x0409: // English (United States)
	  case 0x3009: // English (Zimbabwe)
	  case 0x3c09: // English (Hong Kong)
	  case 0x3809:
	    // English (Indonesia)
	    lang = 'en';
	    break;
	  case 0x000c: // French
	  case 0x080c: // French (Belgium)
	  case 0x2c0c: // French (Cameroon)
	  case 0x0c0c: // French (Canada)
	  case 0x240c: // French (Congo, DRC)
	  case 0x300c: // French (Cote d'Ivoire)
	  case 0x3c0c: // French (Haiti)
	  case 0x040c: // French (France)
	  case 0x140c: // French (Luxembourg)
	  case 0x340c: // French (Mali)
	  case 0x180c: // French (Monaco)
	  case 0x380c: // French (Morocco)
	  case 0xe40c: // French (North Africa)
	  case 0x200c: // French (Reunion)
	  case 0x280c: // French (Senegal)
	  case 0x100c: // French (Switzerland)
	  case 0x1c0c:
	    // French (West Indies)
	    lang = 'fr';
	    break;
	  case 0x000a: // Spanish
	  case 0x3c0a: // Spanish (Paraguay)
	  case 0x140a: // Spanish (Costa Rica)
	  case 0x1c0a: // Spanish (Dominican Republic)
	  case 0x300a: // Spanish (Ecuador)
	  case 0x440a: // Spanish (El Salvador)
	  case 0x100a: // Spanish (Guatemala)
	  case 0x480a: // Spanish (Honduras)
	  case 0x0c0a: // Spanish (International Sort)
	  case 0x340a: // Spanish (Chile)
	  case 0x4c0a: // Spanish (Nicaragua)
	  case 0x080a: // Spanish (Mexico)
	  case 0x280a: // Spanish (Peru)
	  case 0x500a: // Spanish (Puerto Rico)
	  case 0x040a: // Spanish (Traditional Sort)
	  case 0x380a: // Spanish (Uruguay)
	  case 0x200a: // Spanish (Venezuela)
	  case 0x180a: // Spanish (Panama)
	  case 0x2c0a: // Spanish (Argentina)
	  case 0x400a: // Spanish (Bolivia)
	  case 0x580a: // Spanish (Latin America)
	  case 0x540a:
	    // Spanish (United States)
	    lang = 'es';
	    break;
	  case 0x240a:
	    // Spanish (Colombia)
	    lang = 'co';
	    break;
	  case 0x0007: // German
	  case 0x0c07: // German (Austria)
	  case 0x0407: // German (Germany)
	  case 0x1407: // German (Liechtenstein)
	  case 0x1007: // German (Luxembourg)
	  case 0x0807:
	    // German (Switzerland)
	    lang = 'de';
	    break;
	  case 0x0437:
	    // Georgian (Georgia)
	    lang = 'ka';
	    break;
	  case 0x002c: // Azeri
	  case 0x742C: // Azeri (Cyrillic)
	  case 0x082C: // Azeri (Cyrillic, Azerbaijan)
	  case 0x782C: // Azeri (Latin)
	  case 0x042C:
	    // Azeri (Latin, Azerbaijan)
	    lang = 'az';
	    break;
	  case 0x0010: // Italian
	  case 0x0410: // Italian (Italy)
	  case 0x0810:
	    // Italian (Switzerland)
	    lang = 'it';
	    break;
	  case 0x0019: // Russian
	  case 0x0419: // Russian (Russia)
	  case 0x0819:
	    // Russian (Moldova)
	    lang = 'ru';
	    break;
	  case 0x0022: // Ukrainian
	  case 0x0422:
	    // Ukrainian (Ukraine)
	    lang = 'uk';
	    break;
	  case 0x001f: // Turkish
	  case 0x041f:
	    // Turkish (Turkey)
	    lang = 'tr';
	    break;
	  case 0x0027: // Lithuanian
	  case 0x0427:
	    // Lithuanian (Lithuania)
	    lang = 'lt';
	    break;
	  case 0x0013: // Dutch
	  case 0x0413: // Dutch (Netherlands)
	  case 0x0813:
	    // Dutch (Belgium)
	    lang = 'nl';
	    break;
	  case 0x181a: // Serbian_Latin_Bosnia_Herzegovina
	  case 0x081a:
	    // Serbian_Latin
	    lang = 'srl';
	    break;
	  case 0x0c1a: // Serbian_Cyrillic
	  case 0x1c1a:
	    // Serbian_Cyrillic_Bosnia_Herzegovina
	    lang = 'sr';
	    break;
	  case 0x0001: // Arabic
	  case 0x1401: // Arabic (Algeria)
	  case 0x3C01: // Arabic (Bahrain)
	  case 0x0C01: // Arabic (Egypt)
	  case 0x0801: // Arabic (Iraq)
	  case 0x2C01: // Arabic (Jordan)
	  case 0x3401: // Arabic (Kuwait)
	  case 0x3001: // Arabic (Lebanon)
	  case 0x1001: // Arabic (Libya)
	  case 0x1801: // Arabic (Morocco)
	  case 0x2001: // Arabic (Oman)
	  case 0x4001: // Arabic (Qatar)
	  case 0x0401: // Arabic (Saudi Arabia)
	  case 0x2801: // Arabic (Syria)
	  case 0x1C01: // Arabic (Tunisia)
	  case 0x3801: // Arabic (U.A.E.)
	  case 0x2401:
	    // Arabic (Yemen)
	    lang = 'ar';
	    break;
	  case 0x0415:
	    // Polish
	    lang = 'pl';
	    break;
	  case 0x042b:
	    // Armenian
	    lang = 'hy';
	    break;
	  case 0x0405:
	    // Czech
	    lang = 'cs';
	    break;
	  case 0x0406:
	    // Danish (Denmark)
	    lang = 'da';
	    break;
	  case 0x0423:
	    // Belarusian
	    lang = 'be';
	    break;
	  case 0x0416: // Portuguese - Brazil
	  case 0x0816:
	    // Portuguese - Portugal
	    lang = 'pt';
	    break;
	  case 0x0804: // Chinese - People's Republic of China
	  case 0x1004: // Chinese - Singapore
	  case 0x0404: // Chinese - Taiwan
	  case 0x0c04: // Chinese - Hong Kong SAR
	  case 0x1404:
	    // Chinese - Macao SAR
	    lang = 'zh';
	    break;
	  case 0x0429:
	    // Farsi (Persian)
	    lang = 'fa';
	    break;
	  case 0x0408:
	    // Greek
	    lang = 'el';
	    break;
	  case 0x040d:
	    // Hebrew
	    lang = 'he';
	    break;
	  case 0x040E:
	    // Hungarian
	    lang = 'hu';
	    break;
	  case 0x0421:
	    // Indonesian
	    lang = 'id';
	    break;
	  case 0x0492:
	    // Central Kurdish (ku)
	    lang = 'ku';
	    break;
	  case 0x0424:
	    // Slovenian
	    lang = 'sl';
	    break;
	  case 0x041B:
	    // Slovak
	    lang = 'sk';
	    break;
	  case 0x0418: // Romanian
	  case 0x0818:
	    // Romanian - Moldava
	    lang = 'ro';
	    break;
	  case 0x0444:
	    // Tatar
	    lang = 'tt';
	    break;
	  case 0x041a: // Croatian
	  case 0x101a:
	    // Croatian (Bosnia/Herzegovina)
	    lang = 'hr';
	    break;
	  case 0x0425:
	    // Estonian
	    lang = 'vi';
	    break;
	  case 0x042a:
	    // Vietnamese
	    lang = 'vi';
	    break;
	  default:
	    lang = 'en';
	}

	exports['default'] = window.lang = lang;
	module.exports = exports['default'];

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/* global Enumerator */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _drpCoreStatistics = __webpack_require__(24);

	var _drpCoreStatistics2 = _interopRequireDefault(_drpCoreStatistics);

	var _libNotification = __webpack_require__(19);

	var _libNotification2 = _interopRequireDefault(_libNotification);

	var _drpCoreSystem = __webpack_require__(9);

	var _drpCoreWmi = __webpack_require__(3);

	var _drpCoreOs = __webpack_require__(12);

	var _libUtils = __webpack_require__(10);

	var baseReg = 'HKLM\\Software' + (_drpCoreOs.is64 ? '\\Wow6432Node' : '') + '\\Microsoft\\Windows\\CurrentVersion\\Uninstall';

	// displayName (WMI): UninstallString (registry)
	var supportedAV = {
	  'Kaspersky Internet Security': {
	    UninstallString: '',
	    Keys: 'REMOVE=ALL /norestart',
	    GetUninstallCommand: function GetUninstallCommand() {
	      var productCodes = ['{77E7AE5C-181C-4CAF-ADBF-946F11C1CE26}', // KIS 2016
	      '{02FECEE0-16B2-43DB-BC3B-C844477FC142}', // KIS 2015
	      '{6F6873E3-5C92-4049-B511-231A138DD090}', // KIS 2014
	      '{560985FB-4B76-4121-9189-7A2CDC7886D6}', // KIS 2013
	      '{45E557D6-2271-4F13-8101-C620B4285AB0}', // KIS 2012
	      '{66F1F013-008F-4875-B283-5A814B820347}' // KIS 2011
	      ];

	      for (var i = 0; i < productCodes.length; i++) {
	        var code = productCodes[i];
	        var key = baseReg + '\\' + code + '\\UninstallString';
	        if (_drpCoreSystem.RegExists(key)) {
	          undefined.UninstallString = key;
	          return 'MsiExec.exe /I' + code + ' ' + undefined.Keys;
	        }
	      }
	    }
	  },
	  'Avira Antivirus': {
	    UninstallString: baseReg + '\\Avira Antivirus\\UninstallString',
	    Keys: '/remsilentnoreboot'
	  }
	};

	var Antivirus = (function () {
	  function Antivirus() {
	    _classCallCheck(this, Antivirus);

	    this.scanAntiviruses = this.memoize(this.scanAntiviruses);
	    this.isSecurityCenterServiceRunning = this.memoize(this.isSecurityCenterServiceRunning);
	  }

	  Antivirus.prototype.run = function run() {
	    var antivirusObj, antivirusState, antivirusName;
	    return regeneratorRuntime.async(function run$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          if (this.isSecurityCenterServiceRunning()) {
	            context$2$0.next = 4;
	            break;
	          }

	          _drpCoreStatistics2['default'].event({ action: 'antivirus security center stopped', label: _drpCoreStatistics2['default'].drpVersion + ' antivirus notification avira' });
	          context$2$0.next = 24;
	          break;

	        case 4:
	          // get all AV using WMI
	          this.antiviruses = this.scanAntiviruses();

	          if (!(this.antiviruses.length === 1)) {
	            context$2$0.next = 21;
	            break;
	          }

	          antivirusObj = this.antiviruses[0];
	          antivirusState = this.getAntivirusStatus(antivirusObj);
	          antivirusName = antivirusObj.displayName.toLowerCase();

	          if (!this.checkAntivirusSupport(antivirusObj)) {
	            context$2$0.next = 16;
	            break;
	          }

	          if (!this.isNotWorking(antivirusObj)) {
	            context$2$0.next = 14;
	            break;
	          }

	          this.addAntivirusInfo(antivirusObj);
	          context$2$0.next = 14;
	          return regeneratorRuntime.awrap(this.showConfirm('notworking'));

	        case 14:
	          context$2$0.next = 19;
	          break;

	        case 16:
	          if (!(antivirusName === '360 total security' && !antivirusState.avActive)) {
	            context$2$0.next = 19;
	            break;
	          }

	          context$2$0.next = 19;
	          return regeneratorRuntime.awrap(this.showConfirm('notactive'));

	        case 19:
	          context$2$0.next = 24;
	          break;

	        case 21:
	          if (!(this.antiviruses.length === 0)) {
	            context$2$0.next = 24;
	            break;
	          }

	          context$2$0.next = 24;
	          return regeneratorRuntime.awrap(this.showConfirm('notinstalled'));

	        case 24:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Antivirus.prototype.sendStatistics = function sendStatistics() {
	    _drpCoreStatistics2['default'].event({ action: 'antivirus detected count ' + this.antiviruses.length, label: _drpCoreStatistics2['default'].drpVersion + ' antivirus notification avira' });
	    for (var i = 0; i < this.antiviruses.length; i++) {
	      var antivirusObj = this.antiviruses[i];
	      var antivirusState = this.getAntivirusStatus(antivirusObj);
	      var antivirusName = antivirusObj.displayName.toLowerCase();

	      if (antivirusState.avActive) {
	        _drpCoreStatistics2['default'].event({ action: 'antivirus detected active ' + antivirusName, label: _drpCoreStatistics2['default'].drpVersion + ' antivirus notification avira' });
	      } else {
	        _drpCoreStatistics2['default'].event({ action: 'antivirus detected not active ' + antivirusName, label: _drpCoreStatistics2['default'].drpVersion + ' antivirus notification avira' });
	      }

	      if (antivirusState.upToDate) {
	        _drpCoreStatistics2['default'].event({ action: 'antivirus detected uptodate ' + antivirusName, label: _drpCoreStatistics2['default'].drpVersion + ' antivirus notification avira' });
	      } else {
	        _drpCoreStatistics2['default'].event({ action: 'antivirus detected not uptodate ' + antivirusName, label: _drpCoreStatistics2['default'].drpVersion + ' antivirus notification avira' });
	      }
	    }
	  };

	  Antivirus.prototype.checkAntivirusSupport = function checkAntivirusSupport() {
	    var antivirusObj = arguments.length <= 0 || arguments[0] === undefined ? this.antiviruses[0] : arguments[0];

	    var result = false;
	    for (var _name in supportedAV) {
	      if (antivirusObj.displayName.indexOf(_name) !== -1) {
	        result = true;
	      }
	    }
	    return result;
	  };

	  Antivirus.prototype.addAntivirusInfo = function addAntivirusInfo() {
	    var antivirusObj = arguments.length <= 0 || arguments[0] === undefined ? this.antiviruses[0] : arguments[0];

	    for (var _name2 in supportedAV) {
	      if (antivirusObj.displayName.indexOf(_name2) !== -1) {
	        antivirusObj.name = _name2;
	        antivirusObj.uninstallString = supportedAV[_name2]['UninstallString'];
	        antivirusObj.keys = supportedAV[_name2]['Keys'];
	      }
	    }
	  };

	  Antivirus.prototype.showConfirm = function showConfirm(problem) {
	    var notification, status, params;
	    return regeneratorRuntime.async(function showConfirm$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          notification = new _libNotification2['default']('antivirus-' + problem);

	          if (notification.get('counter') === 1) {
	            this.sendStatistics();
	          }
	          context$2$0.next = 4;
	          return regeneratorRuntime.awrap(notification.show());

	        case 4:
	          status = context$2$0.sent;

	          if (problem !== 'notactive' && status === 'ok') {
	            params = ['--antivirus', problem, '--label', notification.config.statisticsLabel].join(' ');

	            _drpCoreSystem.WshShell.Run('"' + _libUtils.AppPath + '\\Uninstall.exe" ' + params, 3, false);
	          }

	        case 6:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Antivirus.prototype.wrapInCmd = function wrapInCmd(command) {
	    return 'cmd /c "' + command + '"';
	  };

	  Antivirus.prototype.memoize = function memoize(func) {
	    var _this = this;

	    var cache = undefined;
	    return function () {
	      if (!cache) {
	        cache = func.call(_this);
	      }
	      return cache;
	    };
	  };

	  Antivirus.prototype.clearUndefVar = function clearUndefVar(varib) {
	    try {
	      varib = varib + '';
	      return varib.replace('null', '').replace('undefined', '');
	    } catch (err) {
	      return '';
	    }
	  };

	  Antivirus.prototype.getSystemWMIScalar = function getSystemWMIScalar(query) {
	    try {
	      var colItems = _drpCoreWmi.objWMIService.ExecQuery(query);
	      if (colItems.count) {
	        var e = new Enumerator(colItems);
	        return e.item();
	      }
	    } catch (err) {}
	    return null;
	  };

	  Antivirus.prototype.isSecurityCenterServiceRunning = function isSecurityCenterServiceRunning() {
	    var service = this.getSystemWMIScalar('SELECT State, Name FROM Win32_Service WHERE Name="wscsvc"');
	    return service.State === 'Running';
	  };

	  Antivirus.prototype.scanAntiviruses = function scanAntiviruses() {
	    var _this2 = this;

	    var antivirus = [];
	    var objWMIService_antivir = _drpCoreWmi.locator.ConnectServer(null, '\\root\\SecurityCenter' + (!_libUtils.isOldOS ? '2' : ''));
	    var colItems = objWMIService_antivir.ExecQuery('SELECT * FROM AntiVirusProduct', 'WQL');
	    _drpCoreSystem.iterate(colItems, function (objItem) {
	      if (objItem.displayName !== 'Windows Defender' && objItem.displayName !== 'Microsoft Security Essentials') {
	        antivirus.push({
	          companyName: _this2.clearUndefVar(objItem.companyName),
	          displayName: _this2.clearUndefVar(objItem.displayName),
	          productState: _this2.clearUndefVar(objItem.productState),
	          instanceGuid: _this2.clearUndefVar(objItem.instanceGuid),
	          onAccessScanningEnabled: _this2.clearUndefVar(objItem.onAccessScanningEnabled),
	          pathToSignedProductExe: _this2.clearUndefVar(objItem.pathToSignedProductExe),
	          productHasNotifiedUser: _this2.clearUndefVar(objItem.productHasNotifiedUser),
	          productUptoDate: _this2.clearUndefVar(objItem.productUptoDate),
	          productWantsWscNotifications: _this2.clearUndefVar(objItem.productWantsWscNotifications),
	          versionNumber: _this2.clearUndefVar(objItem.versionNumber)
	        });
	      }
	    });
	    return antivirus;
	  };

	  Antivirus.prototype.hasAntiviruses = function hasAntiviruses() {
	    try {
	      return this.isSecurityCenterServiceRunning() && this.scanAntiviruses().length > 0;
	    } catch (err) {
	      return true;
	    }
	  };

	  Antivirus.prototype.isNotWorking = function isNotWorking() {
	    var antivirusObj = arguments.length <= 0 || arguments[0] === undefined ? this.antiviruses[0] : arguments[0];

	    var antivirusState = this.getAntivirusStatus(antivirusObj);
	    return !antivirusState.upToDate || !antivirusState.avActive;
	  };

	  Antivirus.prototype.getAntivirusStatus = function getAntivirusStatus() {
	    var antivirusObj = arguments.length <= 0 || arguments[0] === undefined ? this.antiviruses[0] : arguments[0];

	    if (!_libUtils.isOldOS) {
	      var productState = parseInt(antivirusObj.productState, 10).toString(16);
	      var upToDateState = productState.substring(productState.length - 2, productState.length);
	      var avActiveState = productState.substring(productState.length - 4, productState.length - 2);
	      return {
	        upToDate: upToDateState === '00',
	        avActive: avActiveState === '10' || avActiveState === '11'
	      };
	    } else {
	      var upToDateState = antivirusObj.productUptodate;
	      var avActiveState = antivirusObj.onAccessScanningEnabled;
	      return {
	        upToDate: upToDateState !== 'false',
	        avActive: avActiveState !== 'false'
	      };
	    }
	  };

	  Antivirus.prototype.antivirusIsUninstalled = function antivirusIsUninstalled(antivirusObj) {
	    var uninstallString = supportedAV[antivirusObj.displayName]['UninstallString'];
	    return !(uninstallString && _drpCoreSystem.RegExists(uninstallString));
	  };

	  Antivirus.prototype.installAntivirus = function installAntivirus() {
	    try {
	      _drpCoreStatistics2['default'].event({ action: 'antivirus installation started', label: _drpCoreStatistics2['default'].drpVersion + ' antivirus notification avira' });
	      var downloadURI = 'http://download.drp.su/soft/360tsRU.exe';
	      var keys = '/S';
	      var fileName = downloadURI.split('/').slice(-1);

	      var targetFolder = _drpCoreSystem.WshShell.ExpandEnvironmentStrings('%TEMP%');

	      if (_drpCoreSystem.fso.FileExists(_libUtils.WgetPath)) {
	        var wgetCommand = '"' + _libUtils.WgetPath + '" -P "' + targetFolder + '" "' + downloadURI + '"';
	        var command = this.wrapInCmd(wgetCommand);
	        _drpCoreSystem.WshShell.Run(command, 0, true);

	        _drpCoreSystem.WshShell.Run('"' + targetFolder + '\\' + fileName + '" ' + keys, 1, true);
	      }
	    } catch (e) {
	      _drpCoreStatistics2['default'].event({ action: 'antivirus installation failed', label: _drpCoreStatistics2['default'].drpVersion + ' antivirus notification avira' });
	    }
	  };

	  Antivirus.prototype.uninstallAntivirus = function uninstallAntivirus(antivirusObj) {
	    try {
	      _drpCoreStatistics2['default'].event({ action: 'antivirus uninstallation started', label: _drpCoreStatistics2['default'].drpVersion + ' antivirus notification avira' });
	      var uninstallCommand = '';
	      if (supportedAV[antivirusObj.name]['GetUninstallCommand']) {
	        uninstallCommand = supportedAV[antivirusObj.name].GetUninstallCommand();
	      } else {
	        var uninstallString = supportedAV[antivirusObj.name]['UninstallString'];
	        uninstallCommand = _drpCoreSystem.RegRead(uninstallString);
	      }
	      if (!uninstallCommand) {
	        return false;
	      }
	      if (uninstallCommand.indexOf('/') !== -1) {
	        // uninstallString contains keys
	        var re = /(.+?)(?:$|\s+\/)/;
	        var matches = uninstallCommand.match(re);
	        uninstallCommand = '"' + matches[1] + '" ' + antivirusObj.keys;
	      } else {
	        uninstallCommand = '"' + uninstallCommand + '" ' + antivirusObj.keys;
	      }
	      _drpCoreSystem.WshShell.Run(uninstallCommand, 1, true);
	    } catch (e) {}
	  };

	  return Antivirus;
	})();

	exports['default'] = Antivirus;
	module.exports = exports['default'];

	// check if the antivirus is supported

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _drpCoreStatistics = __webpack_require__(24);

	var _drpCoreStatistics2 = _interopRequireDefault(_drpCoreStatistics);

	var _drpCoreConfig = __webpack_require__(5);

	var _drpCoreConfig2 = _interopRequireDefault(_drpCoreConfig);

	var _libNotification = __webpack_require__(19);

	var _libNotification2 = _interopRequireDefault(_libNotification);

	var _libUtils = __webpack_require__(10);

	var _drpCoreSystem = __webpack_require__(9);

	var _drpCoreOs = __webpack_require__(12);

	var AppExecutable = _drpCoreConfig2['default'].application.AppExecutable;
	var App = _libUtils.AppPath + '\\' + AppExecutable;
	var AppCommand = '"' + App + '" --file_association true --fullfilepath "%1"';
	var RegAppName = 'DriverPackNotifier';

	var ExtensionSoft = {
	  // 'STDU': {
	  //   extensions: [
	  //     '.azw', '.cbr', '.cbz', '.dcx', '.djv', '.djvu', '.epub', '.fb2', '.fb2.zip', '.jb2', '.jbig2', '.mobi', '.pcx',
	  //     '.pdb', '.tcr', '.xps', '.wwf'
	  //   ],
	  //   url: 'http://download.drp.su/soft/STDU.exe',
	  //   keys: '/VERYSILENT /NORESTART'
	  // },
	  'WinRAR (Russian)': {
	    extensions: ['.001', '.7z', '.arj', '.bz2', '.bzip2', '.cab', '.cpio', '.deb', '.dmg', '.fat', '.gz', '.gzip', '.hfs', '.iso', '.lha', '.lzh', '.lzma', '.ntfs', '.rar', '.squashfs', '.swm', '.tar', '.taz', '.tbz', '.tbz2', '.tgz', '.tpz', '.txz', '.vhd', '.xar', '.xz', '.wim', '.z', '.zip'],
	    url: 'http://download.drp.su/soft/WinRARx86Rus.exe',
	    keys: '/S',
	    installedSoftLocation: _libUtils.ProgramFiles + '\\WinRAR\\WinRAR.exe',
	    category: 'Archiver'
	  },
	  'PotPlayer': {
	    extensions: ['.3g2', '.3gp2', '.3gp', '.3gpp', '.amr', '.amv', '.asf', '.avi', '.dat', '.divx', '.dmskm', '.dpg', '.dvr-ms', '.evo', '.ifo', '.f4v', '.flv', '.k3g', '.lmp4', '.m1v', '.m2t', '.m2ts', '.m2v', '.m4p', '.m4v', '.mkv', '.mov', '.mp2v', '.mp4', '.mpe', '.mpeg', '.mpg', '.mpv2', '.mqv', '.mts', '.mxf', '.nsr', '.nsv', '.ogm', '.ogv', '.qt', '.rm', '.ram', '.rmvb', '.rpm.skm', '.swf', '.ts', '.tp', '.tpr', '.trp', '.vob', '.webm', '.wm', '.wmp', '.wmv', '.ass', '.idx', '.smi', '.srt', '.ssa', '.sub', '.asx', '.dpl', '.mpl', '.mpls', '.wvx', '.dts', '.dtshd', 'eac3', '.m1a', '.m2a', '.mka', '.mpa', '.ra'],
	    url: 'http://download.drp.su/soft/PotPlayer.exe',
	    keys: '/S /Video-1 /Audio-0 /Sub-1 /Lists-0 /Shortcut-1010110 /AutoPlayVideo-1 /AutoPlayAudio-0 /ImpIni',
	    installedSoftLocation: _libUtils.ProgramFiles + '\\Daum\\PotPlayer\\PotPlayerMini.exe',
	    category: 'Player'
	  },
	  'Foxit PDF Reader': {
	    extensions: ['.fdf', '.pdf', '.xfdf', '.xdp'],
	    url: 'http://download.drp.su/soft/FoxitReader.exe',
	    keys: '-ai1MUD -gm1 -fm0',
	    installedSoftLocation: _libUtils.ProgramFiles + '\\Foxit Software\\Foxit Reader\\FoxitReader.exe',
	    category: 'Viewer'
	  },
	  // 'Yandex.Browser': {
	  //   extensions: [
	  //     '.css', '.htm', '.html', '.jhtml', '.mht', '.php', '.php3', '.phtm', '.phtml', '.sht', '.shtm', '.shtml', '.url',
	  //     '.win', '.xhtm', '.xhtml', '.xml'
	  //   ],
	  //   url: 'http://download.drp.su/updates/ya-downloader/downloader_browser.exe',
	  //   keys: '--partner drpsu --distr /passive /msicl "ILIGHT=1 YABM=n YABROWSER=y YBSENDSTAT=n VID="001"" --try 10 /log "%temp%\\YaBrInstall.log"'
	  // },
	  'uTorrent': {
	    extensions: ['.download', '.torrent', '.!ut'],
	    url: 'http://download.drp.su/soft/uTorrent.exe',
	    keys: '/S',
	    installedSoftLocation: _libUtils.ProgramFiles + '\\uTorrent\\uTorrent.exe',
	    category: 'Internet'
	  }
	};

	var FileAssociationsManager = (function () {
	  function FileAssociationsManager() {
	    _classCallCheck(this, FileAssociationsManager);

	    this.HKCU = _libUtils.UserHK;
	  }

	  FileAssociationsManager.prototype.run = function run() {
	    var _this = this;

	    if (_drpCoreOs.OSVersion < 10) {
	      this.defineNotifierAssociation();
	      for (var soft in ExtensionSoft) {
	        var extensions = ExtensionSoft[soft].extensions;
	        extensions.forEach(function (extension) {
	          if (!_this.checkExtensionHasAssociations(extension)) {
	            _this.setFileAssociation(extension);
	          }
	        });
	      }
	    }
	  };

	  FileAssociationsManager.prototype.checkExtensionHasAssociations = function checkExtensionHasAssociations(extension) {
	    var result = false;

	    try {
	      result = !!_drpCoreSystem.WshShell.RegRead('HKLM\\SOFTWARE\\Classes\\' + extension + '\\');
	    } catch (e) {}

	    if (!result) {
	      try {
	        result = !!_drpCoreSystem.WshShell.RegRead(this.HKCU + '\\SOFTWARE\\Classes\\' + extension + '\\');
	      } catch (e) {}
	    }

	    var regKeys = ['HKLM\\SOFTWARE\\Classes\\' + extension + '\\OpenWithProgIDs\\', 'HKLM\\SOFTWARE\\Classes\\' + extension + '\\OpenWithList\\', 'HKLM\\SOFTWARE\\Classes\\' + extension + '\\ShellEx\\', this.HKCU + '\\SOFTWARE\\Classes\\' + extension + '\\OpenWithProgIDs\\', this.HKCU + '\\SOFTWARE\\Classes\\' + extension + '\\OpenWithList\\', this.HKCU + '\\SOFTWARE\\Classes\\' + extension + '\\ShellEx\\', this.HKCU + '\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FileExts\\' + extension + '\\UserChoice\\'];

	    for (var i = 0; i < regKeys.length; i++) {
	      if (!result) {
	        try {
	          _drpCoreSystem.WshShell.RegRead(regKeys[i]);
	          result = true;
	          break;
	        } catch (e) {}
	      }
	    }

	    return result;
	  };

	  FileAssociationsManager.prototype.setFileAssociation = function setFileAssociation(extension) {
	    // associate file extension with our program
	    try {
	      _drpCoreSystem.WshShell.RegWrite(this.HKCU + '\\SOFTWARE\\Classes\\' + extension + '\\', RegAppName, 'REG_SZ');
	    } catch (e) {}
	  };

	  FileAssociationsManager.prototype.defineNotifierAssociation = function defineNotifierAssociation() {
	    // define a program that would take care of extension
	    try {
	      _drpCoreSystem.WshShell.RegWrite(this.HKCU + '\\SOFTWARE\\Classes\\' + RegAppName + '\\shell\\open\\command\\', AppCommand, 'REG_SZ');
	    } catch (e) {}
	  };

	  FileAssociationsManager.prototype.showConfirm = function showConfirm(extension, fileName, fullFilePath) {
	    var softName, softCategory, key, soft, extensions;
	    return regeneratorRuntime.async(function showConfirm$(context$2$0) {
	      var _this2 = this;

	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          softName = null;
	          softCategory = null;

	          for (key in ExtensionSoft) {
	            soft = ExtensionSoft[key];
	            extensions = soft.extensions;

	            if (extensions.indexOf(extension) !== -1) {
	              softName = key;
	              softCategory = soft.category;
	            }
	          }

	          if (!softName) {
	            context$2$0.next = 6;
	            break;
	          }

	          context$2$0.next = 6;
	          return regeneratorRuntime.awrap((function callee$2$0() {
	            var notification;
	            return regeneratorRuntime.async(function callee$2$0$(context$3$0) {
	              while (1) switch (context$3$0.prev = context$3$0.next) {
	                case 0:
	                  if (fileName.length > 17) {
	                    fileName = fileName.substr(0, 17) + '...';
	                  }
	                  notification = new _libNotification2['default']('fileassociation', { extension: extension, fileName: fileName, softName: softName, softCategory: softCategory });

	                  notification.on('message', function (message) {
	                    if (message === 'ok') {
	                      var params = ['--file_association', true, '--install_soft', true, '--label', encodeURIComponent(notification.config.statisticsLabel), '--extension', extension, '--fullfilepath', encodeURIComponent(fullFilePath)].join(' ');
	                      _drpCoreSystem.WshShell.Run('"' + _libUtils.AppPath + '\\Uninstall.exe" ' + params, 3, false);
	                    }
	                  });
	                  context$3$0.next = 5;
	                  return regeneratorRuntime.awrap(notification.show());

	                case 5:
	                case 'end':
	                  return context$3$0.stop();
	              }
	            }, null, _this2);
	          })());

	        case 6:

	          window.close();

	        case 7:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  FileAssociationsManager.prototype.installSoft = function installSoft(extension, label, fullFilePath) {
	    var notification, softName, softUrl, softKeys, key, soft, extensions, downloadURI, keys, fileName, targetFolder, wgetCommand, command;
	    return regeneratorRuntime.async(function installSoft$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          try {
	            _drpCoreStatistics2['default'].event({
	              action: 'soft installation started',
	              label: _drpCoreStatistics2['default'].drpVersion + ' ' + label
	            }, [], true);
	            notification = new _libNotification2['default']('fileassociation');

	            notification.send('downloading');
	            softName = null;
	            softUrl = null;
	            softKeys = null;

	            for (key in ExtensionSoft) {
	              soft = ExtensionSoft[key];
	              extensions = soft.extensions;

	              if (extensions.indexOf(extension) !== -1) {
	                softName = key;
	                softUrl = soft.url;
	                softKeys = soft.keys;
	              }
	            }

	            if (softName) {
	              downloadURI = softUrl;
	              keys = softKeys;
	              fileName = downloadURI.split('/').slice(-1);
	              targetFolder = _drpCoreSystem.WshShell.ExpandEnvironmentStrings('%TEMP%');

	              if (_drpCoreSystem.fso.FileExists(_libUtils.WgetPath)) {
	                wgetCommand = '"' + _libUtils.WgetPath + '" -P "' + targetFolder + '" "' + downloadURI + '"';
	                command = this.wrapInCmd(wgetCommand);

	                _drpCoreSystem.WshShell.Run(command, 0, true);

	                notification.send('installing');
	                _drpCoreSystem.WshShell.Run('"' + targetFolder + '\\' + fileName + '" ' + keys, 1, true);

	                _drpCoreStatistics2['default'].event({
	                  action: 'soft installation completed',
	                  label: _drpCoreStatistics2['default'].drpVersion + ' ' + label
	                }, [], true);

	                this.installedSoftName = softName;
	                notification.send('done');
	              }
	            }
	          } catch (e) {
	            _drpCoreStatistics2['default'].event({
	              action: 'soft installation failed',
	              label: _drpCoreStatistics2['default'].drpVersion + ' ' + label
	            }, [], true);
	          }

	        case 1:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  FileAssociationsManager.prototype.openInstalledSoft = function openInstalledSoft(fullFilePath) {
	    var installedSoft;
	    return regeneratorRuntime.async(function openInstalledSoft$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          if (this.installedSoftName) {
	            installedSoft = ExtensionSoft[this.installedSoftName].installedSoftLocation;

	            _drpCoreSystem.WshShell.Run('"' + installedSoft + '" "' + fullFilePath + '"', 1, false);
	          }

	        case 1:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  FileAssociationsManager.prototype.wrapInCmd = function wrapInCmd(command) {
	    return 'cmd /c "' + command + '"';
	  };

	  return FileAssociationsManager;
	})();

	exports['default'] = FileAssociationsManager;
	module.exports = exports['default'];

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _drpCoreConfig = __webpack_require__(5);

	var _drpCoreConfig2 = _interopRequireDefault(_drpCoreConfig);

	var _drpCoreStatistics = __webpack_require__(24);

	var _drpCoreStatistics2 = _interopRequireDefault(_drpCoreStatistics);

	var _libNotification = __webpack_require__(19);

	var _libNotification2 = _interopRequireDefault(_libNotification);

	var _libUtils = __webpack_require__(10);

	var _drpCoreSystem = __webpack_require__(9);

	var _drpCoreLibWMIRegistry = __webpack_require__(113);

	var _drpCoreLibWMIRegistry2 = _interopRequireDefault(_drpCoreLibWMIRegistry);

	var _drpCoreOs = __webpack_require__(12);

	var MonitoringCheckDelay = _drpCoreConfig2['default'].monitoring.MonitoringCheckDelay;

	var PartnerSoft = {
	  'Browser': [{
	    'Name': 'Yandex.Browser (Russian)',
	    'URL': 'http://download.drp.su/updates/ya-downloader/downloader_browser.exe',
	    'Keys': '--partner drpsu --distr /passive /msicl "ILIGHT=1 YABM=n YABROWSER=y YBSENDSTAT=n VID="005"" --try 10 /log "%temp%\\YaBrInstall.log"',
	    'registryReg': /^Yandex$|.*YandexBrowser.*/i,
	    'HKEY': 'HKCU',
	    'checkInstallCondition': function checkInstallCondition(installedSoftData) {
	      var _this = this;

	      var yandexBrowser = installedSoftData['Browser'].find(function (installedSoftObject) {
	        return installedSoftObject.name === _this.Name;
	      });
	      return !yandexBrowser;
	    }
	  }, {
	    'Name': 'Opera',
	    'URL': 'http://download.drp.su/soft/OperaBlink.exe',
	    'Keys': '-install -silent -launchopera=1 -setdefaultbrowser=1',
	    'registryReg': /.*Opera.*/i,
	    'HKEY': 'HKLM',
	    'checkInstallCondition': function checkInstallCondition(installedSoftData) {
	      return false;
	    }
	  }, {
	    'Name': 'Firefox',
	    'URL': 'http://download.drp.su/soft/Firefox.exe',
	    'Keys': '-ms -ira',
	    'registryReg': /.*Mozilla\s?Firefox.*/i,
	    'HKEY': 'HKLM',
	    'checkInstallCondition': function checkInstallCondition(installedSoftData) {
	      return false;
	    }
	  }],
	  'System': [{
	    'Name': 'WinRAR (Russian)',
	    'URL': 'http://download.drp.su/soft/WinRARx86Rus.exe',
	    'Keys': '/S',
	    'registryReg': /.*WinRAR.*/i,
	    'HKEY': 'HKLM',
	    'checkInstallCondition': function checkInstallCondition(installedSoftData) {
	      var _this2 = this;

	      var winRAR = installedSoftData['System'].find(function (installedSoftObject) {
	        return installedSoftObject.name === _this2.Name;
	      });
	      return !winRAR;
	    }
	  }]
	};

	// TODO: improve!

	var Soft = (function () {
	  function Soft() {
	    _classCallCheck(this, Soft);

	    this.softRegistryKey = 'SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\';
	    this.installedSoftData = {};
	    this.allInstalledSoftData = [];

	    this.registry = new _drpCoreLibWMIRegistry2['default']();
	  }

	  Soft.prototype.run = function run() {
	    return regeneratorRuntime.async(function run$(context$2$0) {
	      var _this3 = this;

	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          if (!_libUtils.isOldOS && _drpCoreOs.OSVersion < 10) {
	            (function () {
	              _this3.collectInstalledSoftData();
	              // this.collectAllInstalledSoftData()

	              var softToBeInstalled = [];
	              Object.entries(PartnerSoft).forEach(function (_ref) {
	                var category = _ref[0];
	                var categorySoft = _ref[1];

	                categorySoft.forEach(function (partnerSoftObject) {
	                  var toBeInstalled = partnerSoftObject.checkInstallCondition(_this3.installedSoftData);
	                  if (toBeInstalled) {
	                    softToBeInstalled.push({
	                      softName: partnerSoftObject.Name,
	                      softCategory: category
	                    });
	                  }
	                });
	              });
	              var queue = Promise.resolve();
	              softToBeInstalled.forEach(function (_ref2) {
	                var softName = _ref2.softName;
	                var softCategory = _ref2.softCategory;

	                queue = queue.then(function () {
	                  return _this3.showConfirm({ softName: softName, softCategory: softCategory });
	                }).then(function () {
	                  return _libUtils.timeout(MonitoringCheckDelay);
	                });
	              });
	            })();
	          }

	        case 1:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Soft.prototype.collectInstalledSoftData = function collectInstalledSoftData() {
	    var _this4 = this;

	    this.getInstalledSoftRegistryKeys();
	    Object.entries(PartnerSoft).forEach(function (_ref3) {
	      var category = _ref3[0];
	      var categorySoft = _ref3[1];

	      _this4.installedSoftData[category] = [];
	      categorySoft.forEach(function (partnerSoftObject) {
	        var softState = _this4.getSoftState(partnerSoftObject);
	        if (softState) {
	          softState.name = partnerSoftObject.Name;
	          _this4.installedSoftData[category].push(softState);
	        }
	      });
	    });
	  };

	  Soft.prototype.getInstalledSoftRegistryKeys = function getInstalledSoftRegistryKeys() {
	    var installedSoftHKLM = [];
	    var installedSoftHKCU = [];
	    try {
	      installedSoftHKLM = this.registry.EnumKey(this.registry.HKLM, this.softRegistryKey);
	    } catch (e) {}
	    try {
	      installedSoftHKCU = this.registry.EnumKey(this.registry.HKCU, this.softRegistryKey);
	    } catch (e) {}
	    this.installedSoftRegKeys = installedSoftHKLM.concat(installedSoftHKCU);
	  };

	  Soft.prototype.getSoftState = function getSoftState(partnerSoftObject) {
	    var result = null;
	    var softKey = this.installedSoftRegKeys.find(function (softKey) {
	      return partnerSoftObject.registryReg.test(softKey);
	    });
	    if (softKey) {
	      result = {};
	      result.displayName = this.registry.GetStringValue(this.registry[partnerSoftObject.HKEY], this.softRegistryKey + '\\' + softKey, 'DisplayName');
	      result.displayVersion = this.registry.GetStringValue(this.registry[partnerSoftObject.HKEY], this.softRegistryKey + '\\' + softKey, 'DisplayVersion');
	    }
	    return result;
	  };

	  Soft.prototype.collectAllInstalledSoftData = function collectAllInstalledSoftData() {
	    var _this5 = this;

	    this.allInstalledSoftData = [];

	    var installedSoftHKLM = [];
	    var installedSoftHKCU = [];
	    try {
	      installedSoftHKLM = this.registry.EnumKey(this.registry.HKLM, this.softRegistryKey);
	    } catch (e) {}
	    try {
	      installedSoftHKCU = this.registry.EnumKey(this.registry.HKCU, this.softRegistryKey);
	    } catch (e) {}

	    // HKLM
	    installedSoftHKLM.forEach(function (softKey) {
	      var softData = {};
	      softData.displayName = _this5.registry.GetStringValue(_this5.registry.HKLM, _this5.softRegistryKey + '\\' + softKey, 'DisplayName');
	      softData.displayVersion = _this5.registry.GetStringValue(_this5.registry.HKLM, _this5.softRegistryKey + '\\' + softKey, 'DisplayVersion');
	      softData.publisher = _this5.registry.GetStringValue(_this5.registry.HKLM, _this5.softRegistryKey + '\\' + softKey, 'Publisher');
	      if (softData.displayName) {
	        _this5.allInstalledSoftData.push(softData);
	      }
	    });

	    // HKCU
	    installedSoftHKCU.forEach(function (softKey) {
	      var softData = {};
	      softData.displayName = _this5.registry.GetStringValue(_this5.registry.HKCU, _this5.softRegistryKey + '\\' + softKey, 'DisplayName');
	      softData.displayVersion = _this5.registry.GetStringValue(_this5.registry.HKCU, _this5.softRegistryKey + '\\' + softKey, 'DisplayVersion');
	      softData.publisher = _this5.registry.GetStringValue(_this5.registry.HKCU, _this5.softRegistryKey + '\\' + softKey, 'Publisher');
	      if (softData.displayName) {
	        _this5.allInstalledSoftData.push(softData);
	      }
	    });
	  };

	  Soft.prototype.showConfirm = function showConfirm(_ref4) {
	    var softName = _ref4.softName;
	    var softCategory = _ref4.softCategory;
	    var notification, status, params;
	    return regeneratorRuntime.async(function showConfirm$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          notification = new _libNotification2['default']('partnersoft-' + softCategory.toLowerCase(), { softName: softName });
	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(notification.show());

	        case 3:
	          status = context$2$0.sent;

	          if (status === 'ok') {
	            params = ['--partnersoft', true, '--label', notification.config.statisticsLabel, '--softname', encodeURIComponent(softName), '--softcategory', encodeURIComponent(softCategory)].join(' ');

	            _drpCoreSystem.WshShell.Run('"' + _libUtils.AppPath + '\\Uninstall.exe" ' + params, 3, false);
	          }

	        case 5:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Soft.prototype.install = function install(_ref5) {
	    var label = _ref5.label;
	    var softname = _ref5.softname;
	    var softcategory = _ref5.softcategory;
	    return regeneratorRuntime.async(function install$(context$2$0) {
	      var _this6 = this;

	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          try {
	            (function () {
	              _drpCoreStatistics2['default'].event({
	                action: 'soft installation started',
	                label: _drpCoreStatistics2['default'].drpVersion + ' ' + label
	              }, [], true);
	              var softName = softname;
	              var partnerSoftObject = PartnerSoft[softcategory].find(function (softObject) {
	                return softObject.Name === softName;
	              });
	              var softUrl = partnerSoftObject.URL;
	              var softKeys = partnerSoftObject.Keys;

	              if (softName) {
	                var downloadURI = softUrl;
	                var keys = softKeys;
	                var fileName = downloadURI.split('/').slice(-1);

	                var targetFolder = _drpCoreSystem.WshShell.ExpandEnvironmentStrings('%TEMP%');

	                if (_drpCoreSystem.fso.FileExists(_libUtils.WgetPath)) {
	                  var wgetCommand = '"' + _libUtils.WgetPath + '" -P "' + targetFolder + '" "' + downloadURI + '"';
	                  var command = _this6.wrapInCmd(wgetCommand);
	                  _drpCoreSystem.WshShell.Run(command, 0, true);

	                  _drpCoreSystem.WshShell.Run('"' + targetFolder + '\\' + fileName + '" ' + keys, 1, true);

	                  _drpCoreStatistics2['default'].event({
	                    action: 'soft installation completed',
	                    label: _drpCoreStatistics2['default'].drpVersion + ' ' + label
	                  }, [], true);
	                }
	              }
	            })();
	          } catch (e) {
	            _drpCoreStatistics2['default'].event({
	              action: 'soft installation failed',
	              label: _drpCoreStatistics2['default'].drpVersion + ' ' + label
	            }, [], true);
	          }

	        case 1:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Soft.prototype.wrapInCmd = function wrapInCmd(command) {
	    return 'cmd /c "' + command + '"';
	  };

	  return Soft;
	})();

	exports['default'] = Soft;
	module.exports = exports['default'];

/***/ },
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _drpCoreConfig = __webpack_require__(5);

	var _drpCoreConfig2 = _interopRequireDefault(_drpCoreConfig);

	var _drpCoreStatistics = __webpack_require__(24);

	var _drpCoreStatistics2 = _interopRequireDefault(_drpCoreStatistics);

	var _drpCoreLogs = __webpack_require__(11);

	var _drpCoreSystem = __webpack_require__(9);

	var hashPath = 'HKLM\\SOFTWARE\\drpsu\\hash';

	var Metric = (function () {
	  function Metric() {
	    _classCallCheck(this, Metric);

	    this.hash = _drpCoreSystem.RegRead(hashPath);
	  }

	  Metric.prototype.encode = function encode(json) {
	    return encodeURIComponent(JSON.stringify(json));
	  };

	  Metric.prototype.send = function send(metric, data) {
	    var id = _drpCoreStatistics2['default'].computerId;
	    if (!id || !this.hash) return;
	    var json = { id: id, hash: this.hash, data: data };
	    var url = _drpCoreConfig2['default'].metrics.serverURL + '?' + ['metric=' + metric, 'data=' + this.encode(json), 'z=' + Math.random()].join('&');
	    var promise = _drpCoreSystem.sendImg(url);
	    promise.then(function () {
	      _drpCoreLogs.log('Sent metric ' + metric, [url], json);
	    }, function (err) {
	      _drpCoreLogs.log('Error sending metric ' + metric, [url], json, err);
	    });
	    return promise;
	  };

	  return Metric;
	})();

	exports['default'] = Metric;
	module.exports = exports['default'];

/***/ },
/* 306 */,
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _drpCoreWmi = __webpack_require__(3);

	var _utils = __webpack_require__(10);

	var isSecurityCenterServiceRunning = function isSecurityCenterServiceRunning() {
	  var service = _drpCoreWmi.getWMIObjects(['State', 'Name'], 'Win32_Service', 'Name="wscsvc"')[0];
	  return service && service.State === 'Running';
	};

	var getAntivirusStatus = function getAntivirusStatus(antivirus) {
	  if (!_utils.isOldOS) {
	    var productState = parseInt(antivirus.productState, 10).toString(16);
	    var upToDateState = productState.substring(productState.length - 2, productState.length);
	    var avActiveState = productState.substring(productState.length - 4, productState.length - 2);
	    return {
	      upToDate: upToDateState === '00',
	      active: avActiveState === '10' || avActiveState === '11'
	    };
	  } else {
	    var upToDateState = antivirus.productUptoDate;
	    var avActiveState = antivirus.onAccessScanningEnabled;
	    return {
	      upToDate: upToDateState !== 'false',
	      active: avActiveState !== 'false'
	    };
	  }
	};

	var getDiag = function getDiag() {
	  var _getWMIObjects$0 = _drpCoreWmi.getWMIObjects(['Caption', 'Manufacturer', 'Model', 'TotalPhysicalMemory'], 'Win32_ComputerSystem')[0];

	  var Caption = _getWMIObjects$0.Caption;
	  var Manufacturer = _getWMIObjects$0.Manufacturer;
	  var Model = _getWMIObjects$0.Model;
	  var TotalPhysicalMemory = _getWMIObjects$0.TotalPhysicalMemory;

	  var _getWMIObjects$02 = _drpCoreWmi.getWMIObjects(['Manufacturer', 'SMBIOSBIOSVersion', 'ReleaseDate'], 'Win32_BIOS')[0];

	  var BIOSManufacturer = _getWMIObjects$02.Manufacturer;
	  var SMBIOSBIOSVersion = _getWMIObjects$02.SMBIOSBIOSVersion;
	  var BIOSDate = _getWMIObjects$02.ReleaseDate;

	  var _getWMIObjects$03 = _drpCoreWmi.getWMIObjects(['Caption', 'CSDVersion', 'OSArchitecture'], 'Win32_OperatingSystem')[0];

	  var OSCaption = _getWMIObjects$03.Caption;
	  var CSDVersion = _getWMIObjects$03.CSDVersion;
	  var OSArchitecture = _getWMIObjects$03.OSArchitecture;

	  var videoAdapters = _drpCoreWmi.getWMIObjects(['Caption', 'AdapterRAM'], 'Win32_VideoController');
	  var diskDrives = _drpCoreWmi.getWMIObjects(['Model', 'Status'], 'Win32_DiskDrive');
	  var diag = {
	    caption: Caption,
	    model: Manufacturer + ' ' + Model,
	    processor: _drpCoreWmi.getWMIObjects(['Name'], 'Win32_Processor')[0].Name.trim(),
	    ram: Math.floor(TotalPhysicalMemory / 1024 / 1024) + ' MB',
	    bios: BIOSManufacturer + ' ' + SMBIOSBIOSVersion + ', ' + [BIOSDate.slice(0, 4), BIOSDate.slice(4, 6), BIOSDate.slice(6, 8)].join('.')
	  };
	  diag.system = OSCaption.trim();
	  if (CSDVersion) diag.system += ' ' + CSDVersion;
	  if (OSArchitecture) diag.system += ' ' + OSArchitecture;
	  diag.videos = videoAdapters.map(function (adapter) {
	    var res = {
	      model: adapter.Caption
	    };
	    if (adapter.AdapterRAM) res.ram = Math.floor(adapter.AdapterRAM / 1024 / 1024) + ' MB';
	    return res;
	  });
	  diag.disks = diskDrives.map(function (disk) {
	    return {
	      model: disk.Model,
	      status: disk.Status
	    };
	  });
	  diag.antiviruses = [];
	  try {
	    if (isSecurityCenterServiceRunning()) {
	      var antiviruses = _drpCoreWmi.getWMIObjects(['displayName', 'productState', 'productUptoDate', 'onAccessScanningEnabled'], 'AntiVirusProduct', null, _utils.objWMIServiceSC);
	      diag.antiviruses = antiviruses.map(function (antivirus) {
	        var _getAntivirusStatus = getAntivirusStatus(antivirus);

	        var upToDate = _getAntivirusStatus.upToDate;
	        var active = _getAntivirusStatus.active;

	        return {
	          name: antivirus.displayName,
	          active: active,
	          uptodate: upToDate
	        };
	      });
	    }
	  } catch (e) {
	    diag.antiviruses = [];
	  }
	  return diag;
	};
	exports.getDiag = getDiag;

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _drpCoreStatistics = __webpack_require__(24);

	var _drpCoreStatistics2 = _interopRequireDefault(_drpCoreStatistics);

	var _drpCoreLogs = __webpack_require__(11);

	var _drpCoreConfig = __webpack_require__(5);

	var _drpCoreSystem = __webpack_require__(9);

	var _drpCoreWmi = __webpack_require__(3);

	var _utils = __webpack_require__(10);

	var AppName = _drpCoreConfig.application.AppName;
	var DisplayName = _drpCoreConfig.application.DisplayName;
	var DisplayVersion = _drpCoreConfig.application.DisplayVersion;
	var AppExecutable = _drpCoreConfig.application.AppExecutable;
	var Uninstall = _drpCoreConfig.application.Uninstall;
	var DisplayIcon = _drpCoreConfig.application.DisplayIcon;
	var Publisher = _drpCoreConfig.application.Publisher;

	var REG_CV = 'HKLM\\Software\\Microsoft\\Windows\\CurrentVersion';

	var Watcher = (function () {
	  function Watcher() {
	    _classCallCheck(this, Watcher);
	  }

	  Watcher.prototype.install = function install() {
	    // if Uninstall key doesn't exist
	    _utils.fixUninstallRegistryKey();

	    var app = _utils.AppPathRoot + '\\' + AppExecutable;

	    // add to Startup
	    this.addToStartup({
	      AppName: AppName,
	      app: app
	    });

	    // remove old task from Schedule tasks
	    this.removeTask({
	      AppName: AppName
	    });

	    // add to Schedule tasks
	    var d = new Date();
	    d.setMinutes(d.getMinutes() + 1);
	    var startTime = _utils.getTimeFromDate(d);
	    var args = '';
	    this.createTask({
	      startTime: startTime,
	      app: app,
	      args: args,
	      AppName: AppName
	    });

	    // add to Uninstall a program
	    this.addToUninstallList({
	      AppName: AppName,
	      DisplayName: DisplayName,
	      UninstallString: '"' + _utils.AppPathRoot + '\\' + Uninstall.cmd + '" ' + Uninstall.arguments,
	      DisplayVersion: DisplayVersion,
	      DisplayIcon: _utils.AppPathRoot + '\\' + DisplayIcon,
	      Publisher: Publisher
	    });
	  };

	  Watcher.prototype.uninstall = function uninstall() {
	    /* global confirm */
	    var confirmResult = ("prod") === 'dev' || confirm(_drpCoreConfig.application.UninstallConfirm);
	    if (confirmResult) {
	      this.removeTask({
	        AppName: AppName
	      });
	      this.removeFromStartup({
	        AppName: AppName,
	        app: _utils.AppPathRoot + '\\' + AppExecutable
	      });
	      this.removeFromUninstallList({
	        AppName: AppName,
	        DisplayName: DisplayName,
	        UninstallString: '"Path to the uninstaller .exe"'
	      });
	      _utils.removeAppFolder();
	      try {
	        _drpCoreSystem.killProcess('%DriverPack Notifier\%run.hta%');
	      } catch (e) {}
	    }
	  };

	  Watcher.prototype.addToStartup = function addToStartup(a) {
	    _drpCoreLogs.log('Adding ' + a.app + ' to Startup');
	    _drpCoreSystem.RegWrite(REG_CV + '\\Run\\' + a.AppName, a.app + ' --run startup');
	  };

	  Watcher.prototype.removeFromStartup = function removeFromStartup(a) {
	    _drpCoreLogs.log('Removing ' + a.app + ' from Startup');
	    _drpCoreSystem.RegDelete(REG_CV + '\\Run\\' + a.AppName);
	  };

	  Watcher.prototype.addToUninstallList = function addToUninstallList(a) {
	    _drpCoreLogs.log('Adding ' + a.DisplayName + ' to Uninstall list');
	    var reg = REG_CV + '\\Uninstall\\' + a.AppName;
	    _drpCoreSystem.RegWrite(reg + '\\DisplayName', a.DisplayName);
	    _drpCoreSystem.RegWrite(reg + '\\UninstallString', a.UninstallString);
	    _drpCoreSystem.RegWrite(reg + '\\DisplayVersion', a.DisplayVersion);
	    _drpCoreSystem.RegWrite(reg + '\\DisplayIcon', a.DisplayIcon);
	    _drpCoreSystem.RegWrite(reg + '\\Publisher', a.Publisher);
	  };

	  Watcher.prototype.removeFromUninstallList = function removeFromUninstallList(a) {
	    _drpCoreLogs.log('Removing ' + a.DisplayName + ' from Uninstall list');
	    _drpCoreSystem.RegDelete(REG_CV + '\\Uninstall\\' + a.AppName + '\\');
	    _drpCoreStatistics2['default'].event({ action: 'application uninstalled' }, [], true);
	  };

	  Watcher.prototype.createTask = function createTask(a) {
	    _drpCoreLogs.log('Creating scheduled task. Run at ' + a.startTime);
	    try {
	      if (_utils.isOldOS) {
	        a.command = '"' + a.app + '"';
	        var objNewJob = _drpCoreWmi.objWMIService.Get('Win32_ScheduledJob');
	        objNewJob.Create(a.command, _utils.formatTime(a.startTime), true, 127, 0, true, '');
	      } else {
	        a.command = '"\'' + a.app + '\'"';
	        var creatCmd = 'schtasks /Create /TN' + (' "' + a.AppName + '"') + ' /SC DAILY /ST ' + a.startTime + ' /TR ' + a.command;
	        _drpCoreSystem.WshShell.Run(creatCmd, 0);
	      }
	    } catch (err) {}
	  };

	  Watcher.prototype.removeTask = function removeTask(a) {
	    _drpCoreLogs.log('Removing scheduled task. Run at ' + a.startTime);
	    try {
	      if (_utils.isOldOS) {
	        var colItems = _drpCoreWmi.objWMIService.ExecQuery('SELECT * FROM Win32_ScheduledJob WHERE ' + 'Command LIKE "%DriverPack Notifier\%DriverPackNotifier.exe%"');
	        _drpCoreSystem.iterate(colItems, function (item) {
	          return item.Delete();
	        });
	      } else {
	        var creatCmd = 'schtasks /Delete /TN' + ' "' + a.AppName + '" /F';
	        _drpCoreSystem.WshShell.Run(creatCmd, 0, true);
	      }
	    } catch (err) {}
	  };

	  return Watcher;
	})();

	exports['default'] = new Watcher();
	module.exports = exports['default'];

/***/ },
/* 309 */
/***/ function(module, exports) {

	'use strict';

	exports.__esModule = true;
	var bankingData = {
	  'Сбербанк Онлайн': 'https://online.sberbank.ru/CSAFront/index.do',
	  'ВТБ24-Онлайн': 'https://online.vtb24.ru/content/telebank-client/ru/login.html',
	  'Homebank GPB': 'https://homebank.gazprombank.ru/',
	  'Банк Открытие': 'https://online.openbank.ru/logon',
	  'Россельхозбанк – Интернет-офис': 'https://cabinet.rshb.ru/',
	  'Альфа-Клик': 'https://click.alfabank.ru/',
	  'Национальный Клиринговый Центр | Миссия': 'http://www.nkcbank.ru/',
	  'Enter.UniCredit': 'https://enter.unicredit.ru/',
	  'МКБ Онлайн': 'https://online.mkb.ru/',
	  'Raiffeisen Connect': 'https://connect.raiffeisen.ru/',
	  'РОСБАНК': 'https://ibank.rosbank.ru/',
	  'ROSBANK': 'https://ibank.rosbank.ru/',
	  'Интернет-банк ВТБ Банк Москвы': 'https://online.bm.ru/',
	  'АБ РОССИЯ | Интернет-банк': 'https://i.abr.ru/',
	  'Интернет-банк - банк Санкт-Петербург': 'https://i.bspb.ru/',
	  'Internet bank - Bank Saint-Petersburg': 'https://i.bspb.ru/',
	  'Citibank Online': 'https://www.citibank.ru/RUGCB/JSO/signon/DisplayUsernameSignon.do',
	  'МТС Банк': 'https://personalbank.ru/',
	  'TRUST Online': 'https://online.trust.ru/',
	  'Интернет-банк': 'https://browser.yandex.ru/welcome-protect-calypso/',
	  'Интернет Банк': 'https://browser.yandex.ru/welcome-protect-calypso/',
	  'интернет-банк': 'https://browser.yandex.ru/welcome-protect-calypso/'
	};

	exports.bankingData = bankingData;
	var newsData = {
	  'Новости': /Новости/i,
	  'Аргументы и Факты': /Аргументы и Факты/,
	  'Комсомольская правда': /Комсомольская правда/,
	  'korrespondent.net': /korrespondent\.net/,
	  'РИА новости': /РИА новости/,
	  'Московский Комсомолец': /Московский Комсомолец/,
	  'Вести.Ru': /Вести\.Ru/,
	  'Газета.Ru': /Газета\.Ru/,
	  'Lenta.ru': /Lenta\.ru/,
	  'L!FE.ru': /L!FE\.ru/,
	  'Российская Газета': /Российская Газета/,
	  'Эхо Москвы': /Эхо Москвы/,
	  'HTB.Ru': /HTB\.Ru/,
	  'MAXIM Online': /MAXIM Online/,
	  'Афиша': /Афиша/,
	  'Кинопоиск': /Кинопоиск/,
	  'Лепрозорий': /Лепрозорий/,
	  'Esquire': /Esquire/,
	  'Журнал GQ': /журнал GQ/,
	  'Men\'s Health': /Men's Health Россия/,
	  'Лайфхакер': /Лайфхакер/,
	  'Fishki.net': /Fishki.net/,
	  'ЯПлакалъ': /ЯПлакалъ/
	};

	exports.newsData = newsData;
	var businessNewsData = {
	  'BBC': /BBC Русская служба/,
	  'Коммерсантъ': /Коммерсантъ/,
	  'РБК': /РБК/,
	  'Ведомости': /ВЕДОМОСТИ/,
	  'Forbes.ru': /Forbes\.ru/,
	  'Известия': /Известия/,
	  'Секрет Фирмы': /Секрет Фирмы/
	};

	exports.businessNewsData = businessNewsData;
	var yandexMarketData = {
	  'интернет-магазин Юлмарт': /(.*), \d{4,}:/,
	  'в интернет-магазине Wildberries.ru': /(.*) \d{4,} в интернет-магазине/,
	  'в интернет-магазине СИТИЛИНК': /(.*) купить по цене/,
	  '- купить в М.Видео': /(.*) - купить в М.Видео/,
	  'в интернет-магазине OZON.ru': /Купить (.*) в интернет-магазине OZON.ru/,
	  'интернет магазина Связной': /Купить (.*): /,
	  'в интернет-магазине ЭЛЬДОРАДО': /(.*) – купить/,
	  'в интернет-магазине Комус': /- купить товар (.*) в интернет-магазине Комус/,
	  'в интернет-магазине Спортмастер': /(.*) - купить за/,
	  'в интернет магазине Technopoint': /Купить (.*) по супер низкой цене/,
	  'в интернет-магазине Enter.ru': /(.*) купить по цене/,
	  'в интернет-магазине Техносила': /Купить (.*) в \S+, цена/,
	  '- купить в Media Markt': /(.*) - купить в Media Markt/,
	  '- интернет-магазине Евросеть': /(.*): выгодные цены купить/,
	  'купить на AliExpress': /(.*) купить на AliExpress/,
	  'купить в интернет магазине DNS': /(.*) – купить в интернет магазине DNS/,
	  'в интернет магазине МТС': / - цена на (.*), купить/,
	  'в интернет-магазине МегаФон': /(.*) - купить/
	};

	exports.yandexMarketData = yandexMarketData;
	var yandexServicesData = {
	  'Яндекс.Авиабилет': 'https://avia.yandex.ru/', // The endings were removed here and below: It's not a misprint!
	  'Яндекс.Афиш': 'https://afisha.yandex.ru/',
	  'Смотрите видео онлайн: сериалы, мультики, игры, клипы, фильмы на Яндексе': 'https://yandex.ru/video/',
	  'Яндекс.Деньг': 'https://money.yandex.ru/',
	  'Yandex.Money': 'https://money.yandex.ru/',
	  'Яндекс.Диск': 'https://disk.yandex.ru/',
	  'Яндекс.Интернетометр': 'https://yandex.ru/internet/',
	  'Яндекс.Картинк': 'https://yandex.ru/images/',
	  'Яндекс.Карты': 'https://yandex.ru/maps/',
	  'КиноПоиск+': 'http://plus.kinopoisk.ru/',
	  'Яндекс.Маркет': 'https://market.yandex.ru/',
	  'Яндекс.Метро': 'https://metro.yandex.ru/',
	  'Яндекс.Музык': 'https://music.yandex.ru/',
	  'Яндекс.Недвижимост': 'https://realty.yandex.ru/',
	  'Яндекс.Переводчик': 'https://translate.yandex.ru/',
	  'Яндекс.Погод': 'https://pogoda.yandex.ru/',
	  'Яндекс.Почт': 'https://mail.yandex.ru/',
	  'Яндекс.Работ': 'https://rabota.yandex.ru/',
	  'Яндекс.Радио': 'https://radio.yandex.ru/',
	  'Яндекс.Такси': 'https://taxi.yandex.ru/'
	};

	exports.yandexServicesData = yandexServicesData;
	var geoCityData = ['Абаза', 'Абакан', 'Абдулино', 'Абинск', 'Агидель', 'Агрыз', 'Адыгейск', 'Азнакаево', 'Азов', 'Ак-Довурак', 'Аксай', 'Алагир', 'Алапаевск', 'Алатырь', 'Алдан', 'Алейск', 'Александров', 'Александровск', 'Александровск-Сахалинский', 'Алексеевка', 'Алексин', 'Алзамай', 'Алупка', 'Алушта', 'Альметьевск', 'Амурск', 'Анадырь', 'Анапа', 'Ангарск', 'Андреаполь', 'Анжеро-Судженск', 'Анива', 'Апатиты', 'Апрелевка', 'Апшеронск', 'Арамиль', 'Аргун', 'Ардатов', 'Ардон', 'Арзамас', 'Аркадак', 'Армавир', 'Армянск', 'Армянськ', 'Арсеньев', 'Арск', 'Артем', 'Артемовск', 'Артемовский', 'Архангельск', 'Асбест', 'Асино', 'Астрахань', 'Аткарск', 'Ахтубинск', 'Ахтубинск-7', 'Ачинск', 'Аша', 'Бабаево', 'Бабушкин', 'Бавлы', 'Багратионовск', 'Байкальск', 'Баймак', 'Бакал', 'Баксан', 'Балабаново', 'Балаково', 'Балахна', 'Балашиха', 'Балашов', 'Балей', 'Балтийск', 'Барабинск', 'Барнаул', 'Барыш', 'Батайск', 'Бахчисарай', 'Бежецк', 'Белая Калитва', 'Белая Холуница', 'Белгород', 'Белебей', 'Белев', 'Белинский', 'Белово', 'Белогорск', 'Белогорск', 'Белозерск', 'Белокуриха', 'Беломорск', 'Белорецк', 'Белореченск', 'Белоусово', 'Белоярский', 'Белый', 'Бердск', 'Березники', 'Березовский', 'Березовский', 'Беслан', 'Бийск', 'Бикин', 'Билибино', 'Биробиджан', 'Бирск', 'Бирюсинск', 'Бирюч', 'Благовещенск', 'Благовещенск', 'Благодарный', 'Бобров', 'Богданович', 'Богородицк', 'Богородск', 'Боготол', 'Богучар', 'Бодайбо', 'Бокситогорск', 'Болгар', 'Бологое', 'Болотное', 'Болохово', 'Болхов', 'Большой Камень', 'Бор', 'Борзя', 'Борисоглебск', 'Боровичи', 'Боровск', 'Боровск-1', 'Бородино', 'Братск', 'Бронницы', 'Брянск', 'Бугульма', 'Бугуруслан', 'Буденновск', 'Бузулук', 'Буинск', 'Буй', 'Буйнакск', 'Бутурлиновка', 'Валдай', 'Валуйки', 'Велиж', 'Великие Луки', 'Великие Луки-1', 'Великий Новгород', 'Великий Устюг', 'Вельск', 'Венев', 'Верещагино', 'Верея', 'Верхнеуральск', 'Верхний Тагил', 'Верхний Уфалей', 'Верхняя Пышма', 'Верхняя Салда', 'Верхняя Тура', 'Верхотурье', 'Верхоянск', 'Весьегонск', 'Ветлуга', 'Видное', 'Вилюйск', 'Вилючинск', 'Вихоревка', 'Вичуга', 'Владивосток', 'Владикавказ', 'Владимир', 'Волгоград', 'Волгодонск', 'Волгореченск', 'Волжск', 'Волжский', 'Вологда', 'Володарск', 'Волоколамск', 'Волосово', 'Волхов', 'Волчанск', 'Вольск', 'Вольск-18', 'Воркута', 'Воронеж', 'Воронеж-45', 'Ворсма', 'Воскресенск', 'Воткинск', 'Всеволожск', 'Вуктыл', 'Выборг', 'Выкса', 'Высоковск', 'Высоцк', 'Вытегра', 'Вышний Волочек', 'Вяземский', 'Вязники', 'Вязьма', 'Вятские Поляны', 'Гаврилов Посад', 'Гаврилов-Ям', 'Гагарин', 'Гаджиево', 'Гай', 'Галич', 'Гатчина', 'Гвардейск', 'Гдов', 'Геленджик', 'Георгиевск', 'Глазов', 'Голицыно', 'Горбатов', 'Горно-Алтайск', 'Горнозаводск', 'Горняк', 'Городец', 'Городище', 'Городовиковск', 'Городской округ Черноголовка', 'Гороховец', 'Горячий Ключ', 'Грайворон', 'Гремячинск', 'Грозный', 'Грязи', 'Грязовец', 'Губаха', 'Губкин', 'Губкинский', 'Гудермес', 'Гуково', 'Гулькевичи', 'Гурьевск', 'Гурьевск', 'Гусев', 'Гусиноозерск', 'Гусь-Хрустальный', 'Давлеканово', 'Дагестанские Огни', 'Далматово', 'Дальнегорск', 'Дальнереченск', 'Данилов', 'Данков', 'Дегтярск', 'Дедовск', 'Демидов', 'Дербент', 'Десногорск', 'Джанкой', 'Джанкой', 'Дзержинск', 'Дзержинский', 'Дивногорск', 'Дигора', 'Димитровград', 'Дмитриев', 'Дмитров', 'Дмитровск', 'Дно', 'Добрянка', 'Долгопрудный', 'Долинск', 'Домодедово', 'Донецк', 'Донской', 'Дорогобуж', 'Дрезна', 'Дубна', 'Дубовка', 'Дудинка', 'Духовщина', 'Дюртюли', 'Дятьково', 'Евпатория', 'Егорьевск', 'Ейск', 'Екатеринбург', 'Елабуга', 'Елец', 'Елизово', 'Ельня', 'Еманжелинск', 'Емва', 'Енисейск', 'Ермолино', 'Ершов', 'Ессентуки', 'Ефремов', 'Железноводск', 'Железногорск', 'Железногорск', 'Железногорск-Илимский', 'Железнодорожный', 'Жердевка', 'Жигулевск', 'Жиздра', 'Жирновск', 'Жуков', 'Жуковка', 'Жуковский', 'Завитинск', 'Заводоуковск', 'Заволжск', 'Заволжье', 'Задонск', 'Заинск', 'Закаменск', 'Заозерный', 'Заозерск', 'Западная Двина', 'Заполярный', 'Зарайск', 'Заречный', 'Заречный', 'Заринск', 'Звенигово', 'Звенигород', 'Зверево', 'Зеленогорск', 'Зеленогорск', 'Зеленоград', 'Зеленоградск', 'Зеленодольск', 'Зеленокумск', 'Зерноград', 'Зея', 'Зима', 'Златоуст', 'Злынка', 'Змеиногорск', 'Знаменск', 'Зубцов', 'Зуевка', 'Ивангород', 'Иваново', 'Ивантеевка', 'Ивдель', 'Игарка', 'Ижевск', 'Избербаш', 'Изобильный', 'Иланский', 'Инза', 'Инкерман', 'Инсар', 'Инта', 'Ипатово', 'Ирбит', 'Иркутск', 'Иркутск-45', 'Исилькуль', 'Искитим', 'Истра', 'Истра-1', 'Ишим', 'Ишимбай', 'Йошкар-Ола', 'Кадников', 'Казань', 'Калач', 'Калачинск', 'Калач-на-Дону', 'Калининград', 'Калининск', 'Калтан', 'Калуга', 'Калязин', 'Камбарка', 'Каменка', 'Каменногорск', 'Каменск-Уральский', 'Каменск-Шахтинский', 'Камень-на-Оби', 'Камешково', 'Камызяк', 'Камышин', 'Камышлов', 'Канаш', 'Кандалакша', 'Канск', 'Карабаново', 'Карабаш', 'Карабулак', 'Карасук', 'Карачаевск', 'Карачев', 'Каргат', 'Каргополь', 'Карпинск', 'Карталы', 'Касимов', 'Касли', 'Каспийск', 'Катав-Ивановск', 'Катайск', 'Качканар', 'Кашин', 'Кашира', 'Кашира-8', 'Кедровый', 'Кемерово', 'Кемь', 'Керчь', 'Кизел', 'Кизилюрт', 'Кизляр', 'Кимовск', 'Кимры', 'Кингисепп', 'Кинель', 'Кинешма', 'Киреевск', 'Киренск', 'Киржач', 'Кириллов', 'Кириши', 'Киров', 'Киров', 'Кировград', 'Кирово-Чепецк', 'Кировск', 'Кировск', 'Кирс', 'Кирсанов', 'Киселевск', 'Кисловодск', 'Климовск', 'Клин', 'Клинцы', 'Княгинино', 'Ковдор', 'Ковров', 'Ковылкино', 'Когалым', 'Кодинск', 'Козельск', 'Козловка', 'Козьмодемьянск', 'Кола', 'Кологрив', 'Коломна', 'Колпашево', 'Колпино', 'Кольчугино', 'Коммунар', 'Комсомольск', 'Комсомольск-на-Амуре', 'Конаково', 'Кондопога', 'Кондрово', 'Константиновск', 'Копейск', 'Кораблино', 'Кореновск', 'Коркино', 'Королев', 'Короча', 'Корсаков', 'Коряжма', 'Костерево', 'Костомукша', 'Кострома', 'Котельники', 'Котельниково', 'Котельнич', 'Котлас', 'Котово', 'Котовск', 'Кохма', 'Красавино', 'Красноармейск', 'Красноармейск', 'Красновишерск', 'Красногорск', 'Краснодар', 'Красное Село', 'Краснозаводск', 'Краснознаменск', 'Краснознаменск', 'Краснокаменск', 'Краснокамск', 'Красноперекопск', 'Красноперекопск', 'Краснослободск', 'Краснослободск', 'Краснотурьинск', 'Красноуральск', 'Красноуфимск', 'Красноярск', 'Красный Кут', 'Красный Сулин', 'Красный Холм', 'Кременки', 'Кронштадт', 'Кропоткин', 'Крымск', 'Кстово', 'Кубинка', 'Кувандык', 'Кувшиново', 'Кудымкар', 'Кузнецк', 'Кузнецк-12', 'Кузнецк-8', 'Куйбышев', 'Кулебаки', 'Кумертау', 'Кунгур', 'Купино', 'Курган', 'Курганинск', 'Курильск', 'Курлово', 'Куровское', 'Курск', 'Куртамыш', 'Курчатов', 'Куса', 'Кушва', 'Кызыл', 'Кыштым', 'Кяхта', 'Лабинск', 'Лабытнанги', 'Лагань', 'Ладушкин', 'Лаишево', 'Лакинск', 'Лангепас', 'Лахденпохья', 'Лебедянь', 'Лениногорск', 'Ленинск', 'Ленинск-Кузнецкий', 'Ленск', 'Лермонтов', 'Лесной', 'Лесозаводск', 'Лесосибирск', 'Ливны', 'Ликино-Дулево', 'Липецк', 'Липки', 'Лиски', 'Лихославль', 'Лобня', 'Лодейное Поле', 'Ломоносов', 'Лосино-Петровский', 'Луга', 'Луза', 'Лукоянов', 'Луховицы', 'Лысково', 'Лысьва', 'Лыткарино', 'Льгов', 'Любань', 'Люберцы', 'Любим', 'Людиново', 'Лянтор', 'Магадан', 'Магас', 'Магнитогорск', 'Майкоп', 'Майский', 'Макаров', 'Макарьев', 'Макушино', 'Малая Вишера', 'Малгобек', 'Малмыж', 'Малоархангельск', 'Малоярославец', 'Мамадыш', 'Мамоново', 'Мантурово', 'Мариинск', 'Мариинский Посад', 'Маркс', 'Махачкала', 'Мглин', 'Мегион', 'Медвежьегорск', 'Медногорск', 'Медынь', 'Межгорье', 'Междуреченск', 'Мезень', 'Меленки', 'Мелеуз', 'Менделеевск', 'Мензелинск', 'Мещовск', 'Миасс', 'Микунь', 'Миллерово', 'Минеральные Воды', 'Минусинск', 'Миньяр', 'Мирный', 'Мирный', 'Михайлов', 'Михайловка', 'Михайловск', 'Михайловск', 'Мичуринск', 'Могоча', 'Можайск', 'Можга', 'Моздок', 'Мончегорск', 'Морозовск', 'Моршанск', 'Мосальск', 'Москва', 'Московский', 'Московский', 'Муравленко', 'Мураши', 'Мурманск', 'Муром', 'Мценск', 'Мыски', 'Мытищи', 'Мышкин', 'Набережные Челны', 'Навашино', 'Наволоки', 'Надым', 'Назарово', 'Назрань', 'Называевск', 'Нальчик', 'Нариманов', 'Наро-Фоминск', 'Нарткала', 'Нарьян-Мар', 'Находка', 'Невель', 'Невельск', 'Невинномысск', 'Невьянск', 'Нелидово', 'Неман', 'Нерехта', 'Нерчинск', 'Нерюнгри', 'Нестеров', 'Нефтегорск', 'Нефтекамск', 'Нефтекумск', 'Нефтеюганск', 'Нея', 'Нижневартовск', 'Нижнекамск', 'Нижнеудинск', 'Нижние Серги', 'Нижние Серги-3', 'Нижний Ломов', 'Нижний Новгород', 'Нижний Тагил', 'Нижняя Салда', 'Нижняя Тура', 'Николаевск', 'Николаевск-на-Амуре', 'Никольск', 'Никольск', 'Никольское', 'Новая Ладога', 'Новая Ляля', 'Новоалександровск', 'Новоалтайск', 'Новоаннинский', 'Нововоронеж', 'Новодвинск', 'Новозыбков', 'Новокубанск', 'Новокузнецк', 'Новокуйбышевск', 'Новомичуринск', 'Новомосковск', 'Новопавловск', 'Новоржев', 'Новороссийск', 'Новосибирск', 'Новосиль', 'Новосокольники', 'Новотроицк', 'Новоузенск', 'Новоульяновск', 'Новоуральск', 'Новохоперск', 'Новочебоксарск', 'Новочеркасск', 'Новошахтинск', 'Новый Оскол', 'Новый Уренгой', 'Ногинск', 'Нолинск', 'Норильск', 'Ноябрьск', 'Нурлат', 'Нытва', 'Нюрба', 'Нягань', 'Нязепетровск', 'Няндома', 'Облучье', 'Обнинск', 'Обоянь', 'Обь', 'Одинцово', 'Ожерелье', 'Озерск', 'Озерск', 'Озеры', 'Октябрьск', 'Октябрьский', 'Окуловка', 'Олекминск', 'Оленегорск', 'Оленегорск-1', 'Оленегорск-2', 'Оленегорск-4', 'Олонец', 'Омск', 'Омутнинск', 'Онега', 'Опочка', 'Орёл', 'Оренбург', 'Орехово-Зуево', 'Орлов', 'Орск', 'Оса', 'Осинники', 'Осташков', 'Остров', 'Островной', 'Острогожск', 'Отрадное', 'Отрадный', 'Оха', 'Оханск', 'Очер', 'Павлово', 'Павловск', 'Павловск', 'Павловский Посад', 'Палласовка', 'Партизанск', 'Певек', 'Пенза', 'Первомайск', 'Первоуральск', 'Перевоз', 'Пересвет', 'Переславль-Залесский', 'Пермь', 'Пестово', 'Петергоф', 'Петров Вал', 'Петровск', 'Петровск-Забайкальский', 'Петрозаводск', 'Петропавловск-Камчатский', 'Петухово', 'Петушки', 'Печора', 'Печоры', 'Пикалево', 'Пионерский', 'Питкяранта', 'Плавск', 'Пласт', 'Плес', 'Поворино', 'Подгорное', 'Подольск', 'Подпорожье', 'Покачи', 'Покров', 'Покровск', 'Полевской', 'Полесск', 'Полысаево', 'Полярные Зори', 'Полярный', 'Поронайск', 'Порхов', 'Похвистнево', 'Почеп', 'Починок', 'Пошехонье', 'Правдинск', 'Приволжск', 'Приморск', 'Приморск', 'Приморско-Ахтарск', 'Приозерск', 'Прокопьевск', 'Пролетарск', 'Протвино', 'Прохладный', 'Псков', 'Пугачев', 'Пудож', 'Пустошка', 'Пучеж', 'Пушкин', 'Пушкино', 'Пущино', 'Пыталово', 'Пыть-Ях', 'Пятигорск', 'Радужный', 'Радужный', 'Райчихинск', 'Раменское', 'Рассказово', 'Ревда', 'Реж', 'Реутов', 'Ржев', 'Родники', 'Рославль', 'Россошь', 'Ростов', 'Ростов-на-Дону', 'Рошаль', 'Ртищево', 'Рубцовск', 'Рудня', 'Руза', 'Рузаевка', 'Рыбинск', 'Рыбное', 'Рыльск', 'Ряжск', 'Рязань', 'Саки', 'Саки', 'Салават', 'Салаир', 'Салехард', 'Сальск', 'Самара', 'Санкт-Петербург', 'Саранск', 'Сарапул', 'Саратов', 'Саров', 'Сасово', 'Сатка', 'Сафоново', 'Саяногорск', 'Саянск', 'Светлогорск', 'Светлоград', 'Светлый', 'Светогорск', 'Свирск', 'Свободный', 'Себеж', 'Севастополь', 'Северобайкальск', 'Северодвинск', 'Северо-Курильск', 'Североморск', 'Североуральск', 'Северск', 'Севск', 'Сегежа', 'Сельцо', 'Семенов', 'Семикаракорск', 'Семилуки', 'Сенгилей', 'Серафимович', 'Сергач', 'Сергиев Посад', 'Сергиев Посад-7', 'Сердобск', 'Серов', 'Серпухов', 'Сертолово', 'Сестрорецк', 'Сибай', 'Сим', 'Симферополь', 'Сковородино', 'Скопин', 'Славгород', 'Славск', 'Славянск-на-Кубани', 'Сланцы', 'Слободской', 'Слюдянка', 'Смоленск', 'Снегири', 'Снежинск', 'Снежногорск', 'Собинка', 'Советск', 'Советск', 'Советск', 'Советская Гавань', 'Советский', 'Сокол', 'Солигалич', 'Соликамск', 'Солнечногорск', 'Солнечногорск-2', 'Солнечногорск-25', 'Солнечногорск-30', 'Солнечногорск-7', 'Сольвычегодск', 'Соль-Илецк', 'Сольцы', 'Сольцы 2', 'Сорочинск', 'Сорск', 'Сортавала', 'Сосенский', 'Сосновка', 'Сосновоборск', 'Сосновый Бор', 'Сосногорск', 'Сочи', 'Спас-Деменск', 'Спас-Клепики', 'Спасск', 'Спасск-Дальний', 'Спасск-Рязанский', 'Среднеколымск', 'Среднеуральск', 'Сретенск', 'Ставрополь', 'Старая Купавна', 'Старая Русса', 'Старица', 'Стародуб', 'Старый крым', 'Старый Оскол', 'Стерлитамак', 'Стрежевой', 'Строитель', 'Струнино', 'Ступино', 'Суворов', 'Судак', 'Суджа', 'Судогда', 'Суздаль', 'Суоярви', 'Сураж', 'Сургут', 'Суровикино', 'Сурск', 'Сусуман', 'Сухиничи', 'Сухой Лог', 'Сызрань', 'Сыктывкар', 'Сысерть', 'Сычевка', 'Сясьстрой', 'Тавда', 'Таганрог', 'Тайга', 'Тайшет', 'Талдом', 'Талица', 'Тамбов', 'Тара', 'Тарко-Сале', 'Таруса', 'Татарск', 'Таштагол', 'Тверь', 'Теберда', 'Тейково', 'Темников', 'Темрюк', 'Терек', 'Тетюши', 'Тимашевск', 'Тихвин', 'Тихорецк', 'Тобольск', 'Тогучин', 'Тольятти', 'Томари', 'Томмот', 'Томск', 'Топки', 'Торжок', 'Торопец', 'Тосно', 'Тотьма', 'Трехгорный', 'Трехгорный-1', 'Троицк', 'Троицк', 'Трубчевск', 'Туапсе', 'Туймазы', 'Тула', 'Тулун', 'Туран', 'Туринск', 'Тутаев', 'Тында', 'Тырныауз', 'Тюкалинск', 'Тюмень', 'Уварово', 'Углегорск', 'Углич', 'Удачный', 'Удомля', 'Ужур', 'Узловая', 'Улан-Удэ', 'Ульяновск', 'Унеча', 'Урай', 'Урень', 'Уржум', 'Урус-Мартан', 'Урюпинск', 'Усинск', 'Усмань', 'Усолье', 'Усолье-Сибирское', 'Уссурийск', 'Усть-Джегута', 'Усть-Илимск', 'Усть-Катав', 'Усть-Кут', 'Усть-Лабинск', 'Устюжна', 'Уфа', 'Ухта', 'Учалы', 'Уяр', 'Фатеж', 'Феодосия', 'Фокино', 'Фокино', 'Фролово', 'Фрязино', 'Фурманов', 'Хабаровск', 'Хадыженск', 'Ханты-Мансийск', 'Харабали', 'Харовск', 'Хасавюрт', 'Хвалынск', 'Хилок', 'Химки', 'Холм', 'Холмск', 'Хотьково', 'Цивильск', 'Цимлянск', 'Чадан', 'Чайковский', 'Чапаевск', 'Чаплыгин', 'Чебаркуль', 'Чебоксары', 'Чегем', 'Чекалин', 'Челябинск', 'Чердынь', 'Черемхово', 'Черепаново', 'Череповец', 'Черкесск', 'Чермоз', 'Черноголовка', 'Черногорск', 'Чернушка', 'Черняховск', 'Чехов', 'Чехов-2', 'Чехов-3', 'Чехов-8', 'Чистополь', 'Чита', 'Чкаловск', 'Чудово', 'Чулым', 'Чулым-3', 'Чусовой', 'Чухлома', 'Шагонар', 'Шадринск', 'Шали', 'Шарыпово', 'Шарья', 'Шатура', 'Шахтерск', 'Шахты', 'Шахунья', 'Шацк', 'Шебекино', 'Шелехов', 'Шенкурск', 'Шилка', 'Шимановск', 'Шиханы', 'Шлиссельбург', 'Шумерля', 'Шумиха', 'Шуя', 'Щекино', 'Щелкино', 'Щелково', 'Щербинка', 'Щигры', 'Щучье', 'Электрогорск', 'Электросталь', 'Электроугли', 'Элиста', 'Энгельс', 'Энгельс-19', 'Энгельс-2', 'Эртиль', 'Юбилейный', 'Югорск', 'Южа', 'Южно-Сахалинск', 'Южно-Сухокумск', 'Южноуральск', 'Юрга', 'Юрьевец', 'Юрьев-Польский', 'Юрюзань', 'Юхнов', 'Юхнов-1', 'Юхнов-2', 'Ядрин', 'Якутск', 'Ялта', 'Ялуторовск', 'Янаул', 'Яранск', 'Яровое', 'Ярославль', 'Ярцево', 'Ясногорск', 'Ясный', 'Яхрома'];

	exports.geoCityData = geoCityData;
	var geoMetroData = ['Бульвар Рокоссовского', 'Черкизовская', 'Преображенская площадь', 'Сокольники', 'Красносельская', 'Комсомольская', 'Красные ворота', 'Лермонтовская', 'Чистые пруды', 'Кировская', 'Лубянка', 'Дзержинская', 'Охотный ряд', 'Библиотека имени Ленина', 'Кропоткинская', 'Парк культуры', 'Фрунзенская', 'Спортивная', 'Воробьёвы горы', 'Университет', 'Проспект Вернадского', 'Юго-Западная', 'Тропарёво', 'Румянцево', 'Саларьево', 'Речной вокзал', 'Водный стадион', 'Войковская', 'Сокол', 'Аэропорт', 'Динамо', 'Белорусская', 'Маяковская', 'Тверская', 'Театральная', 'Новокузнецкая', 'Павелецкая', 'Автозаводская', 'Технопарк', 'Коломенская', 'Каширская', 'Кантемировская', 'Царицыно', 'Орехово', 'Домодедовская', 'Красногвардейская', 'Алма-Атинская', 'Пятницкое шоссе', 'Митино', 'Волоколамская', 'Мякинино', 'Строгино', 'Крылатское', 'Молодёжная', 'Кунцевская', 'Славянский бульвар', 'Парк Победы', 'Киевская', 'Смоленская', 'Арбатская', 'Площадь Революции', 'Курская', 'Бауманская', 'Электрозаводская', 'Семёновская', 'Партизанская', 'Измайловская', 'Первомайская', 'Щёлковская', 'Кунцевская', 'Пионерская', 'Багратионовская', 'Фили', 'Кутузовская', 'Студенческая', 'Международная', 'Выставочная', 'Деловой центр', 'Киевская', 'Смоленская', 'Арбатская', 'Александровский сад', 'Парк культуры', 'Октябрьская', 'Добрынинская', 'Павелецкая', 'Таганская', 'Курская', 'Комсомольская', 'Проспект Мира', 'Новослободская', 'Белорусская', 'Краснопресненская', 'Киевская', 'Медведково', 'Бабушкинская', 'Свиблово', 'Ботанический', 'ВДНХ', 'Алексеевская', 'Рижская', 'Проспект Мира', 'Сухаревская', 'Тургеневская', 'Китай-город', 'Третьяковская', 'Октябрьская', 'Шаболовская', 'Ленинский проспект', 'Академическая', 'Профсоюзная', 'Новые Черёмушки', 'Калужская', 'Беляево', 'Коньково', 'Тёплый Стан', 'Ясенево', 'Новоясеневская', 'Планерная', 'Сходненская', 'Тушинская', 'Спартак', 'Щукинская', 'Октябрьское', 'Полежаевская', 'Беговая', 'Улица 1905 года', 'Баррикадная', 'Пушкинская', 'Кузнецкий', 'Китай-город', 'Таганская', 'Пролетарская', 'Волгоградский', 'Текстильщики', 'Кузьминки', 'Рязанский проспект', 'Выхино', 'Лермонтовский проспект', 'Жулебино', 'Котельники', 'Парк Победы', 'Деловой центр', 'Третьяковская', 'Марксистская', 'Площадь Ильича', 'Авиамоторная', 'Шоссе Энтузиастов', 'Перово', 'Новогиреево', 'Новокосино', 'Алтуфьево', 'Бибирево', 'Отрадное', 'Владыкино', 'Петровско-Разумовская', 'Тимирязевская', 'Дмитровская', 'Савёловская', 'Менделеевская', 'Цветной бульвар', 'Чеховская', 'Боровицкая', 'Полянка', 'Серпуховская', 'Тульская', 'Нагатинская', 'Нагорная', 'Нахимовский проспект', 'Севастопольская', 'Чертановская', 'Южная', 'Пражская', 'Улица академика Янгеля', 'Аннино', 'Бульвар Дмитрия Донского', 'Марьина роща', 'Достоевская', 'Трубная', 'Сретенский бульвар', 'Чкаловская', 'Римская', 'Крестьянская застава', 'Дубровка', 'Кожуховская', 'Печатники', 'Волжская', 'Люблино', 'Братиславская', 'Марьино', 'Борисово', 'Шипиловская', 'Зябликово', 'Каширская', 'Варшавская', 'Каховская', 'Битцевский', 'Лесопарковая', 'Улица Старокачаловская', 'Улица Скобелевская', 'Бульвар адмирала Ушакова', 'Улица Горчакова', 'Бунинская аллея'];
	exports.geoMetroData = geoMetroData;

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	__webpack_require__(167);

	var _drpCoreStatistics = __webpack_require__(24);

	var _drpCoreStatistics2 = _interopRequireDefault(_drpCoreStatistics);

	var _drpCoreLibClientIdStorage = __webpack_require__(114);

	var _drpCoreLibClientIdStorage2 = _interopRequireDefault(_drpCoreLibClientIdStorage);

	var _drpCoreSystem = __webpack_require__(9);

	var _drpCoreConfig = __webpack_require__(5);

	var _drpCorePs = __webpack_require__(115);

	var _drpCorePs2 = _interopRequireDefault(_drpCorePs);

	var _monitoringAntivirus = __webpack_require__(168);

	var _monitoringAntivirus2 = _interopRequireDefault(_monitoringAntivirus);

	var _monitoringFileAssociationsManager = __webpack_require__(169);

	var _monitoringFileAssociationsManager2 = _interopRequireDefault(_monitoringFileAssociationsManager);

	var _monitoringSoft = __webpack_require__(170);

	var _monitoringSoft2 = _interopRequireDefault(_monitoringSoft);

	var _monitoringMonitoring = __webpack_require__(315);

	var _monitoringMonitoring2 = _interopRequireDefault(_monitoringMonitoring);

	var _libWatcher = __webpack_require__(308);

	var _libWatcher2 = _interopRequireDefault(_libWatcher);

	var _drpCoreWmi = __webpack_require__(3);

	var _libUtils = __webpack_require__(10);

	var _libMetric = __webpack_require__(305);

	var _libMetric2 = _interopRequireDefault(_libMetric);

	var _libSysinfo = __webpack_require__(307);

	Object.assign(window, {
	  abortRemoteScriptInterval: 30 * 1000,
	  checkUpdateInterval: _drpCoreConfig.update.interval,
	  checkUpdateUrl: _drpCoreConfig.update.hostname + '/watcher-autocheck/' + _drpCoreConfig.update.filename
	});

	var exit = function exit() {
	  if (_drpCoreConfig.logging) __webpack_require__(11).onunload();
	  window.close();
	};

	var selectRunning = '\n  SELECT\n    *\n  FROM\n    Win32_Process\n  WHERE\n    NAME = "mshta.exe" AND\n    CommandLine LIKE "%DriverPack Notifier%relaunch%"\n'.trim().replace(/\n\s+/g, ' ');

	var run = function run(runFrom, relaunch) {
	  // run Notifier from AppData
	  if (_libUtils.isRunFromProgramFiles()) {
	    _libUtils.runFromNewPlace(runFrom);
	    window.close();
	  } else {
	    // check that we run the process just once
	    var running = _drpCoreWmi.objWMIService.ExecQuery(selectRunning, 'WQL', 0);
	    if (running.Count > 1) {
	      window.close();
	    } else {
	      (function () {
	        _drpCorePs2['default'].init().send(['$sig = \'' + ['[DllImport("user32.dll")] public static extern int SendMessage(int hWnd, int hMsg, int wParam, int lParam);', '[DllImport("user32.dll")] public static extern IntPtr GetWindow(IntPtr hWnd, uint uCmd);', '[DllImport("user32.dll", EntryPoint = "FindWindowEx")] public static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);', '[DllImport("user32.dll", SetLastError=true)] public static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);', '[DllImport("user32.dll")] public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);', '[DllImport("user32.dll")] public static extern int SetWindowLong(IntPtr hWnd, int nIndex, int dwNewLong);'].join('') + '\'', 'Add-Type -MemberDefinition $sig -name NativeMethods -namespace Win32', '$mainHwnd = [Win32.NativeMethods]::FindWindowEx(0, 0, "HTML Application Host Window Class", "DriverPack Notifier")', '[Win32.NativeMethods]::ShowWindow($mainHwnd, 0x00)']);

	        var monitoring = new _monitoringMonitoring2['default']();

	        // FIXME: no global variables!
	        // update script
	        window.checkUpdateIntervalId = setInterval(function () {
	          _libUtils.addScript(window.checkUpdateUrl);
	        }, window.checkUpdateInterval);

	        // next system checking
	        window.checkingIntervalId = setInterval(function () {
	          monitoring.run();
	        }, window.checkUpdateInterval);

	        // FIXME: no global variables!
	        window.runFrom = typeof runFrom === 'string' ? runFrom : 'scheduler';

	        if (window.runFrom === 'scheduler') {
	          monitoring.run();
	        }

	        _drpCoreStatistics2['default'].event({ action: 'application started' });
	        window.metric = new _libMetric2['default']();
	        window.metric.send('data', _libSysinfo.getDiag());
	      })();
	    }
	  }
	};

	var main = function main(commandLine) {
	  var _ParseCMD = _drpCoreSystem.ParseCMD(commandLine);

	  var cmd = _ParseCMD[0];

	  var args = _ParseCMD.slice(1);

	  args = _libUtils.ParseArgs(args);

	  // FIXME: no global variables!
	  window.currentDirectory = cmd.replace(/run\.hta$/, '');

	  if (args.install) {
	    _drpCoreStatistics2['default'].init();
	    _libWatcher2['default'].install();
	    // FIXME: no timeouts!
	    setTimeout(function () {
	      exit();
	    }, 2000);
	    _drpCoreStatistics2['default'].event({ action: 'application installed' }, [], true);
	  } else if (args.uninstall) {
	    _drpCoreStatistics2['default'].init();
	    // FIXME: no timeouts!
	    setTimeout(function () {
	      _libWatcher2['default'].uninstall();
	      setTimeout(function () {
	        exit();
	      }, 2000);
	    }, 2000);
	  } else if (typeof args.antivirus === 'string') {
	    var label = _drpCoreStatistics2['default'].drpVersion;
	    if (args.label) {
	      label += ' ' + args.label;
	    }
	    var antivirus = new _monitoringAntivirus2['default']();
	    if (args.antivirus === 'notworking') {
	      // main actions
	      var _name = antivirus.antiviruses[0].displayName.toLowerCase();
	      antivirus.uninstallAntivirus();
	      if (!antivirus.antivirusIsUninstalled()) {
	        _drpCoreStatistics2['default'].event({ action: 'antivirus uninstallation failed ' + _name, label: label });
	      } else {
	        _drpCoreStatistics2['default'].event({ action: 'antivirus uninstallation completed ' + _name, label: label });
	        // TODO: Case with reboot
	        antivirus.installAntivirus();
	        _drpCoreStatistics2['default'].event({ action: 'antivirus installation completed', label: label });
	      }
	    } else {
	      // count === 0
	      // TODO: Case with reboot
	      antivirus.installAntivirus();
	      _drpCoreStatistics2['default'].event({ action: 'antivirus installation completed', label: label });
	    }
	    // FIXME: no timeouts!
	    setTimeout(function () {
	      window.close;
	    }, 3 * 1000);
	  } else if (typeof args.file_association === 'string') {
	    var fam = new _monitoringFileAssociationsManager2['default']();
	    if (!args.install_soft) {
	      _libUtils.updateApplicationFiles();
	      var extension = undefined;
	      var fileName = undefined;
	      var fullFilePath = args.fullfilepath;
	      if (args._.length) {
	        // fix bug: bad old .exe
	        fullFilePath += ' ' + args._.join(' ');
	      }
	      extension = '.' + fullFilePath.split('.').slice(-1)[0].toLowerCase();
	      fileName = fullFilePath.split('\\').slice(-1)[0];
	      fam.showConfirm(extension, fileName, fullFilePath);
	    } else {
	      var label = decodeURIComponent(args.label);
	      var fullFilePath = decodeURIComponent(args.fullfilepath);
	      fam.installSoft(args.extension, label, fullFilePath);
	      fam.openInstalledSoft(fullFilePath);
	      // FIXME: no timeouts!
	      setTimeout(function () {
	        window.close;
	      }, 3 * 1000);
	    }
	  } else if (typeof args.partnersoft === 'string') {
	    var label = args.label;
	    if (args._.length) {
	      // fix bug: bad old .exe
	      label += ' ' + args._.join(' ');
	    }
	    var softname = decodeURIComponent(args.softname);
	    var softcategory = decodeURIComponent(args.softcategory);
	    new _monitoringSoft2['default']().install({ label: label, softname: softname, softcategory: softcategory });
	    // FIXME: no timeouts!
	    setTimeout(function () {
	      window.close;
	    }, 3 * 1000);
	  } else {
	    if (_libUtils.isOldOS) {
	      var HKCU = _drpCoreLibClientIdStorage2['default'].stores.HKCU;

	      HKCU.Reg = HKCU.Reg.replace(/^HKCU/i, _libUtils.UserHK);
	    }
	    _drpCoreStatistics2['default'].init();
	    run(args.run, args.relaunch);
	  }
	};

	window.parseCMDArgs = function (commandLine) {
	  setTimeout(function () {
	    return main(commandLine);
	  }, 0);
	};

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _libNotification = __webpack_require__(19);

	var _libNotification2 = _interopRequireDefault(_libNotification);

	var _drpCoreSystem = __webpack_require__(9);

	var _libUtils = __webpack_require__(10);

	var cmdXP = 'cscript %systemroot%/system32/eventquery.vbs  /l system /r 1 /fi "Source eq Save Dump" /fo LIST /v';
	var cmd6 = 'wevtutil qe System /q:"Event/System[(Level=2 and Provider/@EventSourceName=\'BugCheck\')]" /rd:true /c:1 /f:Text';
	var tempFile = _drpCoreSystem.WshShell.ExpandEnvironmentStrings('%temp%\\lastbsod.txt');

	var day = 24 * 60 * 60 * 1000;

	var BSOD = (function () {
	  function BSOD() {
	    _classCallCheck(this, BSOD);

	    try {
	      var command = _libUtils.isOldOS ? cmdXP : cmd6;
	      command = 'cmd /c "' + command + ' > "' + tempFile + '""';
	      _drpCoreSystem.WshShell.Run(command, 0, true);
	      this.data = this.parseFile();
	      _drpCoreSystem.fso.DeleteFile(tempFile);
	    } catch (e) {}
	  }

	  BSOD.prototype.parseFile = function parseFile() {
	    try {
	      var res = {};
	      var file = _drpCoreSystem.fso.OpenTextFile(tempFile, 1, true);
	      while (!file.AtEndOfStream) {
	        var line = file.ReadLine();
	        var key = line.split(':')[0].trim();
	        switch (key) {
	          case 'Date Time':
	          case 'Date':
	            res.date = new Date(line.split(':').slice(1).join(':').trim());
	            break;
	          case 'Description':
	            if (_libUtils.isOldOS) {
	              res.errCode = line.split(':').slice(1).join(':').split('was: ')[1].split(' ')[0];
	            } else {
	              line = file.ReadLine();
	              res.errCode = line.split('was: ')[1].split(' ')[0];
	            }
	            break;
	        }
	      }
	      file.close();
	      return res;
	    } catch (e) {
	      return null;
	    }
	  };

	  BSOD.prototype.checkNewBSOD = function checkNewBSOD() {
	    var notification, _status;

	    return regeneratorRuntime.async(function checkNewBSOD$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          context$2$0.prev = 0;

	          if (this.data && this.data.date) {
	            context$2$0.next = 3;
	            break;
	          }

	          return context$2$0.abrupt('return');

	        case 3:
	          if (!(new Date() - this.data.date > 3 * day)) {
	            context$2$0.next = 5;
	            break;
	          }

	          return context$2$0.abrupt('return');

	        case 5:
	          notification = new _libNotification2['default']('newbsod', this.data);

	          if (!(notification.get('date') && !(this.data.date > new Date(notification.get('date'))))) {
	            context$2$0.next = 8;
	            break;
	          }

	          return context$2$0.abrupt('return');

	        case 8:
	          context$2$0.next = 10;
	          return regeneratorRuntime.awrap(notification.show());

	        case 10:
	          _status = context$2$0.sent;

	          if (_status === 'ok') {
	            notification.set('date', this.data.date);
	            notification.save();
	            _libUtils.goToUrl(notification.config.problemUrl);
	          }
	          context$2$0.next = 16;
	          break;

	        case 14:
	          context$2$0.prev = 14;
	          context$2$0.t0 = context$2$0['catch'](0);

	        case 16:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this, [[0, 14]]);
	  };

	  return BSOD;
	})();

	exports['default'] = BSOD;
	module.exports = exports['default'];

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	/* global Enumerator */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _drpCoreConfig = __webpack_require__(5);

	var _drpCoreConfig2 = _interopRequireDefault(_drpCoreConfig);

	var _drpCoreWmi = __webpack_require__(3);

	var _libNotification = __webpack_require__(19);

	var _libNotification2 = _interopRequireDefault(_libNotification);

	var _libUtils = __webpack_require__(10);

	var objWMIServiceWMI = _drpCoreWmi.locator.ConnectServer(null, 'root\\wmi');

	var PoorConditionThreshold = _drpCoreConfig2['default'].monitoring.Battery.PoorConditionThreshold;

	var Battery = (function () {
	  function Battery() {
	    _classCallCheck(this, Battery);
	  }

	  Battery.prototype.checkBattery = function checkBattery() {
	    return regeneratorRuntime.async(function checkBattery$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          if (!this.isPoorCondition()) {
	            context$2$0.next = 3;
	            break;
	          }

	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(this.showNotification('batterypoorcondition', {}));

	        case 3:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Battery.prototype.isPoorCondition = function isPoorCondition() {
	    var result = false;
	    try {
	      var fullChargedCapacity = this.getBatteryFullChargedCapacity();
	      var designedCapacity = this.getBatteryDesignedCapacity();
	      if (fullChargedCapacity && designedCapacity) {
	        var poorCondition = 100 - 100 * fullChargedCapacity / designedCapacity;
	        result = poorCondition >= PoorConditionThreshold;
	      }
	    } catch (e) {}

	    return result;
	  };

	  Battery.prototype.getBatteryFullChargedCapacity = function getBatteryFullChargedCapacity() {
	    var result = null;
	    var colItems = objWMIServiceWMI.ExecQuery('SELECT * FROM BatteryFullChargedCapacity', 'WQL');
	    if (colItems.Count) {
	      var item = new Enumerator(colItems).item();
	      result = item.FullChargedCapacity;
	    }
	    return result;
	  };

	  Battery.prototype.getBatteryDesignedCapacity = function getBatteryDesignedCapacity() {
	    var result = null;
	    var colItems = objWMIServiceWMI.ExecQuery('SELECT * FROM BatteryStaticData', 'WQL');
	    if (colItems.Count) {
	      var item = new Enumerator(colItems).item();
	      result = item.DesignedCapacity;
	    }
	    return result;
	  };

	  Battery.prototype.showNotification = function showNotification(type, args) {
	    var notification, status;
	    return regeneratorRuntime.async(function showNotification$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          notification = new _libNotification2['default'](type, args);
	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(notification.show());

	        case 3:
	          status = context$2$0.sent;

	          if (status === 'ok') {
	            _libUtils.goToUrl(notification.config.problemUrl);
	          }

	        case 5:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  return Battery;
	})();

	exports['default'] = Battery;
	module.exports = exports['default'];

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/* global Enumerator */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _drpCoreConfig = __webpack_require__(5);

	var _drpCoreConfig2 = _interopRequireDefault(_drpCoreConfig);

	var _libNotification = __webpack_require__(19);

	var _libNotification2 = _interopRequireDefault(_libNotification);

	var _drpCoreWmi = __webpack_require__(3);

	var _libUtils = __webpack_require__(10);

	var _config$monitoring$CPU = _drpCoreConfig2['default'].monitoring.CPU;
	var LoadPercentageThreshold = _config$monitoring$CPU.LoadPercentageThreshold;
	var CheckTimeout = _config$monitoring$CPU.CheckTimeout;
	var ExtraLoadMaxCount = _config$monitoring$CPU.ExtraLoadMaxCount;

	var CPU = (function () {
	  function CPU() {
	    _classCallCheck(this, CPU);

	    this.extraLoadCounter = 0;
	  }

	  CPU.prototype.run = function run() {
	    if (window.RunningCPULoadAverage) {
	      return;
	    } else {
	      window.RunningCPULoadAverage = true;
	      this.tick();
	    }
	  };

	  CPU.prototype.tick = function tick() {
	    return regeneratorRuntime.async(function tick$(context$2$0) {
	      var _this = this;

	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          context$2$0.prev = 0;
	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(this.checkCPU());

	        case 3:
	          setTimeout(function () {
	            return _this.tick();
	          }, CheckTimeout);
	          context$2$0.next = 9;
	          break;

	        case 6:
	          context$2$0.prev = 6;
	          context$2$0.t0 = context$2$0['catch'](0);

	          window.RunningCPULoadAverage = false;

	        case 9:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this, [[0, 6]]);
	  };

	  CPU.prototype.checkCPU = function checkCPU() {
	    return regeneratorRuntime.async(function checkCPU$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          context$2$0.next = 2;
	          return regeneratorRuntime.awrap(this.checkCPULoadAverage());

	        case 2:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  CPU.prototype.checkCPULoadAverage = function checkCPULoadAverage() {
	    var loadPercentage;
	    return regeneratorRuntime.async(function checkCPULoadAverage$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          loadPercentage = this.getLoadPercentage();

	          window.metric.send('cpu', loadPercentage);
	          if (loadPercentage < LoadPercentageThreshold) {
	            this.extraLoadCounter = 0;
	          } else {
	            this.extraLoadCounter++;
	          }

	          if (!(this.extraLoadCounter > ExtraLoadMaxCount)) {
	            context$2$0.next = 7;
	            break;
	          }

	          this.extraLoadCounter = 0;
	          context$2$0.next = 7;
	          return regeneratorRuntime.awrap(this.showNotification('cpuloadaverage'));

	        case 7:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  CPU.prototype.getLoadPercentage = function getLoadPercentage() {
	    var colItems = _drpCoreWmi.objWMIService.ExecQuery('SELECT * FROM Win32_Processor', 'WQL');
	    var item = new Enumerator(colItems).item();
	    return item.LoadPercentage;
	  };

	  CPU.prototype.showNotification = function showNotification(type) {
	    var notification, status;
	    return regeneratorRuntime.async(function showNotification$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          notification = new _libNotification2['default'](type);
	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(notification.show());

	        case 3:
	          status = context$2$0.sent;

	          if (status === 'ok') {
	            _libUtils.goToUrl(notification.config.problemUrl);
	          }

	        case 5:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  return CPU;
	})();

	exports['default'] = CPU;
	module.exports = exports['default'];

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _libNotification = __webpack_require__(19);

	var _libNotification2 = _interopRequireDefault(_libNotification);

	var _drpCoreSystem = __webpack_require__(9);

	var _drpCoreWmi = __webpack_require__(3);

	var _libUtils = __webpack_require__(10);

	var FreeSpaceThreshold = 3 * 1024 * 1024 * 1024;

	var HDD = (function () {
	  function HDD() {
	    var _this = this;

	    _classCallCheck(this, HDD);

	    this.drives = [];
	    try {
	      var colItems = _drpCoreWmi.objWMIService.ExecQuery('SELECT * FROM Win32_LogicalDisk', 'WQL');
	      _drpCoreSystem.iterate(colItems, function (_ref) {
	        var Name = _ref.Name;
	        var DriveType = _ref.DriveType;
	        var Size = _ref.Size;
	        var FreeSpace = _ref.FreeSpace;

	        if (DriveType === 3 && Size && FreeSpace) {
	          _this.drives.push({ Name: Name, Size: Size, FreeSpace: FreeSpace });
	        }
	      });
	    } catch (e) {}
	    try {
	      this.systemDriveName = _drpCoreSystem.WshShell.ExpandEnvironmentStrings('%SYSTEMDRIVE%');
	    } catch (e) {}
	    this.disks = [];
	    try {
	      var colItems = _drpCoreWmi.objWMIService.ExecQuery('SELECT * FROM Win32_DiskDrive', 'WQL');
	      _drpCoreSystem.iterate(colItems, function (_ref2) {
	        var Model = _ref2.Model;
	        var Status = _ref2.Status;

	        _this.disks.push({ Model: Model, Status: Status });
	      });
	    } catch (e) {}
	  }

	  HDD.prototype.checkSystemDriveFreeSpace = function checkSystemDriveFreeSpace() {
	    return regeneratorRuntime.async(function checkSystemDriveFreeSpace$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          if (this.systemDriveHasFreeSpace()) {
	            context$2$0.next = 3;
	            break;
	          }

	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(this.showNotification('systemdrivefreespace', {
	            systemdrive: _drpCoreSystem.WshShell.ExpandEnvironmentStrings('%SYSTEMDRIVE%').replace(':', '')
	          }));

	        case 3:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  HDD.prototype.systemDriveHasFreeSpace = function systemDriveHasFreeSpace() {
	    var _this2 = this;

	    if (this.systemDriveName) {
	      return !this.drives.some(function (_ref3) {
	        var Name = _ref3.Name;
	        var Size = _ref3.Size;
	        var FreeSpace = _ref3.FreeSpace;

	        if (Name === _this2.systemDriveName) {
	          window.metric.send('hdd', 100 * (Size - FreeSpace) / Size);
	          return FreeSpace < FreeSpaceThreshold;
	        }
	      });
	    } else {
	      return true;
	    }
	  };

	  HDD.prototype.checkOtherDrivesFreeSpace = function checkOtherDrivesFreeSpace() {
	    var fullDrives;
	    return regeneratorRuntime.async(function checkOtherDrivesFreeSpace$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          fullDrives = this.getFullOtherDrives();

	          if (!fullDrives.length) {
	            context$2$0.next = 4;
	            break;
	          }

	          context$2$0.next = 4;
	          return regeneratorRuntime.awrap(this.showNotification('otherdrivesfreespace', {
	            fulldrives: fullDrives.join(', ')
	          }));

	        case 4:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  HDD.prototype.getFullOtherDrives = function getFullOtherDrives() {
	    var _this3 = this;

	    return this.drives.filter(function (_ref4) {
	      var Name = _ref4.Name;
	      var Size = _ref4.Size;
	      var FreeSpace = _ref4.FreeSpace;

	      return Name !== _this3.systemDriveName && 100 * FreeSpace / Size <= 3;
	    }).map(function (_ref5) {
	      var Name = _ref5.Name;
	      return '[' + Name.replace(':', '') + ']';
	    });
	  };

	  HDD.prototype.checkSmart = function checkSmart() {
	    var failedDisks = this.getSmartFails();
	    if (failedDisks.length) {
	      this.showNotification('smartfailed', {
	        disks: failedDisks.join(', ')
	      });
	    }
	  };

	  HDD.prototype.getSmartFails = function getSmartFails() {
	    return this.disks.filter(function (_ref6) {
	      var Model = _ref6.Model;
	      var Status = _ref6.Status;

	      return Status !== 'OK';
	    }).map(function (_ref7) {
	      var Model = _ref7.Model;
	      return Model;
	    });
	  };

	  HDD.prototype.showNotification = function showNotification(type, args) {
	    var notification, status;
	    return regeneratorRuntime.async(function showNotification$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          notification = new _libNotification2['default'](type, args);
	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(notification.show());

	        case 3:
	          status = context$2$0.sent;

	          if (status === 'ok') {
	            _libUtils.goToUrl(notification.config.problemUrl);
	          }

	        case 5:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  return HDD;
	})();

	exports['default'] = HDD;
	module.exports = exports['default'];

	// if free space of the system drive is less than 3 GB

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _drpCoreStatistics = __webpack_require__(24);

	var _drpCoreStatistics2 = _interopRequireDefault(_drpCoreStatistics);

	var _drpCoreConfig = __webpack_require__(5);

	var _drpCoreConfig2 = _interopRequireDefault(_drpCoreConfig);

	var _Yandex = __webpack_require__(317);

	var _Yandex2 = _interopRequireDefault(_Yandex);

	var _Antivirus = __webpack_require__(168);

	var _Antivirus2 = _interopRequireDefault(_Antivirus);

	var _HDD = __webpack_require__(314);

	var _HDD2 = _interopRequireDefault(_HDD);

	var _Battery = __webpack_require__(312);

	var _Battery2 = _interopRequireDefault(_Battery);

	var _BSOD = __webpack_require__(311);

	var _BSOD2 = _interopRequireDefault(_BSOD);

	var _CPU = __webpack_require__(313);

	var _CPU2 = _interopRequireDefault(_CPU);

	var _RAM = __webpack_require__(316);

	var _RAM2 = _interopRequireDefault(_RAM);

	var _Soft = __webpack_require__(170);

	var _Soft2 = _interopRequireDefault(_Soft);

	var _FileAssociationsManager = __webpack_require__(169);

	var _FileAssociationsManager2 = _interopRequireDefault(_FileAssociationsManager);

	var _libUtils = __webpack_require__(10);

	var _libLang = __webpack_require__(167);

	var _libLang2 = _interopRequireDefault(_libLang);

	var MonitoringCheckDelay = _drpCoreConfig2['default'].monitoring.MonitoringCheckDelay;

	var Monitoring = (function () {
	  function Monitoring() {
	    _classCallCheck(this, Monitoring);
	  }

	  Monitoring.prototype.checkRunCondition = function checkRunCondition() {
	    var countryCode = window.geoip && window.geoip.geoip_country_code || '';
	    return _libLang2['default'] === 'ru' || countryCode.toLowerCase() === 'ru';
	  };

	  Monitoring.prototype.checkYandex = function checkYandex() {
	    var yandex;
	    return regeneratorRuntime.async(function checkYandex$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          yandex = new _Yandex2['default']();

	          yandex.run();
	          if (!_libUtils.isOldOS && _drpCoreStatistics2['default'].experiment === 'yapromo') {
	            yandex.showWidget();
	          }

	        case 3:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Monitoring.prototype.checkPartnerSoft = function checkPartnerSoft() {
	    var soft;
	    return regeneratorRuntime.async(function checkPartnerSoft$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          soft = new _Soft2['default']();
	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(soft.run());

	        case 3:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Monitoring.prototype.checkFileAssociations = function checkFileAssociations() {
	    var fam;
	    return regeneratorRuntime.async(function checkFileAssociations$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          fam = new _FileAssociationsManager2['default']();
	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(fam.run());

	        case 3:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  // TODO: refactor and reenable

	  Monitoring.prototype.checkAntivirus = function checkAntivirus() {
	    var antivirus;
	    return regeneratorRuntime.async(function checkAntivirus$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          if (!_libUtils.isOldOS) {
	            context$2$0.next = 2;
	            break;
	          }

	          return context$2$0.abrupt('return');

	        case 2:
	          antivirus = new _Antivirus2['default']();
	          context$2$0.next = 5;
	          return regeneratorRuntime.awrap(antivirus.run());

	        case 5:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Monitoring.prototype.checkHDD = function checkHDD() {
	    var hdd;
	    return regeneratorRuntime.async(function checkHDD$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          hdd = new _HDD2['default']();
	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(hdd.checkSmart());

	        case 3:
	          context$2$0.next = 5;
	          return regeneratorRuntime.awrap(_libUtils.timeout(MonitoringCheckDelay));

	        case 5:
	          context$2$0.next = 7;
	          return regeneratorRuntime.awrap(hdd.checkSystemDriveFreeSpace());

	        case 7:
	          context$2$0.next = 9;
	          return regeneratorRuntime.awrap(_libUtils.timeout(MonitoringCheckDelay));

	        case 9:
	          context$2$0.next = 11;
	          return regeneratorRuntime.awrap(hdd.checkOtherDrivesFreeSpace());

	        case 11:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Monitoring.prototype.checkBattery = function checkBattery() {
	    var battery;
	    return regeneratorRuntime.async(function checkBattery$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          if (_libUtils.isOldOS) {
	            context$2$0.next = 4;
	            break;
	          }

	          battery = new _Battery2['default']();
	          context$2$0.next = 4;
	          return regeneratorRuntime.awrap(battery.checkBattery());

	        case 4:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Monitoring.prototype.checkBSOD = function checkBSOD() {
	    var bsod;
	    return regeneratorRuntime.async(function checkBSOD$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          bsod = new _BSOD2['default']();
	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(bsod.checkNewBSOD());

	        case 3:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Monitoring.prototype.checkCPU = function checkCPU() {
	    new _CPU2['default']().run();
	  };

	  Monitoring.prototype.checkRAM = function checkRAM() {
	    new _RAM2['default']().run();
	  };

	  Monitoring.prototype.run = function run() {
	    return regeneratorRuntime.async(function run$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          if (true) {
	            context$2$0.next = 11;
	            break;
	          }

	          context$2$0.prev = 1;
	          context$2$0.next = 4;
	          return regeneratorRuntime.awrap(this._run());

	        case 4:
	          context$2$0.next = 9;
	          break;

	        case 6:
	          context$2$0.prev = 6;
	          context$2$0.t0 = context$2$0['catch'](1);

	          /* global alert */
	          alert('Monitoring error: ' + context$2$0.t0.message);

	        case 9:
	          context$2$0.next = 14;
	          break;

	        case 11:
	          if (!this.checkRunCondition()) {
	            context$2$0.next = 14;
	            break;
	          }

	          context$2$0.next = 14;
	          return regeneratorRuntime.awrap(this._run());

	        case 14:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this, [[1, 6]]);
	  };

	  Monitoring.prototype._run = function _run() {
	    return regeneratorRuntime.async(function _run$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          this.checkYandex();
	          // this.checkCPU()
	          // this.checkRAM()
	          this.checkFileAssociations();
	          // await this.checkPartnerSoft()
	          // await timeout(MonitoringCheckDelay)
	          // await this.checkHDD()
	          // await timeout(MonitoringCheckDelay)
	          // await this.checkBattery()
	          // await timeout(MonitoringCheckDelay)
	          // await this.checkBSOD()

	        case 2:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  return Monitoring;
	})();

	exports['default'] = Monitoring;
	module.exports = exports['default'];

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	/* global Enumerator */
	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _drpCoreConfig = __webpack_require__(5);

	var _drpCoreConfig2 = _interopRequireDefault(_drpCoreConfig);

	var _libNotification = __webpack_require__(19);

	var _libNotification2 = _interopRequireDefault(_libNotification);

	var _drpCoreWmi = __webpack_require__(3);

	var _libUtils = __webpack_require__(10);

	var _config$monitoring$CPU = _drpCoreConfig2['default'].monitoring.CPU;
	var LoadPercentageThreshold = _config$monitoring$CPU.LoadPercentageThreshold;
	var CheckTimeout = _config$monitoring$CPU.CheckTimeout;
	var ExtraLoadMaxCount = _config$monitoring$CPU.ExtraLoadMaxCount;

	var RAM = (function () {
	  function RAM() {
	    _classCallCheck(this, RAM);

	    this.extraLoadCounter = 0;
	  }

	  RAM.prototype.run = function run() {
	    if (window.RunningRAMLoadAverage) {
	      return;
	    } else {
	      window.RunningRAMLoadAverage = true;
	      this.tick();
	    }
	  };

	  RAM.prototype.tick = function tick() {
	    return regeneratorRuntime.async(function tick$(context$2$0) {
	      var _this = this;

	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          context$2$0.prev = 0;
	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(this.checkRAM());

	        case 3:
	          setTimeout(function () {
	            return _this.tick();
	          }, CheckTimeout);
	          context$2$0.next = 9;
	          break;

	        case 6:
	          context$2$0.prev = 6;
	          context$2$0.t0 = context$2$0['catch'](0);

	          window.RunningRAMLoadAverage = false;

	        case 9:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this, [[0, 6]]);
	  };

	  RAM.prototype.checkRAM = function checkRAM() {
	    return regeneratorRuntime.async(function checkRAM$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          context$2$0.next = 2;
	          return regeneratorRuntime.awrap(this.checkUsedMemoryPercentage());

	        case 2:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  RAM.prototype.checkUsedMemoryPercentage = function checkUsedMemoryPercentage() {
	    var loadPercentage;
	    return regeneratorRuntime.async(function checkUsedMemoryPercentage$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          loadPercentage = this.getUsedMemoryPercentage();

	          window.metric.send('ram', loadPercentage);
	          if (loadPercentage < LoadPercentageThreshold) {
	            this.extraLoadCounter = 0;
	          } else {
	            this.extraLoadCounter++;
	          }

	          if (!(this.extraLoadCounter > ExtraLoadMaxCount)) {
	            context$2$0.next = 7;
	            break;
	          }

	          this.extraLoadCounter = 0;
	          context$2$0.next = 7;
	          return regeneratorRuntime.awrap(this.showNotification('ramload'));

	        case 7:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  RAM.prototype.getUsedMemoryPercentage = function getUsedMemoryPercentage() {
	    var colItems = _drpCoreWmi.objWMIService.ExecQuery('SELECT * FROM Win32_OperatingSystem', 'WQL');
	    var item = new Enumerator(colItems).item();

	    var free = item.FreePhysicalMemory;
	    var total = item.TotalVisibleMemorySize;
	    var percentageUsedMemory = 100 - 100 * free / total;
	    return percentageUsedMemory;
	  };

	  RAM.prototype.showNotification = function showNotification(type) {
	    var notification, status;
	    return regeneratorRuntime.async(function showNotification$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          notification = new _libNotification2['default'](type);
	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(notification.show());

	        case 3:
	          status = context$2$0.sent;

	          if (status === 'ok') {
	            _libUtils.goToUrl(notification.config.problemUrl);
	          }

	        case 5:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  return RAM;
	})();

	exports['default'] = RAM;
	module.exports = exports['default'];

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _drpCoreStatistics = __webpack_require__(24);

	var _drpCoreStatistics2 = _interopRequireDefault(_drpCoreStatistics);

	var _drpCoreConfig = __webpack_require__(5);

	var _drpCoreConfig2 = _interopRequireDefault(_drpCoreConfig);

	var _drpCoreSystem = __webpack_require__(9);

	var _drpCoreSystemSpecialFolders = __webpack_require__(16);

	var _drpCoreLibUtils = __webpack_require__(29);

	var _drpCoreDiagnosticsCheckSoft = __webpack_require__(112);

	var _drpCoreWmi = __webpack_require__(3);

	var _libUtils = __webpack_require__(10);

	var _libNotification = __webpack_require__(19);

	var _libNotification2 = _interopRequireDefault(_libNotification);

	var _libYandexHypoData = __webpack_require__(309);

	var CheckTimeout = _drpCoreConfig2['default'].monitoring.Yandex.CheckTimeout;

	var buildRoskomRegExp = function buildRoskomRegExp(regexpObj) {
	  var resultRegExp = '';
	  for (var _name in regexpObj) {
	    if (regexpObj[_name].length > 0) {
	      for (var i = 0; i < regexpObj[_name].length; i++) {
	        resultRegExp += '|' + _name + '.+' + regexpObj[_name][i];
	      }
	    } else {
	      resultRegExp += '|' + _name;
	    }
	  }
	  return resultRegExp;
	};

	var Yandex = (function () {
	  function Yandex() {
	    var _this = this;

	    _classCallCheck(this, Yandex);

	    this.socnetworks = [['https://new.vk.com/', true, 'Welcome! | VK', 'Вход | ВКонтакте'], ['https://ok.ru/', true, 'OK.RU'], ['https://plus.google.com/u/0/', false, 'Google+'], ['https://www.instagram.com/', true, 'Instagram'], ['https://www.linkedin.com/', false, ' | LinkedIn'], ['https://my.mail.ru/cgi-bin/login/', true, 'Социальная сеть Мой Мир@Mail.ru: ', 'My World@Mail.Ru: '], ['https://myspace.com/', true, 'Featured Content on Myspace'], ['https://habrahabr.ru/all/', true, 'Все публикации / Хабрахабр'], ['https://www.drive2.ru/', true, 'DRIVE2.RU'], ['https://twitter.com/', true, 'Твиттер', 'Twitter'], ['https://www.reddit.com/', true, 'reddit: the front page of the internet']];

	    var initTime = Date.now() - 70 * 60 * 1000;
	    this.chromeIsRunning = false;
	    this.yandexIsRunning = false;
	    this.unreachableLinkIsOpened = false;
	    this.buySellIsOpened = false;
	    this.geoCityDataIsOpened = false;
	    this.geoMetroIsOpened = false;
	    this.bankingIsOpened = false;
	    this.yandexMarketIsOpened = false;
	    this.youtubeIsOpened = false;
	    this.watchVideoIsOpened = false;
	    this.blockedWebsiteIsOpened = false;
	    this.yandexServiceIsOpened = false;
	    this.yandexSocnetworkIsOpened = false;
	    this.settingsImportIsOpened = false;
	    this.lastClickedNotificationType = false;
	    this.yandexOpenTime = false;
	    this.chromeCommand = 'chcp 65001 & tasklist /fi "IMAGENAME eq chrome.exe" /fi "STATUS eq running" /fo list /v';
	    this.yandexCommand = 'chcp 65001 & tasklist /fi "IMAGENAME eq browser.exe" /fi "STATUS eq running" /fo list /v';
	    this.chromeOutputFile = _drpCoreSystem.ensurePath(_libUtils.AppPath + '\\temp') + '\\log_monitoring_chrome_output_file.txt';
	    this.yandexOutputFile = _drpCoreSystem.ensurePath(_libUtils.AppPath + '\\temp') + '\\log_monitoring_yandex_output_file.txt';
	    this.tempChromeOutputFile = _drpCoreSystem.ensurePath(_libUtils.AppPath + '\\temp') + '\\log_monitoring_temp_chrome_output_file.txt';
	    this.tempYandexOutputFile = _drpCoreSystem.ensurePath(_libUtils.AppPath + '\\temp') + '\\log_monitoring_temp_yandex_output_file.txt';
	    this.openYandexStartpageCommand = 'start chrome "http://yandex.ru/?clid=2100765"';
	    this.makeYandexDefaultRegKeyHKCU = 'HKCU\\SOFTWARE\\Clients\\StartMenuInternet\\InstallInfo\\ReinstallCommand';
	    this.makeYandexDefaultRegKeyHKLM = 'HKCU\\SOFTWARE\\Clients\\StartMenuInternet\\InstallInfo\\ReinstallCommand';
	    this.settingsImportedRegKey = 'HKCU\\Software\\drpsu\\yaBrowserSettingsImported';
	    this.settingsImportedTypeRegKey = 'HKCU\\Software\\drpsu\\yaBrowserSettingsImportedType';
	    this.yandexBrowserRegKey = 'HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\YandexBrowser\\DisplayName';
	    this.yandexBrowserLauncher = _drpCoreSystemSpecialFolders.localAppData + '\\Yandex\\YandexBrowser\\Application\\browser.exe';
	    this.lastDisplayedTime = {
	      'yandex-browser-youtube': initTime,
	      'yandex-browser-watch-video': initTime,
	      'yandex-browser-block-access': initTime,
	      'yandex-browser-yandex-services': initTime,
	      'yandex-browser-socnetwork': initTime,
	      'yandex-browser-banking': initTime,
	      'yandex-browser-buy-sell': initTime,
	      'yandex-browser-geo-city': initTime,
	      'yandex-browser-geo-metro': initTime,
	      'yandex-browser-settings-import': initTime,
	      'yandex-browser-news': initTime,
	      'yandex-browser-business-news': initTime,
	      'yandex-browser-yandex-market': initTime,
	      'yandex-browser-secure-wifi': initTime
	    };

	    this.browsers = {
	      chrome: {
	        checkMethodName: 'checkChrome'
	      },
	      yandex: {
	        checkMethodName: 'checkYandexBrowser'
	      }
	    };
	    this.searchEngines = {
	      'yandex.ru': {
	        reg: /: (.*) — Яндекс:/
	      },
	      'google.ru': {
	        reg: /: (.*) - Поиск в Google/
	      }
	    };
	    this.searches = {};
	    Object.keys(this.searchEngines).forEach(function (se) {
	      _this.searches[se] = {};
	      Object.keys(_this.browsers).forEach(function (br) {
	        _this.searches[se][br] = [];
	      });
	    });
	  }

	  Yandex.prototype.run = function run() {
	    if (window.RunningYandex) {
	      return;
	    } else {
	      window.RunningYandex = true;
	      this.tick();
	    }
	  };

	  Yandex.prototype.tick = function tick() {
	    return regeneratorRuntime.async(function tick$(context$2$0) {
	      var _this2 = this;

	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          context$2$0.prev = 0;
	          context$2$0.next = 3;
	          return regeneratorRuntime.awrap(this.checkYandex());

	        case 3:
	          setTimeout(function () {
	            return _this2.tick();
	          }, CheckTimeout);
	          context$2$0.next = 9;
	          break;

	        case 6:
	          context$2$0.prev = 6;
	          context$2$0.t0 = context$2$0['catch'](0);

	          window.RunningYandex = false;

	        case 9:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this, [[0, 6]]);
	  };

	  Yandex.prototype.checkYandex = function checkYandex() {
	    var _iterator, _isArray, _i, _ref, checkMethodName;

	    return regeneratorRuntime.async(function checkYandex$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          _iterator = Object.entries(this.browsers), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();

	        case 1:
	          if (!_isArray) {
	            context$2$0.next = 7;
	            break;
	          }

	          if (!(_i >= _iterator.length)) {
	            context$2$0.next = 4;
	            break;
	          }

	          return context$2$0.abrupt('break', 16);

	        case 4:
	          _ref = _iterator[_i++];
	          context$2$0.next = 11;
	          break;

	        case 7:
	          _i = _iterator.next();

	          if (!_i.done) {
	            context$2$0.next = 10;
	            break;
	          }

	          return context$2$0.abrupt('break', 16);

	        case 10:
	          _ref = _i.value;

	        case 11:
	          checkMethodName = _ref[1].checkMethodName;
	          context$2$0.next = 14;
	          return regeneratorRuntime.awrap(this[checkMethodName]());

	        case 14:
	          context$2$0.next = 1;
	          break;

	        case 16:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Yandex.prototype.checkChrome = function checkChrome() {
	    var chromeTextStream;
	    return regeneratorRuntime.async(function checkChrome$(context$2$0) {
	      var _this5 = this;

	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          this.updateChromeOutputFile();
	          this.updateYandexOutputFile();

	          if (!_drpCoreSystem.fso.FileExists(this.chromeOutputFile)) {
	            context$2$0.next = 8;
	            break;
	          }

	          chromeTextStream = _drpCoreSystem.fso.OpenTextFile(this.chromeOutputFile, 1, false, -1);

	          if (chromeTextStream.AtEndOfStream) {
	            context$2$0.next = 7;
	            break;
	          }

	          context$2$0.next = 7;
	          return regeneratorRuntime.awrap((function callee$2$0() {
	            var chromeOutputText;
	            return regeneratorRuntime.async(function callee$2$0$(context$3$0) {
	              var _this4 = this;

	              while (1) switch (context$3$0.prev = context$3$0.next) {
	                case 0:
	                  chromeOutputText = chromeTextStream.ReadAll();

	                  if (!this.checkTasklistOutput(chromeOutputText, 'chrome.exe', '- Google Chrome')) {
	                    context$3$0.next = 4;
	                    break;
	                  }

	                  context$3$0.next = 4;
	                  return regeneratorRuntime.awrap((function callee$3$0() {
	                    var chromeWasRunning, openUrl, unreachableLinkWasOpened, link, bankingWasOpened, yandexMarketWasOpened, buySellWasOpened, geoCityWasOpened, geoMetroWasOpened, newsWasOpened, businessNewsWasOpened, youtubeWasOpened, watchVideoWasOpened, blockedWebsiteWasOpened, yandexServiceWasOpened, batteryIsLow, yandexSocnetworkWasOpened, wifiIsSecure, br;
	                    return regeneratorRuntime.async(function callee$3$0$(context$4$0) {
	                      var _this3 = this;

	                      while (1) switch (context$4$0.prev = context$4$0.next) {
	                        case 0:
	                          chromeWasRunning = this.chromeIsRunning;

	                          this.chromeIsRunning = this.checkChromeIsRunning(chromeOutputText);
	                          if (!chromeWasRunning && this.chromeIsRunning) {
	                            _drpCoreStatistics2['default'].event({ action: 'trigger chrome launched' });
	                          }

	                          if (!(!_libUtils.isOldOS && _drpCoreStatistics2['default'].experiment === 'yapromo')) {
	                            context$4$0.next = 134;
	                            break;
	                          }

	                          if (!chromeWasRunning && this.chromeIsRunning && !this.checkYandexIsOpened(chromeOutputText)) {
	                            this.openYandexStartPage();
	                          }

	                          openUrl = undefined;
	                          unreachableLinkWasOpened = this.unreachableLinkIsOpened;
	                          link = this.checkUnreachableLinkIsOpened(chromeOutputText);

	                          this.unreachableLinkIsOpened = !!link;
	                          if (!unreachableLinkWasOpened && this.unreachableLinkIsOpened) {
	                            _drpCoreStatistics2['default'].event({ action: 'trigger chrome unreachable opened' }, [], true);
	                            _libUtils.openYandexWithQuery(link, null, true);
	                          }

	                          bankingWasOpened = this.bankingIsOpened;

	                          openUrl = this.checkBankingIsOpened(chromeOutputText);
	                          this.bankingIsOpened = !!openUrl;

	                          if (!(!bankingWasOpened && this.bankingIsOpened)) {
	                            context$4$0.next = 18;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-banking')) {
	                            context$4$0.next = 18;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-banking'] = Date.now();
	                          context$4$0.next = 18;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-banking', { openUrl: openUrl }));

	                        case 18:
	                          yandexMarketWasOpened = this.yandexMarketIsOpened;

	                          openUrl = this.checkYandexMarketIsOpened(chromeOutputText);
	                          this.yandexMarketIsOpened = !!openUrl;

	                          if (!(!yandexMarketWasOpened && this.yandexMarketIsOpened)) {
	                            context$4$0.next = 26;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-yandex-market')) {
	                            context$4$0.next = 26;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-yandex-market'] = Date.now();
	                          context$4$0.next = 26;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-yandex-market', { openUrl: openUrl }));

	                        case 26:
	                          buySellWasOpened = this.buySellIsOpened;

	                          openUrl = this.checkBuySellIsOpened(chromeOutputText);
	                          this.buySellIsOpened = !!openUrl;

	                          if (!(!buySellWasOpened && this.buySellIsOpened)) {
	                            context$4$0.next = 34;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-buy-sell')) {
	                            context$4$0.next = 34;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-buy-sell'] = Date.now();
	                          context$4$0.next = 34;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-buy-sell', { openUrl: openUrl }));

	                        case 34:
	                          geoCityWasOpened = this.geoCityIsOpened;

	                          openUrl = this.checkGeoCityIsOpened(chromeOutputText);
	                          this.geoCityIsOpened = !!openUrl;

	                          if (!(!geoCityWasOpened && this.geoCityIsOpened)) {
	                            context$4$0.next = 42;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-geo-city')) {
	                            context$4$0.next = 42;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-geo-city'] = Date.now();
	                          context$4$0.next = 42;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-geo-city', { openUrl: openUrl }));

	                        case 42:
	                          geoMetroWasOpened = this.geoMetroIsOpened;

	                          openUrl = this.checkGeoMetroIsOpened(chromeOutputText);
	                          this.geoMetroIsOpened = !!openUrl;

	                          if (!(!geoMetroWasOpened && this.geoMetroIsOpened)) {
	                            context$4$0.next = 50;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-geo-metro')) {
	                            context$4$0.next = 50;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-geo-metro'] = Date.now();
	                          context$4$0.next = 50;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-geo-metro', { openUrl: openUrl }));

	                        case 50:
	                          newsWasOpened = this.newsIsOpened;

	                          this.newsIsOpened = this.checkNewsIsOpened(chromeOutputText);

	                          if (!(!newsWasOpened && this.newsIsOpened)) {
	                            context$4$0.next = 57;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-news')) {
	                            context$4$0.next = 57;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-news'] = Date.now();
	                          context$4$0.next = 57;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-news'));

	                        case 57:
	                          businessNewsWasOpened = this.businessNewsIsOpened;

	                          this.businessNewsIsOpened = this.checkBusinessNewsIsOpened(chromeOutputText);

	                          if (!(!businessNewsWasOpened && this.businessNewsIsOpened)) {
	                            context$4$0.next = 64;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-business-news')) {
	                            context$4$0.next = 64;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-business-news'] = Date.now();
	                          context$4$0.next = 64;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-business-news'));

	                        case 64:
	                          youtubeWasOpened = this.youtubeIsOpened;

	                          this.youtubeIsOpened = this.checkYoutubeIsOpened(chromeOutputText);

	                          if (!(!youtubeWasOpened && this.youtubeIsOpened)) {
	                            context$4$0.next = 71;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-youtube')) {
	                            context$4$0.next = 71;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-youtube'] = Date.now();
	                          context$4$0.next = 71;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-youtube'));

	                        case 71:
	                          watchVideoWasOpened = this.watchVideoIsOpened;

	                          this.watchVideoIsOpened = this.checkWatchVideoIsOpened(chromeOutputText);

	                          if (!(!watchVideoWasOpened && this.watchVideoIsOpened)) {
	                            context$4$0.next = 78;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-watch-video')) {
	                            context$4$0.next = 78;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-watch-video'] = Date.now();
	                          context$4$0.next = 78;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-watch-video'));

	                        case 78:
	                          blockedWebsiteWasOpened = this.blockedWebsiteIsOpened;

	                          this.blockedWebsiteIsOpened = this.checkBlockedWebsiteIsOpened(chromeOutputText);

	                          if (!(!blockedWebsiteWasOpened && this.blockedWebsiteIsOpened)) {
	                            context$4$0.next = 85;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-block-access')) {
	                            context$4$0.next = 85;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-block-access'] = Date.now();
	                          context$4$0.next = 85;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-block-access'));

	                        case 85:
	                          yandexServiceWasOpened = this.yandexServiceIsOpened;

	                          openUrl = this.checkYandexServiceIsOpened(chromeOutputText);
	                          this.yandexServiceIsOpened = !!openUrl;

	                          if (!(!yandexServiceWasOpened && this.yandexServiceIsOpened)) {
	                            context$4$0.next = 93;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-yandex-services')) {
	                            context$4$0.next = 93;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-yandex-services'] = Date.now();
	                          context$4$0.next = 93;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-yandex-services', { openUrl: openUrl }));

	                        case 93:
	                          context$4$0.next = 95;
	                          return regeneratorRuntime.awrap(this.checkBatteryLow());

	                        case 95:
	                          batteryIsLow = context$4$0.sent;

	                          if (!(batteryIsLow && this.chromeIsRunning && !this.yandexIsRunning)) {
	                            context$4$0.next = 99;
	                            break;
	                          }

	                          context$4$0.next = 99;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-battery-low'));

	                        case 99:
	                          yandexSocnetworkWasOpened = this.yandexSocnetworkIsOpened;

	                          openUrl = this.checkSocnetworkIsOpened(chromeOutputText);
	                          this.yandexSocnetworkIsOpened = !!openUrl;

	                          if (!(!yandexSocnetworkWasOpened && this.yandexSocnetworkIsOpened)) {
	                            context$4$0.next = 107;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-socnetwork')) {
	                            context$4$0.next = 107;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-socnetwork'] = Date.now();
	                          context$4$0.next = 107;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-socnetwork', { openUrl: openUrl }));

	                        case 107:
	                          context$4$0.next = 109;
	                          return regeneratorRuntime.awrap(this.checkSecureWiFi());

	                        case 109:
	                          wifiIsSecure = context$4$0.sent;

	                          if (!(!wifiIsSecure && this.chromeIsRunning && !this.yandexIsRunning)) {
	                            context$4$0.next = 115;
	                            break;
	                          }

	                          if (!this.checkDisplayPeriod('yandex-browser-secure-wifi')) {
	                            context$4$0.next = 115;
	                            break;
	                          }

	                          this.lastDisplayedTime['yandex-browser-secure-wifi'] = Date.now();
	                          context$4$0.next = 115;
	                          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-secure-wifi'));

	                        case 115:
	                          if (!_drpCoreSystem.RegExists(this.settingsImportedTypeRegKey)) {
	                            context$4$0.next = 125;
	                            break;
	                          }

	                          if (!(_drpCoreSystem.RegRead(this.settingsImportedTypeRegKey) === 'context')) {
	                            context$4$0.next = 121;
	                            break;
	                          }

	                          context$4$0.next = 119;
	                          return regeneratorRuntime.awrap(this.showContextSettingsImport());

	                        case 119:
	                          context$4$0.next = 123;
	                          break;

	                        case 121:
	                          context$4$0.next = 123;
	                          return regeneratorRuntime.awrap(this.showNoContextSettingsImport());

	                        case 123:
	                          context$4$0.next = 134;
	                          break;

	                        case 125:
	                          if (!Math.floor(Math.random() * 2)) {
	                            context$4$0.next = 131;
	                            break;
	                          }

	                          _drpCoreSystem.RegWrite(this.settingsImportedTypeRegKey, 'context');
	                          context$4$0.next = 129;
	                          return regeneratorRuntime.awrap(this.showContextSettingsImport());

	                        case 129:
	                          context$4$0.next = 134;
	                          break;

	                        case 131:
	                          _drpCoreSystem.RegWrite(this.settingsImportedTypeRegKey, 'nocontext');
	                          context$4$0.next = 134;
	                          return regeneratorRuntime.awrap(this.showNoContextSettingsImport());

	                        case 134:
	                          br = 'chrome';

	                          Object.entries(this.searchEngines).forEach(function (_ref4) {
	                            var se = _ref4[0];
	                            var reg = _ref4[1].reg;

	                            var query = _this3.checkPatternIsOpened(chromeOutputText, reg);
	                            if (query && _this3.searches[se][br].indexOf(query) === -1) {
	                              _drpCoreStatistics2['default'].event({ action: 'trigger ' + br + ' ' + se + ' search opened' });
	                              _this3.searches[se][br].push(query);
	                            }
	                          });

	                        case 136:
	                        case 'end':
	                          return context$4$0.stop();
	                      }
	                    }, null, _this4);
	                  })());

	                case 4:
	                case 'end':
	                  return context$3$0.stop();
	              }
	            }, null, _this5);
	          })());

	        case 7:
	          chromeTextStream.Close();

	        case 8:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Yandex.prototype.checkYandexBrowser = function checkYandexBrowser() {
	    var yandexTextStream;
	    return regeneratorRuntime.async(function checkYandexBrowser$(context$2$0) {
	      var _this6 = this;

	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          this.updateYandexOutputFile();
	          if (_drpCoreSystem.fso.FileExists(this.yandexOutputFile)) {
	            yandexTextStream = _drpCoreSystem.fso.OpenTextFile(this.yandexOutputFile, 1, false, -1);

	            if (!yandexTextStream.AtEndOfStream) {
	              (function () {
	                var yandexOutputText = yandexTextStream.ReadAll();
	                // fix bug: output file doesn't contain correct window title
	                if (_this6.checkTasklistOutput(yandexOutputText, 'browser.exe', ' Yandex')) {
	                  (function () {
	                    var yandexWasRunning = _this6.yandexIsRunning;
	                    _this6.yandexIsRunning = _this6.checkYandexIsRunning(yandexOutputText);
	                    if (!yandexWasRunning && _this6.yandexIsRunning) {
	                      _this6.yandexOpenTime = Date.now();
	                      var params = {};
	                      var pInfo = _drpCoreDiagnosticsCheckSoft.getPartnerInfo({ Program: 'Yandex' });
	                      if (pInfo.clids && pInfo.clids[0]) {
	                        params.clid = {
	                          full: pInfo.clids[0],
	                          short: pInfo.clids[0].split('-')[0]
	                        };
	                      }
	                      _drpCoreStatistics2['default'].event({
	                        action: 'trigger yandex launched',
	                        params: params
	                      });
	                    } else if (!_this6.yandexIsRunning) {
	                      _this6.yandexOpenTime = false;
	                    }

	                    var br = 'yandex';
	                    Object.entries(_this6.searchEngines).forEach(function (_ref5) {
	                      var se = _ref5[0];
	                      var reg = _ref5[1].reg;

	                      var query = _this6.checkPatternIsOpened(yandexOutputText, reg);
	                      if (query && _this6.searches[se][br].indexOf(query) === -1) {
	                        _drpCoreStatistics2['default'].event({ action: 'trigger ' + br + ' ' + se + ' search opened' });
	                        _this6.searches[se][br].push(query);
	                      }
	                    });
	                  })();
	                }
	              })();
	            }
	            yandexTextStream.Close();
	          }

	        case 2:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Yandex.prototype.updateChromeOutputFile = function updateChromeOutputFile() {
	    var chromeOutputCommand = 'cmd /c ' + this.chromeCommand + ' > "' + this.tempChromeOutputFile + '" && cmd /u /c type "' + this.tempChromeOutputFile + '" > "' + this.chromeOutputFile + '" && timeout 1';
	    _drpCoreSystem.WshShell.Run(chromeOutputCommand, 0, true);
	  };

	  Yandex.prototype.updateYandexOutputFile = function updateYandexOutputFile() {
	    var yandexOutputCommand = 'cmd /c ' + this.yandexCommand + ' > "' + this.tempYandexOutputFile + '" && cmd /u /c type "' + this.tempYandexOutputFile + '" > "' + this.yandexOutputFile + '" && timeout 1';
	    _drpCoreSystem.WshShell.Run(yandexOutputCommand, 0, true);
	  };

	  Yandex.prototype.checkTasklistOutput = function checkTasklistOutput(text, checkImageNameString, checkWindowTitleString) {
	    return !(text.indexOf(checkImageNameString) !== -1 && text.indexOf(checkWindowTitleString) === -1);
	  };

	  Yandex.prototype.checkDisplayPeriod = function checkDisplayPeriod(notifyType) {
	    var now = Date.now();
	    var diff = now - this.lastDisplayedTime[notifyType];
	    var expiredPeriod =  false ? 60 * 1000 : 60 * 60 * 1000;
	    return diff > expiredPeriod;
	  };

	  Yandex.prototype.checkChromeIsRunning = function checkChromeIsRunning(text) {
	    return text.indexOf('- Google Chrome') !== -1;
	  };

	  Yandex.prototype.checkYandexIsRunning = function checkYandexIsRunning(text) {
	    return text.indexOf(' Yandex') !== -1;
	  };

	  Yandex.prototype.checkBankingIsOpened = function checkBankingIsOpened(text) {
	    var result = undefined;
	    var windowTitle = text.match(/Window Title:\s*(.*)/);
	    if (windowTitle) {
	      windowTitle = windowTitle[1];
	      var bank = Object.entries(_libYandexHypoData.bankingData).find(function (_ref6) {
	        var titleStr = _ref6[0];
	        var openUrl = _ref6[1];

	        return windowTitle.indexOf(titleStr) !== -1;
	      });
	      if (bank) {
	        result = bank[1];
	      }
	    }
	    return result;
	  };

	  Yandex.prototype.checkYandexMarketIsOpened = function checkYandexMarketIsOpened(text) {
	    var result = undefined;
	    var windowTitle = text.match(/Window Title:\s*(.*)/);
	    if (windowTitle) {
	      windowTitle = windowTitle[1];
	      var shop = Object.entries(_libYandexHypoData.yandexMarketData).find(function (_ref7) {
	        var titleStr = _ref7[0];
	        var reg = _ref7[1];

	        return windowTitle.indexOf(titleStr) !== -1;
	      });
	      if (shop) {
	        var reg = shop[1];
	        var product = windowTitle.match(reg);
	        if (product) {
	          result = 'https://market.yandex.ru/search.xml?text=' + encodeURIComponent(product[1]) + '&deliveryincluded=0';
	        }
	      }
	    }
	    return result;
	  };

	  Yandex.prototype.checkBuySellIsOpened = function checkBuySellIsOpened(text) {
	    var result = undefined;
	    var reg = this.searchEngines['google.ru']['reg'];
	    var query = this.checkPatternIsOpened(text, reg);
	    if (query && /купить/i.test(query)) {
	      result = 'https://yandex.ru/search/?clid=2245086&text=' + encodeURIComponent(query);
	    }
	    return result;
	  };

	  Yandex.prototype.checkGeoCityIsOpened = function checkGeoCityIsOpened(text) {
	    var result = undefined;
	    var reg = this.searchEngines['google.ru']['reg'];
	    var query = this.checkPatternIsOpened(text, reg);
	    if (query) {
	      var city = _libYandexHypoData.geoCityData.find(function (cityName) {
	        return query.toLowerCase().indexOf(cityName.toLowerCase()) !== -1;
	      });
	      if (city) {
	        result = 'https://yandex.ru/search/?clid=2259230&text=' + encodeURIComponent(query);
	      }
	    }
	    return result;
	  };

	  Yandex.prototype.checkGeoMetroIsOpened = function checkGeoMetroIsOpened(text) {
	    var result = undefined;
	    var reg = this.searchEngines['google.ru']['reg'];
	    var query = this.checkPatternIsOpened(text, reg);
	    if (query) {
	      var metro = _libYandexHypoData.geoMetroData.find(function (metroStation) {
	        return query.toLowerCase().indexOf(metroStation.toLowerCase()) !== -1;
	      });
	      if (metro) {
	        result = 'https://yandex.ru/search/?clid=2100776&text=' + encodeURIComponent(query);
	      }
	    }
	    return result;
	  };

	  Yandex.prototype.checkNewsIsOpened = function checkNewsIsOpened(text) {
	    return Object.values(_libYandexHypoData.newsData).some(function (reg) {
	      return reg.test(text);
	    });
	  };

	  Yandex.prototype.checkBusinessNewsIsOpened = function checkBusinessNewsIsOpened(text) {
	    return Object.values(_libYandexHypoData.businessNewsData).some(function (reg) {
	      return reg.test(text);
	    });
	  };

	  Yandex.prototype.checkYandexIsOpened = function checkYandexIsOpened(text) {
	    return (/Яндекс/i.test(text)
	    );
	  };

	  Yandex.prototype.checkYoutubeIsOpened = function checkYoutubeIsOpened(text) {
	    return (/youtube/i.test(text)
	    );
	  };

	  Yandex.prototype.checkWatchVideoIsOpened = function checkWatchVideoIsOpened(text) {
	    return (/смотреть/i.test(text)
	    );
	  };

	  Yandex.prototype.checkBlockedWebsiteIsOpened = function checkBlockedWebsiteIsOpened(text) {
	    var regexpObj = {
	      'доступ': ['запрет', 'закрыт', 'запрещен', 'ограничен', 'заблокирован'],
	      'запрещен': ['доступ'],
	      'сайт': ['заблокирован'],
	      'страница': ['заблокирован'],
	      'ресурс': ['заблокирован'],
	      'заблокирован': ['сайт', 'страница', 'ресурс'],
	      'access': ['denied', 'blocked'],
	      'site': ['blocked'],
	      'page': ['blocked'],
	      'blocked': ['page', 'site']
	    };
	    var regExpForTest = new RegExp('доступ запрещен' + buildRoskomRegExp(regexpObj), 'i');
	    return regExpForTest.test(text);
	  };

	  Yandex.prototype.checkYandexServiceIsOpened = function checkYandexServiceIsOpened(text) {
	    var result = undefined;
	    var windowTitle = text.match(/Window Title:\s*(.*)/);
	    if (windowTitle) {
	      windowTitle = windowTitle[1];
	      var service = Object.entries(_libYandexHypoData.yandexServicesData).find(function (_ref8) {
	        var titleStr = _ref8[0];
	        var openUrl = _ref8[1];

	        return windowTitle.indexOf(titleStr) !== -1;
	      });
	      if (service) {
	        result = service[1];
	      }
	    }
	    return result;
	  };

	  Yandex.prototype.checkSocnetworkIsOpened = function checkSocnetworkIsOpened(text) {
	    var m = text.match(/Window Title:\s*(.*)/);
	    if (m) {
	      var windowTitle = m[1];
	      for (var _iterator2 = this.socnetworks, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
	        var _ref2;

	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }

	        var uri = _ref2[0];
	        var strict = _ref2[1];

	        var titles = _ref2.slice(2);

	        for (var _iterator3 = titles, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
	          var _ref3;

	          if (_isArray3) {
	            if (_i3 >= _iterator3.length) break;
	            _ref3 = _iterator3[_i3++];
	          } else {
	            _i3 = _iterator3.next();
	            if (_i3.done) break;
	            _ref3 = _i3.value;
	          }

	          var title = _ref3;

	          var idx = windowTitle.indexOf(title);
	          if (strict ? idx === 0 : idx >= 0) {
	            return uri;
	          }
	        }
	      }
	    }
	  };

	  Yandex.prototype.checkUnreachableLinkIsOpened = function checkUnreachableLinkIsOpened(text) {
	    var result = undefined;
	    var reg = /http:\/\/(.*)\/ (is not available|недоступен)/;
	    var res = reg.exec(text);
	    if (res) {
	      result = res[1];
	    }
	    return result;
	  };

	  Yandex.prototype.checkPatternIsOpened = function checkPatternIsOpened(text, reg) {
	    var result = undefined;
	    var res = reg.exec(text);
	    if (res) {
	      result = res[1];
	    }
	    return result;
	  };

	  Yandex.prototype.checkBatteryLow = function checkBatteryLow() {
	    var batteries = _drpCoreWmi.getWMIObjects(['EstimatedChargeRemaining'], 'Win32_Battery');
	    if (batteries && batteries[0]) {
	      return parseInt(batteries[0].EstimatedChargeRemaining, 10) < 15;
	    }
	    return false;
	  };

	  Yandex.prototype.checkReadyForSettingsImport = function checkReadyForSettingsImport() {
	    var result = false;
	    if (this.yandexOpenTime && !_drpCoreSystem.RegExists(this.settingsImportedRegKey)) {
	      var checkTime =  false ? 5 * 1000 : 5 * 60 * 1000;
	      if (Date.now() - this.yandexOpenTime > checkTime) {
	        result = true;
	      }
	    }
	    return result;
	  };

	  Yandex.prototype.checkSecureWiFi = function checkSecureWiFi() {
	    return new Promise(function (resolve, reject) {
	      var wifiTempOutputFile = _drpCoreSystem.ensurePath(_libUtils.AppPath + '\\temp') + '\\log_monitoring_temp_wifi_output_file.txt';
	      var wifiOutputFile = _drpCoreSystem.ensurePath(_libUtils.AppPath + '\\temp') + '\\log_monitoring_wifi_output_file.txt';
	      try {
	        _drpCoreSystem.WshShell.Run('cmd /c chcp 65001 & netsh wlan show interface > "' + wifiTempOutputFile + '"  && cmd /u /c type "' + wifiTempOutputFile + '" > "' + wifiOutputFile + '" && timeout 1', 0, false);
	      } catch (err) {}
	      setTimeout(function () {
	        var result = true;
	        if (_drpCoreSystem.fso.FileExists(wifiOutputFile)) {
	          var wifiTextStream = _drpCoreSystem.fso.OpenTextFile(wifiOutputFile, 1, false, -1);
	          if (!wifiTextStream.AtEndOfStream) {
	            var wifiText = wifiTextStream.ReadAll();
	            wifiTextStream.Close();
	            try {
	              var encryptionType = wifiText.match(/(?:Проверка подлинности|Authentication)(.+)/i)[1].toLowerCase();
	              if (!/(wpa|tkip|ckip)/.test(encryptionType)) {
	                result = false;
	              }
	            } catch (err) {}
	          }
	        }
	        resolve(result);
	      }, 1000);
	    });
	  };

	  Yandex.prototype.showContextSettingsImport = function showContextSettingsImport() {
	    return regeneratorRuntime.async(function showContextSettingsImport$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          if (!(this.checkReadyForSettingsImport() && this.lastClickedNotificationType)) {
	            context$2$0.next = 5;
	            break;
	          }

	          if (!this.checkDisplayPeriod('yandex-browser-settings-import')) {
	            context$2$0.next = 5;
	            break;
	          }

	          this.lastDisplayedTime['yandex-browser-settings-import'] = Date.now();
	          context$2$0.next = 5;
	          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-settings-' + this.lastClickedNotificationType));

	        case 5:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Yandex.prototype.showNoContextSettingsImport = function showNoContextSettingsImport() {
	    return regeneratorRuntime.async(function showNoContextSettingsImport$(context$2$0) {
	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          if (!(this.chromeIsRunning && this.yandexIsRunning && this.checkYandexBrowserIsOur() && this.checkReadyForSettingsImport())) {
	            context$2$0.next = 5;
	            break;
	          }

	          if (!this.checkDisplayPeriod('yandex-browser-settings-import')) {
	            context$2$0.next = 5;
	            break;
	          }

	          this.lastDisplayedTime['yandex-browser-settings-import'] = Date.now();
	          context$2$0.next = 5;
	          return regeneratorRuntime.awrap(this.showNotification('yandex-browser-settings-import'));

	        case 5:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Yandex.prototype.checkYandexBrowserIsInstalled = function checkYandexBrowserIsInstalled() {
	    return _drpCoreSystem.RegExists(this.yandexBrowserRegKey);
	  };

	  Yandex.prototype.checkYandexBrowserIsOur = function checkYandexBrowserIsOur() {
	    return _drpCoreDiagnosticsCheckSoft.getPartnerInfo({ Program: 'Yandex' }).isPartner;
	  };

	  Yandex.prototype.openYandexStartPage = function openYandexStartPage() {
	    _libUtils.startCommand(this.openYandexStartpageCommand);
	  };

	  Yandex.prototype.openYandexBrowser = function openYandexBrowser(openUrl) {
	    var wrappedCommand = _drpCoreLibUtils.wrapInCmd('start browser "' + openUrl + '"');
	    _drpCoreSystem.WshShell.Run(wrappedCommand, 0, false);
	  };

	  Yandex.prototype.installYandexBrowser = function installYandexBrowser() {
	    var downloadURI = 'http://download.drp.su/updates/ya-downloader/downloader_browser.exe';
	    var keys = '--partner drpsu --distr /passive /msicl "YABM=n YABROWSER=y YAHOMEPAGE=y YAQSEARCH=y YBSENDSTAT=n ILIGHT=1 VID="501"" --try 10 /log "%temp%\\YaBrInstall.log"';
	    var fileName = downloadURI.split('/').slice(-1);
	    var targetFolder = _drpCoreSystem.WshShell.ExpandEnvironmentStrings('%TEMP%');
	    if (_drpCoreSystem.fso.FileExists(_libUtils.WgetPath)) {
	      var wgetCommand = '"' + _libUtils.WgetPath + '" -P "' + targetFolder + '" "' + downloadURI + '"';
	      _drpCoreSystem.WshShell.Run(_drpCoreLibUtils.wrapInCmd(wgetCommand), 0, true);
	      setTimeout(function () {
	        _drpCoreSystem.WshShell.Run('"' + targetFolder + '\\' + fileName + '" ' + keys, 1, false);
	      }, 0);
	    }
	  };

	  Yandex.prototype.showNotification = function showNotification(type) {
	    var data = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var browserIsInstalled, browserIsOur;
	    return regeneratorRuntime.async(function showNotification$(context$2$0) {
	      var _this8 = this;

	      while (1) switch (context$2$0.prev = context$2$0.next) {
	        case 0:
	          browserIsInstalled = this.checkYandexBrowserIsInstalled();
	          browserIsOur = this.checkYandexBrowserIsOur();

	          if (!(!browserIsInstalled || browserIsOur)) {
	            context$2$0.next = 5;
	            break;
	          }

	          context$2$0.next = 5;
	          return regeneratorRuntime.awrap((function callee$2$0() {
	            var notification, status;
	            return regeneratorRuntime.async(function callee$2$0$(context$3$0) {
	              var _this7 = this;

	              while (1) switch (context$3$0.prev = context$3$0.next) {
	                case 0:
	                  notification = new _libNotification2['default']('' + type + (browserIsInstalled ? '-installed' : ''));
	                  context$3$0.next = 3;
	                  return regeneratorRuntime.awrap(notification.show());

	                case 3:
	                  status = context$3$0.sent;

	                  if (status === 'ok') {
	                    if (browserIsInstalled) {
	                      if (type.indexOf('yandex-browser-settings') !== -1) {
	                        this.importChromeSetting();
	                      } else {
	                        this.lastClickedNotificationType = type.replace(/yandex-browser-/, '').replace(/-installed/, '');
	                        setTimeout(function () {
	                          if (data.openUrl && data.openUrl !== notification.config.openUrl) {
	                            _this7.openYandexBrowser(data.openUrl);
	                          }
	                          if (notification.config.openUrl) {
	                            _this7.openYandexBrowser(notification.config.openUrl);
	                          }
	                        }, 0);
	                      }
	                    } else {
	                      if (['yandex-browser-buy-sell', 'yandex-browser-geo-city', 'yandex-browser-geo-metro'].indexOf(type) !== -1) {
	                        _drpCoreLibUtils.goToUrl(data.openUrl);
	                      } else if (type.indexOf('yandex-browser-settings') === -1) {
	                        this.lastClickedNotificationType = type.replace(/yandex-browser-/, '').replace(/-installed/, '');
	                        setTimeout(function () {
	                          _this7.installYandexBrowser();
	                        }, 0);
	                      }
	                    }
	                  }

	                case 5:
	                case 'end':
	                  return context$3$0.stop();
	              }
	            }, null, _this8);
	          })());

	        case 5:
	        case 'end':
	          return context$2$0.stop();
	      }
	    }, null, this);
	  };

	  Yandex.prototype.importChromeSetting = function importChromeSetting() {
	    setTimeout(function () {
	      try {
	        _drpCoreSystem.WshShell.Run('cmd /C echo browser://settings/importData | CLIP & start browser.exe about:blank', 0, false);
	      } catch (err) {}
	      setTimeout(function () {
	        _drpCoreSystem.WshShell.SendKeys('{ESCAPE}');
	      }, 1 * 1000);
	      setTimeout(function () {
	        _drpCoreSystem.WshShell.SendKeys('^t');
	      }, 3 * 1000);
	      setTimeout(function () {
	        _drpCoreSystem.WshShell.SendKeys('^v{ENTER}');
	      }, 6 * 1000);
	      setTimeout(function () {
	        _drpCoreSystem.WshShell.SendKeys('+{TAB}');
	      }, 9 * 1000);
	      setTimeout(function () {
	        _drpCoreSystem.WshShell.SendKeys('+{TAB}{ENTER}');
	      }, 12 * 1000);
	    }, 0);
	    try {
	      _drpCoreSystem.WshShell.Run('cmd /c "' + this.yandexBrowserLauncher + '" --make-default-browser', 0, false);
	    } catch (err) {}
	  };

	  Yandex.prototype.showWidget = function showWidget() {
	    if (window.DisplayingYandexWidget) {
	      return;
	    } else {
	      window.DisplayingYandexWidget = true;
	      var notification = new _libNotification2['default']('yandexwidget', {});
	      notification.showImmediately();
	    }
	  };

	  return Yandex;
	})();

	exports['default'] = Yandex;
	module.exports = exports['default'];

	// fix bug: output file doesn't contain correct window title

/***/ }
/******/ ])));